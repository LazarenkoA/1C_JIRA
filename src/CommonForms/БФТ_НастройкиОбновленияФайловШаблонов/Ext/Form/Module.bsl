/////////////// Защита модуля ///////////////
// @protect                                //
/////////////////////////////////////////////


#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Перем ОсуществляемыеПроверки, ОсуществляемыеПроверкиМассив;
	
	//Параметры.Свойство("ЗакрытьПослеОбновления", ЗакрытьПослеОбновления);      
	Параметры.Свойство("ОсуществляемыеПроверки", ОсуществляемыеПроверки);    
	
	Если ОсуществляемыеПроверки = Неопределено Тогда
		// По умолчанию взводим все галки
		ОсуществляемыеПроверки = "ПроверкаПереносаСтрокиПространстваИмен," +
		"ПроверкаДиректив_include,ПроверкаНаОпределениеПараметровВМакете," +
		"ПроверкаКодировкиФайла,ПроверкаCDATA,ПроверкаНастроекШаблонов";
	КонецЕсли;
	
	ОсуществляемыеПроверкиМассив = СтрРазделить(ОсуществляемыеПроверки, ",");
	Для каждого Проверка Из ОсуществляемыеПроверкиМассив Цикл
		ЭтаФорма[Проверка] = Истина;
	КонецЦикла;
	
	НастройкаПодключенияКРепозиторию = Справочники.БФТ_НастройкаПодключенияКРепозиторию.ПолучитьЕдинственнуюНастройкуПодключенияКРепозиторию(); 
КонецПроцедуры


&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ОбновитьВидимостьЭлементов();
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	Оповестить("ПродолжитьВыгрузку", Истина);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПутьКДиректорииНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	//#Если ВебКлиент Тогда 
	//  Предупреждение("Выбор файла не поддерживается в WEB клиентах!");
	//  Возврат;
	//#КонецЕсли
	
	ПутьКДиректории = ЗапроситьПутьДиректории();
	P4_ЛокальнаяДиректория = ПутьКДиректории;
КонецПроцедуры

&НаКлиенте
Процедура P4_ПутьКИсполняемомуФайлуНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ПутьКФайлу = ПолучитьИсполняемыйФайл("Выберите файл p4.exe", P4_ПутьКИсполняемомуФайлу);
	Если ЗначениеЗаполнено(ПутьКФайлу) Тогда
		P4_ПутьКИсполняемомуФайлу = ПутьКФайлу;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура P4_ЛокальнаяДиректорияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	P4_ЛокальнаяДиректория = ЗапроситьПутьДиректории();
КонецПроцедуры

&НаКлиенте
Процедура SVN_ПутьКИсполняемомуФайлуНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ПутьКФайлу = ПолучитьИсполняемыйФайл("Выберите файл svn.exe", SVN_ПутьКИсполняемомуФайлу);
	Если ЗначениеЗаполнено(ПутьКФайлу) Тогда
		SVN_ПутьКИсполняемомуФайлу = ПутьКФайлу;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПредварительноСинхронизироватьПриИзменении(Элемент)
	ОбновитьВидимостьЭлементов();
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаПриИзменении(Элемент)
	ОбновитьВидимостьЭлементов();
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервереБезКонтекста
Функция WSСсылкаСуществует(Имя)
	Возврат Метаданные.WSСсылки.Найти(Имя) <> Неопределено;	
КонецФункции

&НаКлиенте
Процедура ПроверкаНастроекШаблонов(Команда)
	
	ЛогЗагрузки.ПолучитьЭлементы().Очистить();
	ТестированиеШаблонов();
	
	РазвернутьДерево(ЛогЗагрузки.ПолучитьЭлементы());
	Прогресс = 0; // сбрасываем 
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьЗаписьЛога(ИмяФайла, Картинка, Текст, ДанныеОбъекта = Неопределено)
	Перем ДанныеОбъектов;
	
	КореньЛога = РеквизитФормыВЗначение("ЛогЗагрузки");
	
	Если ОбщегоНазначения.ЭтоСсылка(ТипЗнч(ДанныеОбъекта)) Тогда
		ТипОбъекта = ТипЗнч(ДанныеОбъекта);
		GuidОбъекта = ДанныеОбъекта.УникальныйИдентификатор();
		ДанныеОбъектов = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Новый Структура("Тип,GUID", ТипОбъекта, GuidОбъекта));
	ИначеЕсли ТипЗнч(ДанныеОбъекта) = Тип("Структура") Тогда
		ДанныеОбъектов = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДанныеОбъекта);
	ИначеЕсли ТипЗнч(ДанныеОбъекта) = Тип("Массив") Тогда
		ДанныеОбъектов = Новый Массив();
		Для Каждого Стр Из ДанныеОбъекта Цикл
			ТипОбъекта = ТипЗнч(Стр);
			GuidОбъекта = Стр.УникальныйИдентификатор();
	    ДанныеОбъектов.Добавить(Новый Структура("Тип,GUID", ТипОбъекта, GuidОбъекта));
		КонецЦикла;
	ИначеЕсли ДанныеОбъекта <> Неопределено Тогда
		ВызватьИсключение "Не верный тип параметра";
	КонецЕсли;
	
	УзлыЛога = КореньЛога.Строки.НайтиСтроки(Новый Структура("ИмяФайла", ИмяФайла));
	Если УзлыЛога.Количество() = 0 Тогда
		УзелЛога = КореньЛога.Строки.Добавить();
		УзелЛога.ИмяФайла = ИмяФайла;
		СтрЛога = УзелЛога.Строки.Добавить();
	Иначе
		СтрЛога = УзлыЛога[0].Строки.Добавить();
	КонецЕсли;
	
	СтрЛога.Картинка = Картинка;
	СтрЛога.Текст = Текст;                   
	СтрЛога.ДанныеОбъектов = ЗначениеВСтрокуВнутр(ДанныеОбъектов);
	
	ЗначениеВРеквизитФормы(КореньЛога, "ЛогЗагрузки");
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьМакетНаВозможныеОшибки(Знач ТекстМакета, ИмяФайла)
	
	Если БезПроверки Тогда
		Возврат;  
	КонецЕсли;
	
	
	// Нужно удалить комментарии из текста
	// Не нужно удалять комментарии из-за этого "плывут" номера строк в логе, не понятно точно на какую строку ругань.
	// БФТ_ДесериализаторСервер.УдалитьКомментарииИзXML(ТекстМакета);
	
	
	#Область ПроверкаСуществованияWSСсылки
	КлючевойТег = "<WS_NAME>";
	ПозицияТега = СтрНайти(ТекстМакета, КлючевойТег);
	Если ПозицияТега > 0 Тогда
		НачПозиция = ПозицияТега + СтрДлина(КлючевойТег);
		Имя = Сред(ТекстМакета, НачПозиция, СтрНайти(ТекстМакета, "<",, НачПозиция) - НачПозиция);	
		Если ЗначениеЗаполнено(Имя) И Не WSСсылкаСуществует(Имя) Тогда
			ДобавитьЗаписьЛога(ИмяФайла, 2, СтрШаблон("WS ссылка ""%1"" отсутствует в конфигурации", Имя));	
		КонецЕсли;
	КонецЕсли;
	#КонецОбласти
	
	
	ЧислоСтрок = СтрЧислоСтрок(ТекстМакета);
	Индекс = 1;
	ЭтоОткрытыйТег_НужноПроверитьXMLNS = Ложь;
	Пока ЧислоСтрок > Индекс Цикл
		ОчереднаяСтрока = СтрПолучитьСтроку(ТекстМакета, Индекс);
		
		// Не проверяем закомментированные строки 
		Если СтрокаЗакомментирована(ТекстМакета, Индекс) Тогда
			Индекс = Индекс + 1;
			Продолжить;
		КонецЕсли;
		
		// ---------------------------------------------------------------
		#region проверим_на_переносы_xmlns
		
		Если ПроверкаПереносаСтрокиПространстваИмен Тогда
			// если разное количество то тег в этой строке не закрылся
			КоличествоЛевых = СтрЧислоВхождений(ОчереднаяСтрока, "<");
			КоличествоПравых = СтрЧислоВхождений(ОчереднаяСтрока, ">");
			
			Если ЭтоОткрытыйТег_НужноПроверитьXMLNS Тогда
				// если тег на предыдущей строке был открыт то ищем xmlns на следующих
				Если СтрЧислоВхождений(ВРег(ОчереднаяСтрока), "XMLNS") > 0 Тогда
					// если нашли то косяк
					ДобавитьЗаписьЛога(ИмяФайла,2,"Примерно в строке "+Индекс
					+" есть перенос атрибута XMLNS. 1С не работает если перечень этих атрибутов начинается с новой строки.");
					ЭтоОткрытыйТег_НужноПроверитьXMLNS = Ложь;
				КонецЕсли;
				Если КоличествоПравых <> 0 Тогда
					// если не нашли, то все ок
					ЭтоОткрытыйТег_НужноПроверитьXMLNS = Ложь;
				КонецЕсли;
			Иначе
				Если КоличествоЛевых > КоличествоПравых Тогда
					// если открывается тег и не закрывается, то получаем крайний
					РазделеннаяСтрока = СтрЗаменить(ОчереднаяСтрока, "<", Символы.ПС);
					НезакрытыйТег = СтрПолучитьСтроку(РазделеннаяСтрока, СтрЧислоСтрок(РазделеннаяСтрока));
					ЭтоОткрытыйТег_НужноПроверитьXMLNS = СтрЧислоВхождений(ВРег(НезакрытыйТег), "XMLNS") = 0
					и СтрЧислоВхождений(ВРег(НезакрытыйТег), ВРег("xsl:template")) = 0
					и СтрЧислоВхождений(ВРег(НезакрытыйТег), ВРег("xsl:stylesheet")) = 0;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		#endregion
		
		
		// ---------------------------------------------------------------
		// кодировку не проверяем, т.к. автоматика теперь должна его прочитать корректно
		
		// ---------------------------------------------------------------
		#region проверим_на_определение_параметров_в_макете
		
		Если ПроверкаНаОпределениеПараметровВМакете И СтрЧислоВхождений(ВРег(ОчереднаяСтрока), ВРег("<xsl:variable")) > 0 Тогда
			МассивИменПараметров = Новый Массив;
			МассивИменПараметров.Добавить("MASTER_ID");
			МассивИменПараметров.Добавить("CLIENT_ID");
			МассивИменПараметров.Добавить("ws_azk_url");
			МассивИменПараметров.Добавить("ws_azk_user");
			МассивИменПараметров.Добавить("ws_azk_pass");
			МассивИменПараметров.Добавить("ws_gz_url");
			МассивИменПараметров.Добавить("ws_gz_user");
			МассивИменПараметров.Добавить("ws_gz_pass");
			МассивИменПараметров.Добавить("ws_bu_url");
			МассивИменПараметров.Добавить("ws_bu_user");
			МассивИменПараметров.Добавить("ws_bu_pass");
			МассивИменПараметров.Добавить("CurrentDate");
			
			Для Каждого СтрМасс Из МассивИменПараметров Цикл
				Если СтрЧислоВхождений(ВРег(ОчереднаяСтрока), ВРег(СтрМасс)) > 0
					и СтрЧислоВхождений(ВРег(ОчереднаяСтрока), ВРег("$"+СтрМасс)) = 0 Тогда
					ДобавитьЗаписьЛога(ИмяФайла,2,"В строке "+Индекс+" есть тег <xls:variable> с именем одного из заполняемых параметров. По идее их не должно быть.");
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		#endregion
		
		#region проверим_include
		
		Если ПроверкаДиректив_include И (СтрЧислоВхождений(ВРег(ОчереднаяСтрока), ВРег("<xsl:include")) > 0 ИЛИ СтрЧислоВхождений(ВРег(ОчереднаяСтрока), ВРег("<xsl:import")) > 0) Тогда
			Если СтрЧислоВхождений(ОчереднаяСтрока, "/") > 1 или СтрЧислоВхождений(ОчереднаяСтрока, "\") > 0 Тогда
				ДобавитьЗаписьЛога(ИмяФайла,2,"В строке "+Индекс+" есть тег <xls:include> (или <xls:import>) с указанием пути к файлу. Должны быть только имя вкладываемого файла.");
			КонецЕсли;
		КонецЕсли;
		
		#endregion
		
		#region Проверяем_CDATA
		// CDATA в шаблоне должна указываться как &lt;![CDATA[, а не <![CDATA[
		Если ПроверкаCDATA И СтрЧислоВхождений(ВРег(ОчереднаяСтрока), ВРег("<![CDATA[")) > 0 Тогда
			ДобавитьЗаписьЛога(ИмяФайла, 2, СтрШаблон("В строке ""%1"" указан блок CDATA в виде ""<![CDATA["", должен быть ""&lt;![CDATA[""", Индекс));
		КонецЕсли;
		#endregion
		
		
		Индекс = Индекс + 1;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция СтрокаЗакомментирована(ТекстМакета, Знач Индекс, РекурсивныйВызов = Ложь)
	// Если не одна из опций проверки (которая требует разбор текста шаблона) не установлена
	// Значит выходим.
	Если Не НужноПроверятьСодержимоеШаблона() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Индекс <= 0 Тогда
		Возврат Ложь;  
	КонецЕсли;
	
	ОчереднаяСтрока = СтрПолучитьСтроку(ТекстМакета, Индекс);
	СтрокаСокр = СокрЛП(ОчереднаяСтрока);
	
	Если РекурсивныйВызов И СтрЗаканчиваетсяНа(СтрокаСокр, "-->") Тогда
		Возврат Ложь;  
	КонецЕсли;
	
	// Если строка такая <!-- Комментарий -->
	// Или такая <!-- Комментарий.
	Если (СтрНачинаетсяС(СтрокаСокр, "<!--") И Не РекурсивныйВызов) 
		ИЛИ (СтрНачинаетсяС(СтрокаСокр, "<!--") И Не СтрЗаканчиваетсяНа(СтрокаСокр, "-->") И РекурсивныйВызов) Тогда
		Возврат Истина;  
	Иначе
		Возврат СтрокаЗакомментирована(ТекстМакета, Индекс-1, Истина);
	КонецЕсли;
КонецФункции

&НаКлиенте
Функция НужноПроверятьСодержимоеШаблона()
	Возврат ПроверкаПереносаСтрокиПространстваИмен 
	ИЛИ ПроверкаДиректив_include
	ИЛИ ПроверкаНаОпределениеПараметровВМакете;  
КонецФункции

&НаКлиенте
Функция КорректнаяКодировка(ТекстМакета, ВозможнаяКодировка)
	// проверим наличие UTF-8 в CP-1252
	ЧислоСтрок = СтрЧислоСтрок(ТекстМакета);
	Индекс = 1;
	МаксПроцентСимволовРС = 0;
	Пока ЧислоСтрок > Индекс Цикл
		ОчереднаяСтрока = СтрПолучитьСтроку(ТекстМакета, Индекс);
		Индекс = Индекс + 1;
		
		ДлиннаСтроки = СтрДлина(СокрЛП(ОчереднаяСтрока));
		Если ДлиннаСтроки = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ЧислоСимволовРС = СтрЧислоСтрок(СтрЗаменить(ОчереднаяСтрока, "Р", Символы.ПС)) + СтрЧислоСтрок(СтрЗаменить(ОчереднаяСтрока, "С", Символы.ПС));
		ПроцентСимволовРС = ЧислоСимволовРС*100/ДлиннаСтроки;
		
		Если ЧислоСимволовРС > 10 Тогда
			Если ПроцентСимволовРС > 40 Тогда
				ВозможнаяКодировка = КодировкаТекста.UTF8;
				Возврат Ложь;
			КонецЕсли;
			Если ПроцентСимволовРС > МаксПроцентСимволовРС Тогда
				МаксПроцентСимволовРС = ПроцентСимволовРС;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Функция ПрочитатьТекстФайла(ИмяФайла, Расширение="")
	
	Содержимое = Новый ЧтениеТекста(ИмяФайла);
	ТекстФайла = Содержимое.Прочитать();
	
	ВозможнаяКодировка = Неопределено;
	Если ПроверкаКодировкиФайла И Не КорректнаяКодировка(ТекстФайла, ВозможнаяКодировка) Тогда
		ДобавитьЗаписьЛога(ИмяФайла,1,"Используется некорректная кодировка. Пересохраните шаблон, возможно в кодировку "+ВозможнаяКодировка);
		Содержимое = Новый ЧтениеТекста(ИмяФайла, ВозможнаяКодировка);
		ТекстФайла = Содержимое.Прочитать();
	КонецЕсли;
	
	// теперь проверки
	Если НРег(Расширение) <> "xsd" И НРег(Расширение) <> ".xsd" Тогда
		ПроверитьМакетНаВозможныеОшибки(ТекстФайла, ИмяФайла);
	КонецЕсли;
	
	Возврат ТекстФайла;
	
КонецФункции

&НаКлиенте
Процедура РазвернутьДерево(Коллекция) 
	// разворачиваем узлы с ошибками или предупреждением
	
	Для Каждого ЭлементКоллекции Из Коллекция Цикл
		НужноРазворачивать = Ложь;
		Для Каждого ВложенныйЭлементКоллекции Из ЭлементКоллекции.ПолучитьЭлементы() Цикл
			НужноРазворачивать = ВложенныйЭлементКоллекции.Картинка > 0; // 0 - это информация  
			Если НужноРазворачивать Тогда
				Прервать;        
			КонецЕсли;
		КонецЦикла;
		
		Если НужноРазворачивать Тогда
			Элементы.ЛогЗагрузки.Развернуть(ЭлементКоллекции.ПолучитьИдентификатор(), Истина);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда)
	Перем Содержимое;
	
	Если не ЗначениеЗаполнено(ПутьКДиректории) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Заполните поле ""Директория""");
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(НастройкаПодключенияКРепозиторию) Тогда
		ПараметрыКоманды = Новый Структура();
		ПараметрыКоманды.Вставить("Пароль", БФТ_ОбщиеМетодыАРМаСборокНаКлиентеНаСервере.ПарольДоступаК_SVN());
		БФТ_ОбщиеМетодыАРМаСборокНаКлиентеНаСервере.ВыполнитьМетод(НастройкаПодключенияКРепозиторию, "update", ПараметрыКоманды);  
	КонецЕсли;
	
	Состояние("Загружаем файлы с диска");
	ЗагрузитьФайлыСДиска();
	
	РазвернутьДерево(ЛогЗагрузки.ПолучитьЭлементы());
	Прогресс = 0; // сбрасываем 
	
	//Если ЗакрытьПослеОбновления Тогда
	//  Закрыть();
	//КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьФайлыСДиска()
	Перем Коды, Расширения,СодержимоеФайлов;
	
	ЛогЗагрузки.ПолучитьЭлементы().Очистить();
	
	Если Не ЗначениеЗаполнено(ПутьКДиректории) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не заполнен путь к директории с шаблонами");
		Возврат;
	КонецЕсли;
	
	Каталог = Новый Файл(ПутьКДиректории);
	Если Не Каталог.Существует() Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрШаблон("Директория ""%1"" не существует", ПутьКДиректории));
		Возврат;
	КонецЕсли;
	
	Расширения = Новый Массив();
	Расширения.Добавить(".XSL");
	Расширения.Добавить(".XSLT");
	Расширения.Добавить(".XSD");
	
	СодержимоеФайлов = Новый Соответствие();
	Коды = Новый Массив();
	Файлы = НайтиФайлы(ПутьКДиректории, "*.*", Истина);
	
	//ШаблоныСнятыеСПоддержки = ПолучитьШаблоныСнятыеСПоддержки();
	
	Если ЭтаФорма.ПроверкаНастроекШаблонов Тогда
		ТестированиеШаблонов();
	КонецЕсли;
	
	ТекПрогресс = 0;
	КодыШаблоновСнятыхСПоддержки = Новый Массив();
	Для Каждого Файл Из Файлы Цикл
		ТекПрогресс = ТекПрогресс + 1;
		Прогресс = ТекПрогресс / Файлы.Количество() * 100; 
		ЭтаФорма.ОбновитьОтображениеДанных(Элементы.Прогресс);
		
		Если Расширения.Найти(ВРег(Файл.Расширение)) = Неопределено Тогда
			Продолжить;  
		КонецЕсли;
		
		ЧастиИмени = СтрРазделить(Файл.ИмяБезРасширения, "_");
		Если ЧастиИмени.Количество() > 0 И СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ЧастиИмени[0]) Тогда
			Префикс = ЧастиИмени[0];
			// проверяем дубли
			Если СодержимоеФайлов[Префикс] <> Неопределено Тогда
				ДобавитьЗаписьЛога("",2,"Существует несколько файлов с префиксом """+Префикс+"""");
			КонецЕсли;
			
			ТекстФайла = ПрочитатьТекстФайла(Файл.ПолноеИмя, Файл.Расширение);
			
			СодержимоеФайлов.Вставить(Префикс, ТекстФайла);
			Коды.Добавить(Префикс);
		Иначе
			ДобавитьЗаписьЛога(Файл.ПолноеИмя,0,"У файла нет числового префикса");
		КонецЕсли;
	КонецЦикла;
	
	//ВернутьШаблоныНаПоддержку(КодыШаблоновСнятыхСПоддержки);
	Состояние("Производится обновление данных БД");
	БФТ_ОбщиеМетодыАРМаСборокНаСервере.ОбновитьНаСервереТекстыШаблонов(Коды, СодержимоеФайлов, ЗначениеЗаполнено(НастройкаПодключенияКРепозиторию));
КонецПроцедуры

&НаКлиенте
Функция ЗапроситьПутьДиректории()
	Диалог                    = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	Диалог.Заголовок          = "Выберите Директорию";
	Диалог.ПолноеИмяФайла     = "";   
	Диалог.МножественныйВыбор = Ложь;
	Если Диалог.Выбрать() Тогда
		Возврат Диалог.Каталог;
	КонецЕсли;  
	
	Возврат Неопределено;
КонецФункции

&НаКлиенте                
Процедура ОткрытьФайл(Команда)
	ИмяФайла = Элементы.ЛогЗагрузки.ТекущиеДанные.ИмяФайла;
	Если ЗначениеЗаполнено(ИмяФайла) Тогда
		ЗапуститьПриложение(ИмяФайла);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьВидимостьЭлементов()
	Элементы.Декорация1.Видимость = НужноПроверятьСодержимоеШаблона();
	//Элементы.НастройкиPerforce.Видимость = ПредварительноСинхронизировать = 1;
	//Элементы.НастройкиSVN.Видимость = ПредварительноСинхронизировать = 2;
КонецПроцедуры

&НаКлиенте
Функция ПолучитьИсполняемыйФайл(Заголовок, ВыбранныйПуть)
	#Если Не ВебКлиент Тогда
		Каталог = КаталогПрограммы();
		Если ЗначениеЗаполнено(ВыбранныйПуть) Тогда
			Файл = Новый Файл(ВыбранныйПуть);  
			Каталог = Файл.Путь;
		КонецЕсли;
		
		Диалог                    = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
		Диалог.Заголовок          = Заголовок;
		Диалог.Фильтр     = "*.exe|*.exe";   
		Диалог.МножественныйВыбор = Ложь;
		Диалог.Каталог = Каталог; 
		
		Если Диалог.Выбрать() Тогда
			Возврат Диалог.ПолноеИмяФайла;
		КонецЕсли;
		
	#Иначе
		ВызватьИсключение "В веб клиенте текущее действие не поддерживается";
	#КонецЕсли
КонецФункции

#region ПроверкаНастроек

// Проверки
// 1. Установлены галки расширение реквизитов и ссылочных типов:
// 1.1 Расширение реквизитов;
// 1.2 Расширение ссылочных типов;
// 1.3 Расширения ссылочных типов: заданы реквизиты, но не стоит галка расширять.

// 2. В шаблонах используется одни и те же настройки расширения:
// 2.1 Настройки расширения ссылочных типов: совпадают;
// 2.2 Настройки расширения реквизитов: совпадают;
// 2.3 Настройки расширения ссылочных типов: не включены во второе правило;
// 2.4 Настройки расширения реквизитов: не включены во второе правило.

// 3. Расширения и реквизиты объектов
// 3.1 Расширения реквизитов созданы для существующих реквизитов;
// 3.2 Расширения ссылочных типов созданы для существующих реквизитов.

// 4. Статусная модель
// 4.1 Существование фиктивного перехода при создании дочернего документа;
// 4.2 Существование в фиктивных переходах правил исключений на создание движений.

// 5. Проверки Any
// 5.1 Отсутствует одинаковая очередность для неопределенных правил;
// 5.2 Отсутствует одинаковая очередность для определенных правил.

// 6. Проверка использования не существующего поля результата в таблицах соответствия
// 6.1 Проверка существования функций в модулях.

&НаСервере
Процедура ТестированиеШаблонов()
	
	НеразделенныйСеанс = Не ОбщегоНазначения.ИспользованиеРазделителяСеанса();
	Если НеразделенныйСеанс Тогда
		
		Если ЗначениеЗаполнено(ЭтаФорма.ОбластьДанных) Тогда
			БФТ_СерверОбластиДанных.СменитьОбластьДанных(ЭтаФорма.ОбластьДанных);
		Иначе
			Области = БФТ_СерверОбластиДанных.ДоступныеОбласти();
			Если Области.Количество() > 0 Тогда
				БФТ_СерверОбластиДанных.СменитьОбластьДанных(Области[0]);
				ОбластьДанных = Области[0];
			Иначе
				ДобавитьЗаписьЛога("Проверка настроек шаблонов", 2, "Проверка статусной модели не будет производиться, т.к. не найдено ни одной рабочей области данных");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// Раздел 1
	ПроверкиВключенностиРасширения();
	
	// Раздел 2
	СравнитьНастройкиРасширенияДляШаблонов();
	
	// Раздел 3
	РасширенияИРеквизитыОбъектов();
	
	// Раздел 4
	Если ОбщегоНазначения.ИспользованиеРазделителяСеанса() Тогда
		ПроверкаСтатуснойМодели();
	КонецЕсли;
	
	// Раздел 5
	ПроверкаОчередностиAny();
	ПроверкаОчередностиОпределенныхПравил();
	
	// Раздел 6
	ПроверитьОшибкиВТаблицеСоответствияРасширенияРеквизитов();
	ПроверитьСуществованиеФункций();
	
	Если НеразделенныйСеанс Тогда
		БФТ_СерверОбластиДанных.ВыйтиИзОбластиДанных();
	КонецЕсли;
	
КонецПроцедуры

#region Общие_Функции

&НаСервере
Процедура ВывестиОшибку(Раздел, ТекстОшибки, ДанныеОбъекта = Неопределено)
	
	ДобавитьЗаписьЛога("Проверка настроек шаблонов", 2, Раздел + ": " + ТекстОшибки, ДанныеОбъекта);
	
КонецПроцедуры

&НаСервере
Функция ЕстьИсключения(ТипПроверки, ОбъектСсылка)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	БФТ_ТестированиеШаблоновИсключения.ТипПроверки,
	|	БФТ_ТестированиеШаблоновИсключения.GuidОбъекта,
	|	БФТ_ТестированиеШаблоновИсключения.Комментарий
	|ИЗ
	|	РегистрСведений.БФТ_ТестированиеШаблоновИсключения КАК БФТ_ТестированиеШаблоновИсключения
	|ГДЕ
	|	БФТ_ТестированиеШаблоновИсключения.ТипПроверки = &ТипПроверки
	|	И БФТ_ТестированиеШаблоновИсключения.GuidОбъекта = &GuidОбъекта";
	
	Если ОбщегоНазначения.ЭтоСсылка(ТипЗнч(ОбъектСсылка)) Тогда
		GuidОбъекта = ОбъектСсылка.УникальныйИдентификатор();
	ИначеЕсли ТипЗнч(ОбъектСсылка) = Тип("УникальныйИдентификатор") Тогда
		GuidОбъекта = ОбъектСсылка;
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ТипПроверки", ТипПроверки);
	Запрос.УстановитьПараметр("GuidОбъекта", GuidОбъекта);	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат Не РезультатЗапроса.Пустой();
КонецФункции

#endregion


// Установлены галки расширение реквизитов и ссылочных типов
#region Проверки_Раздел_1

&НаСервере
Процедура ПроверкиВключенностиРасширения()
	
	ПравилаПреобразования = Новый Соответствие();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	БФТ_ПравилаПреобразования.ГлавныйКлюч,
	|	БФТ_ПравилаПреобразования.ДополнительныйКлюч,
	|	БФТ_ПравилаПреобразования.СпрПравилоПреобразования,
	|	БФТ_ПравилаПреобразования.Очередность,
	|	БФТ_ПравилаПреобразования.ПравилоXSD,
	|	БФТ_ПравилаПреобразования.ПравилоПервичногоПреобразованияXSLT,
	|	БФТ_ПравилаПреобразования.ПравилоБазовогоПреобразованияXSLT,
	|	БФТ_ПравилаПреобразования.ПравилоОтветаИнициатору,
	|	БФТ_ПравилаПреобразования.Комментарий,
	|	БФТ_ПравилаПреобразования.ПолучатьНатуральныеЗначенияОбъекта,
	|	БФТ_ПравилаПреобразования.РасширитьСсылочныеТипы,
	|	БФТ_ПравилаПреобразования.НастройкаРасширенияСсылок,
	|	БФТ_ПравилаПреобразования.ПеречитатьОбъектИзБД,
	|	БФТ_ПравилаПреобразования.Использовать,
	|	БФТ_ПравилаПреобразования.БФТ_ИмяПользователяБД
	|ИЗ
	|	РегистрСведений.БФТ_ПравилаПреобразования КАК БФТ_ПравилаПреобразования";
	
	РезультатЗапроса = Запрос.Выполнить();
	ВДЗ = РезультатЗапроса.Выбрать();
	Пока ВДЗ.Следующий() Цикл
		
		Если ВДЗ.ПолучатьНатуральныеЗначенияОбъекта = Ложь И ЕстьСвязанныеНастройкиРасширенияРеквизитов(ВДЗ.СпрПравилоПреобразования) Тогда
			
			Если ЕстьИсключения("1.1", ВДЗ.СпрПравилоПреобразования) Тогда
				Продолжить;
			КонецЕсли;
			
			ВывестиОшибку("1.1", Строка(ВДЗ.СпрПравилоПреобразования) + ": Есть настройки расширения реквизитов, но не установлен признак ""Расширять атрибутами"".", ВДЗ.СпрПравилоПреобразования);
		КонецЕсли;
		
		Если ВДЗ.РасширитьСсылочныеТипы = Ложь И ЭтоРасширениеСсылокПоУмолчанию(ВДЗ.НастройкаРасширенияСсылок) = Ложь Тогда
			
			Если ЕстьИсключения("1.2", ВДЗ.СпрПравилоПреобразования) Тогда
				Продолжить;
			КонецЕсли;
			
			ВывестиОшибку("1.2", Строка(ВДЗ.СпрПравилоПреобразования) + ": Есть настройка расширения ссылочных типов, но не установлен признак ""Расширять ссылочные типы"".", ВДЗ.СпрПравилоПреобразования);
		КонецЕсли;
		
		Если ВДЗ.РасширитьСсылочныеТипы Тогда
			УстановленаГалка_РасширенияСсылок(ВДЗ);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ЭтоРасширениеСсылокПоУмолчанию(НастройкаРасширенияСсылок)
	
	Если НастройкаРасширенияСсылок = "" Тогда
		Возврат Истина;
	КонецЕсли;
	
	Дерево = ЗначениеИзСтрокиВнутр(НастройкаРасширенияСсылок);
	
	Если Дерево.Строки.Количество() <> 2 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Для Каждого стр Из Дерево.Строки Цикл
		Если стр.Расширять = Ложь ИЛИ (Дерево.Колонки.Найти("СписокРеквизитов") <> Неопределено И стр.СписокРеквизитов <> "") ИЛИ стр.Строки.Количество() > 0 Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция ЕстьСвязанныеНастройкиРасширенияРеквизитов(СпрПравилоПреобразования)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	БФТ_СвязьПравилаПреобразованияИРасширенияРеквизитов.ИдентификаторТаблицСоответствияРасширенияРеквизитов
	|ИЗ
	|	РегистрСведений.БФТ_СвязьПравилаПреобразованияИРасширенияРеквизитов КАК БФТ_СвязьПравилаПреобразованияИРасширенияРеквизитов
	|ГДЕ
	|	БФТ_СвязьПравилаПреобразованияИРасширенияРеквизитов.ПравилоПреобразования = &ПравилоПреобразования";
	Запрос.УстановитьПараметр("ПравилоПреобразования", СпрПравилоПреобразования);
	РезультатЗапроса = Запрос.Выполнить();
	
	ВДЗ = РезультатЗапроса.Выбрать();
	Возврат (ВДЗ.Количество() > 0);
	
КонецФункции

&НаСервере
Функция УстановленаГалка_РасширенияСсылок(ВДЗ)
	
	Если ВДЗ.НастройкаРасширенияСсылок = "" Тогда
		Возврат Истина;
	КонецЕсли;
	
	Дерево1 = ЗначениеИзСтрокиВнутр(ВДЗ.НастройкаРасширенияСсылок);
	
	УстановленаГалка_РасширенияСсылок_Рекурсия(ВДЗ, Дерево1.Строки);
	
КонецФункции

&НаСервере
Процедура УстановленаГалка_РасширенияСсылок_Рекурсия(ВДЗ, Дерево1Строки)
	Раздел = "1.3";
	
	Для Каждого стр Из Дерево1Строки Цикл
		
		УстановленаГалка_РасширенияСсылок_Рекурсия(ВДЗ, стр.Строки);		
		Если стр.СписокРеквизитов <> "" И стр.Расширять = Ложь Тогда
			ВывестиОшибку(Раздел, СтрШаблон("В правиле ""%1"" заполнен список реквизитов ""%2"", но не установлена галка расширять.", ВДЗ.СпрПравилоПреобразования, стр.СписокРеквизитов), ВДЗ.СпрПравилоПреобразования);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры



#endregion

// В шаблонах используется одни и те же настройки расширения
#region Проверки_Раздел_2

&НаСервере
Процедура СравнитьНастройкиРасширенияДляШаблонов()
	
	// Отбираем шаблоны, которые используются в нескольких правилах
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	БФТ_ПравилаПреобразования.ПравилоПервичногоПреобразованияXSLT КАК ПравилоXSLT
	|ИЗ
	|	РегистрСведений.БФТ_ПравилаПреобразования КАК БФТ_ПравилаПреобразования
	|ГДЕ
	|	НЕ БФТ_ПравилаПреобразования.ПравилоПервичногоПреобразованияXSLT = ЗНАЧЕНИЕ(Справочник.БФТ_ШаблоныПреобразования.ПустаяСсылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	БФТ_ПравилаПреобразования.ПравилоПервичногоПреобразованияXSLT
	|
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(*) > 1
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	БФТ_ПравилаПреобразования.ПравилоБазовогоПреобразованияXSLT
	|ИЗ
	|	РегистрСведений.БФТ_ПравилаПреобразования КАК БФТ_ПравилаПреобразования
	|ГДЕ
	|	НЕ БФТ_ПравилаПреобразования.ПравилоБазовогоПреобразованияXSLT = ЗНАЧЕНИЕ(Справочник.БФТ_ШаблоныПреобразования.ПустаяСсылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	БФТ_ПравилаПреобразования.ПравилоБазовогоПреобразованияXSLT
	|
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(*) > 1";
	
	#region Проверки_2_1
	Раздел = "2.1";
	РезультатЗапроса = Запрос.Выполнить();
	ВДЗ = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВДЗ.Следующий() Цикл
		ПравилаСОднимШаблоном = ПравилаСОднимШаблоном(ВДЗ.ПравилоXSLT);
		ПравилаСДвумяШаблонами = ПравилаСДвумяШаблонами(ВДЗ.ПравилоXSLT);
		
		Проверка_2_1(ПравилаСОднимШаблоном, ВДЗ.ПравилоXSLT, Раздел);
		Проверка_2_1(ПравилаСДвумяШаблонами, ВДЗ.ПравилоXSLT, Раздел);
	КонецЦикла;
	#endregion
	
	#region Проверки_2_2
	Раздел = "2.2";
	ВДЗ.Сбросить();
	Пока ВДЗ.Следующий() Цикл
		ПравилаСОднимШаблоном = ПравилаСОднимШаблоном(ВДЗ.ПравилоXSLT);
		
		Если ПравилаСОднимШаблоном.Количество() > 0 Тогда
			
			// Квадратная матрица, в ней надо сравнить каждый с каждым, поэтому обходим "половину матрицы".
			НачинатьСНомера = 1;
			Для Каждого правило1 Из ПравилаСОднимШаблоном Цикл
				НачинатьСНомера = НачинатьСНомера + 1;
				
				Если ЕстьИсключения(Раздел, правило1.СпрПравилоПреобразования) Тогда
					Продолжить;
				КонецЕсли;
				
				текНомер = 0;
				Для Каждого правило2 Из ПравилаСОднимШаблоном Цикл
					текНомер = текНомер + 1;
					
					Если текНомер < НачинатьСНомера ИЛИ ЕстьИсключения(Раздел, правило2.СпрПравилоПреобразования) Тогда
						Продолжить;
					КонецЕсли;
					
					Если НЕ НастройкиРасширенияРеквизитовСовпадают(правило1.СпрПравилоПреобразования, правило2.СпрПравилоПреобразования) Тогда
						Ссылки = Новый Массив();
						Ссылки.Добавить(правило1.СпрПравилоПреобразования);
						Ссылки.Добавить(правило2.СпрПравилоПреобразования);
						
						ВывестиОшибку(Раздел, "Не совпадают настройки реквизитов для правил преобразования с одинаковым шаблоном """ + Строка(ВДЗ.ПравилоXSLT) + """: " + Символы.ПС
						+	"1) " + Строка(правило1.СпрПравилоПреобразования) + Символы.ПС
						+	"2) " + Строка(правило2.СпрПравилоПреобразования), Ссылки);
						Прервать;
					КонецЕсли;
					
				КонецЦикла;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	#endregion
	
	#region Проверки_2_3
	Раздел = "2.3";
	ВДЗ.Сбросить();
	Пока ВДЗ.Следующий() Цикл
		ПравилаСОднимШаблоном = ПравилаСОднимШаблоном(ВДЗ.ПравилоXSLT);
		ПравилаСДвумяШаблонами = ПравилаСДвумяШаблонами(ВДЗ.ПравилоXSLT);
		
		Если ПравилаСОднимШаблоном.Количество() > 0 Тогда
			
			// Квадратная матрица, в ней надо сравнить каждый с каждым, поэтому обходим "половину матрицы".
			НачинатьСНомера = 1;
			Для Каждого правило1 Из ПравилаСОднимШаблоном Цикл
				НачинатьСНомера = НачинатьСНомера + 1;
				
				Если ЕстьИсключения(Раздел, правило1.СпрПравилоПреобразования) Тогда
					Продолжить;
				КонецЕсли;
				
				текНомер = 0;
				Для Каждого правило2 Из ПравилаСДвумяШаблонами Цикл
					текНомер = текНомер + 1;
					
					Если текНомер < НачинатьСНомера Тогда
						Продолжить;
					КонецЕсли;
					
					Если ЕстьИсключения(Раздел, правило2.СпрПравилоПреобразования) Тогда
						Продолжить;
					КонецЕсли;
					
					Если НЕ НастройкиРасширенияСсылок(правило1.НастройкаРасширенияСсылок, правило2.НастройкаРасширенияСсылок) Тогда
						Ссылки = Новый Массив();
						Ссылки.Добавить(правило1.СпрПравилоПреобразования);
						Ссылки.Добавить(правило2.СпрПравилоПреобразования);

						ВывестиОшибку(Раздел, "Настройки расширения ссылочных типов: не включены во второе правило для правил преобразования с одинаковым шаблоном """ + Строка(ВДЗ.ПравилоXSLT) + """: " + Символы.ПС
						+	"1) " + Строка(правило1.СпрПравилоПреобразования) + Символы.ПС
						+	"2) " + Строка(правило2.СпрПравилоПреобразования), Ссылки);
						Прервать;
					КонецЕсли;
					
				КонецЦикла;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	#endregion
	
	#region Проверки_2_4
	Раздел = "2.4";
	РезультатЗапроса = Запрос.Выполнить();
	ВДЗ = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВДЗ.Следующий() Цикл
		ПравилаСОднимШаблоном = ПравилаСОднимШаблоном(ВДЗ.ПравилоXSLT);
		ПравилаСДвумяШаблонами = ПравилаСДвумяШаблонами(ВДЗ.ПравилоXSLT);
		
		Если ПравилаСОднимШаблоном.Количество() > 0 Тогда
			
			// Квадратная матрица, в ней надо сравнить каждый с каждым, поэтому обходим "половину матрицы".
			НачинатьСНомера = 1;
			Для Каждого правило1 Из ПравилаСОднимШаблоном Цикл
				НачинатьСНомера = НачинатьСНомера + 1;
				
				Если ЕстьИсключения(Раздел, правило1.СпрПравилоПреобразования) Тогда
					Продолжить;
				КонецЕсли;
				
				текНомер = 0;
				Для Каждого правило2 Из ПравилаСДвумяШаблонами Цикл
					текНомер = текНомер + 1;
					
					Если текНомер < НачинатьСНомера Тогда
						Продолжить;
					КонецЕсли;
					
					Если ЕстьИсключения(Раздел, правило2.СпрПравилоПреобразования) Тогда
						Продолжить;
					КонецЕсли;
					
					Расширения = НастройкиРасширенияРеквизитовВходят(правило1.СпрПравилоПреобразования, правило2.СпрПравилоПреобразования);
					Если Расширения.Количество() > 0 Тогда
						Ссылки = Новый Массив();
						Ссылки.Добавить(правило1.СпрПравилоПреобразования);
						Ссылки.Добавить(правило2.СпрПравилоПреобразования);

						ВывестиОшибку(Раздел, "Настройки расширения реквизитов: не включены во второе правило для правил преобразования с одинаковым шаблоном """ + Строка(ВДЗ.ПравилоXSLT) + """ ИдентификаторИмпорта = """ + Строка(Расширения[0].Идентификатор) + """: " + Символы.ПС
						+	"1) " + Строка(правило1.СпрПравилоПреобразования) + Символы.ПС
						+	"2) " + Строка(правило2.СпрПравилоПреобразования), Ссылки);
						Прервать;
					КонецЕсли;
					
				КонецЦикла;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	#endregion
	
КонецПроцедуры

Процедура Проверка_2_1(Правила, ПравилоXSLT, Раздел)
	// Квадратная матрица, в ней надо сравнить каждый с каждым, поэтому обходим "половину матрицы".
	НачинатьСНомера = 1;
	Для Каждого правило1 Из Правила Цикл
		НачинатьСНомера = НачинатьСНомера + 1;
		
		Если ЕстьИсключения(Раздел, правило1.СпрПравилоПреобразования) Тогда
			Продолжить;
		КонецЕсли;
		
		текНомер = 0;
		Для Каждого правило2 Из Правила Цикл
			текНомер = текНомер + 1;
			
			Если текНомер < НачинатьСНомера Тогда
				Продолжить;
			КонецЕсли;
			
			Если ЕстьИсключения(Раздел, правило2.СпрПравилоПреобразования) Тогда
				Продолжить;
			КонецЕсли;
			
			Если УбратьФорматирование(правило1.НастройкаРасширенияСсылок) <> УбратьФорматирование(правило2.НастройкаРасширенияСсылок) Тогда
				Ссылки = Новый Массив();
				Ссылки.Добавить(правило1.СпрПравилоПреобразования);
				Ссылки.Добавить(правило2.СпрПравилоПреобразования);
				
				ВывестиОшибку(Раздел, "Не совпадают настройки расширения ссылочных типов для правил преобразования с одинаковым шаблоном """ + Строка(ПравилоXSLT) + """: " + Символы.ПС
				+	"1) " + Строка(правило1.СпрПравилоПреобразования) + Символы.ПС
				+	"2) " + Строка(правило2.СпрПравилоПреобразования), Ссылки);
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Функция ПравилаСОднимШаблоном(ПравилоXSLT)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	БФТ_ПравилаПреобразования.ГлавныйКлюч,
	|	БФТ_ПравилаПреобразования.ДополнительныйКлюч,
	|	БФТ_ПравилаПреобразования.СпрПравилоПреобразования,
	|	БФТ_ПравилаПреобразования.Очередность,
	|	БФТ_ПравилаПреобразования.ПравилоXSD,
	|	БФТ_ПравилаПреобразования.ПравилоПервичногоПреобразованияXSLT,
	|	БФТ_ПравилаПреобразования.ПравилоБазовогоПреобразованияXSLT,
	|	БФТ_ПравилаПреобразования.ПравилоОтветаИнициатору,
	|	БФТ_ПравилаПреобразования.Комментарий,
	|	БФТ_ПравилаПреобразования.ПолучатьНатуральныеЗначенияОбъекта,
	|	БФТ_ПравилаПреобразования.РасширитьСсылочныеТипы,
	|	БФТ_ПравилаПреобразования.НастройкаРасширенияСсылок,
	|	БФТ_ПравилаПреобразования.ПеречитатьОбъектИзБД,
	|	БФТ_ПравилаПреобразования.Использовать,
	|	БФТ_ПравилаПреобразования.БФТ_ИмяПользователяБД
	|ИЗ
	|	РегистрСведений.БФТ_ПравилаПреобразования КАК БФТ_ПравилаПреобразования
	|ГДЕ
	|	(БФТ_ПравилаПреобразования.ПравилоПервичногоПреобразованияXSLT = &ПравилоXSLT
	|	ИЛИ БФТ_ПравилаПреобразования.ПравилоБазовогоПреобразованияXSLT = &ПравилоXSLT)
	|	И (БФТ_ПравилаПреобразования.ПравилоПервичногоПреобразованияXSLT = ЗНАЧЕНИЕ(Справочник.БФТ_ШаблоныПреобразования.ПустаяСсылка)
	|	ИЛИ БФТ_ПравилаПреобразования.ПравилоБазовогоПреобразованияXSLT = ЗНАЧЕНИЕ(Справочник.БФТ_ШаблоныПреобразования.ПустаяСсылка))";
	
	Запрос.УстановитьПараметр("ПравилоXSLT", ПравилоXSLT);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

&НаСервере
Функция ПравилаСДвумяШаблонами(ПравилоXSLT)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	БФТ_ПравилаПреобразования.ГлавныйКлюч,
	|	БФТ_ПравилаПреобразования.ДополнительныйКлюч,
	|	БФТ_ПравилаПреобразования.СпрПравилоПреобразования,
	|	БФТ_ПравилаПреобразования.Очередность,
	|	БФТ_ПравилаПреобразования.ПравилоXSD,
	|	БФТ_ПравилаПреобразования.ПравилоПервичногоПреобразованияXSLT,
	|	БФТ_ПравилаПреобразования.ПравилоБазовогоПреобразованияXSLT,
	|	БФТ_ПравилаПреобразования.ПравилоОтветаИнициатору,
	|	БФТ_ПравилаПреобразования.Комментарий,
	|	БФТ_ПравилаПреобразования.ПолучатьНатуральныеЗначенияОбъекта,
	|	БФТ_ПравилаПреобразования.РасширитьСсылочныеТипы,
	|	БФТ_ПравилаПреобразования.НастройкаРасширенияСсылок,
	|	БФТ_ПравилаПреобразования.ПеречитатьОбъектИзБД,
	|	БФТ_ПравилаПреобразования.Использовать,
	|	БФТ_ПравилаПреобразования.БФТ_ИмяПользователяБД
	|ИЗ
	|	РегистрСведений.БФТ_ПравилаПреобразования КАК БФТ_ПравилаПреобразования
	|ГДЕ
	|	(БФТ_ПравилаПреобразования.ПравилоПервичногоПреобразованияXSLT = &ПравилоXSLT
	|	ИЛИ БФТ_ПравилаПреобразования.ПравилоБазовогоПреобразованияXSLT = &ПравилоXSLT)
	|	И НЕ БФТ_ПравилаПреобразования.ПравилоПервичногоПреобразованияXSLT = ЗНАЧЕНИЕ(Справочник.БФТ_ШаблоныПреобразования.ПустаяСсылка)
	|	И НЕ БФТ_ПравилаПреобразования.ПравилоБазовогоПреобразованияXSLT = ЗНАЧЕНИЕ(Справочник.БФТ_ШаблоныПреобразования.ПустаяСсылка)";
	
	Запрос.УстановитьПараметр("ПравилоXSLT", ПравилоXSLT);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

&НаСервере
Функция НастройкиРасширенияРеквизитовСовпадают(Правило1, Правило2)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	БФТ_СвязьПравилаПреобразованияИРасширенияРеквизитов.ИдентификаторТаблицСоответствияРасширенияРеквизитов КАК Идентификатор
	|ИЗ
	|	РегистрСведений.БФТ_СвязьПравилаПреобразованияИРасширенияРеквизитов КАК БФТ_СвязьПравилаПреобразованияИРасширенияРеквизитов
	|ГДЕ
	|	БФТ_СвязьПравилаПреобразованияИРасширенияРеквизитов.ПравилоПреобразования = &ПравилоПреобразования
	|
	|УПОРЯДОЧИТЬ ПО
	|	ИдентификаторТаблицСоответствияРасширенияРеквизитов";
	Запрос.УстановитьПараметр("ПравилоПреобразования", Правило1);
	Расширения1 = Запрос.Выполнить().Выгрузить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	БФТ_СвязьПравилаПреобразованияИРасширенияРеквизитов.ИдентификаторТаблицСоответствияРасширенияРеквизитов КАК Идентификатор
	|ИЗ
	|	РегистрСведений.БФТ_СвязьПравилаПреобразованияИРасширенияРеквизитов КАК БФТ_СвязьПравилаПреобразованияИРасширенияРеквизитов
	|ГДЕ
	|	БФТ_СвязьПравилаПреобразованияИРасширенияРеквизитов.ПравилоПреобразования = &ПравилоПреобразования
	|
	|УПОРЯДОЧИТЬ ПО
	|	ИдентификаторТаблицСоответствияРасширенияРеквизитов";
	Запрос.УстановитьПараметр("ПравилоПреобразования", Правило2);
	Расширения2 = Запрос.Выполнить().Выгрузить();
	
	Если Расширения1.Количество() <> Расширения2.Количество() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Для инд = 0 По Расширения1.Количество() - 1 Цикл
		Если Расширения1[инд].Идентификатор <> Расширения2[инд].Идентификатор Тогда
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция НастройкиРасширенияРеквизитовВходят(Правило1, Правило2)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	БФТ_СвязьПравилаПреобразованияИРасширенияРеквизитов.ИдентификаторТаблицСоответствияРасширенияРеквизитов КАК Идентификатор
	|ПОМЕСТИТЬ Табл1
	|ИЗ
	|	РегистрСведений.БФТ_СвязьПравилаПреобразованияИРасширенияРеквизитов КАК БФТ_СвязьПравилаПреобразованияИРасширенияРеквизитов
	|ГДЕ
	|	БФТ_СвязьПравилаПреобразованияИРасширенияРеквизитов.ПравилоПреобразования = &ПравилоПреобразования
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	БФТ_СвязьПравилаПреобразованияИРасширенияРеквизитов.ИдентификаторТаблицСоответствияРасширенияРеквизитов КАК Идентификатор
	|ПОМЕСТИТЬ Табл2
	|ИЗ
	|	РегистрСведений.БФТ_СвязьПравилаПреобразованияИРасширенияРеквизитов КАК БФТ_СвязьПравилаПреобразованияИРасширенияРеквизитов
	|ГДЕ
	|	БФТ_СвязьПравилаПреобразованияИРасширенияРеквизитов.ПравилоПреобразования = &ПравилоПреобразования2
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Табл1.Идентификатор
	|ИЗ
	|	Табл1 КАК Табл1
	|		ЛЕВОЕ СОЕДИНЕНИЕ Табл2 КАК Табл2
	|		ПО Табл1.Идентификатор = Табл2.Идентификатор
	|ГДЕ
	|	Табл2.Идентификатор ЕСТЬ NULL ";
	Запрос.УстановитьПараметр("ПравилоПреобразования", Правило1);
	Запрос.УстановитьПараметр("ПравилоПреобразования2", Правило2);
	Расширения1 = Запрос.Выполнить().Выгрузить();
	
	Возврат Расширения1;
	
КонецФункции

&НаСервере
Функция НастройкиРасширенияСсылок(Настройки1, Настройки2)
	
	Если Настройки1 = "" Тогда
		Возврат Истина;
	КонецЕсли;
	
	Дерево1 = ЗначениеИзСтрокиВнутр(Настройки1);
	Дерево2 = ЗначениеИзСтрокиВнутр(Настройки2);
	
	Возврат НастройкиРасширенияСсылок_Рекурсия(Дерево1.Строки, Дерево2.Строки);
	
КонецФункции

&НаСервере
Функция НастройкиРасширенияСсылок_Рекурсия(Дерево1Строки, Дерево2Строки)
	
	Для Каждого стр Из Дерево1Строки Цикл
		
		Отбор = Новый Структура();
		Отбор.Вставить("Расширять", стр.Расширять);
		Отбор.Вставить("Уровень", стр.Уровень);
		
		стр2_НайденныеСтроки = Дерево2Строки.НайтиСтроки(Отбор);
		Если стр2_НайденныеСтроки.Количество() <> 1 Тогда
			Возврат Ложь;
		КонецЕсли;
		
		СписокРеквизитов1 = СтрРазделить(стр.СписокРеквизитов, ",");
		СписокРеквизитов2 = СтрРазделить(стр2_НайденныеСтроки[0].СписокРеквизитов, ",");
		Для Каждого стрРек Из СписокРеквизитов1 Цикл
			Если СписокРеквизитов2.Найти(стрРек) = Неопределено Тогда
				Возврат Ложь;
			КонецЕсли;
		КонецЦикла;
		
		Если НастройкиРасширенияСсылок_Рекурсия(стр.Строки, стр2_НайденныеСтроки[0].Строки) = Ложь Тогда
			Возврат Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

#endregion

// Расширения и реквизиты объектов
#region Проверки_Раздел_3

&НаСервере
Процедура РасширенияИРеквизитыОбъектов()
	
	РасширенияИРеквизитыОбъектов_Расширения();
	РасширенияИРеквизитыОбъектов_СсылочныеРасширения();
	
КонецПроцедуры

#region Расширения

&НаСервере
Процедура РасширенияИРеквизитыОбъектов_Расширения()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	БФТ_ПравилаПреобразования.ГлавныйКлюч,
	|	БФТ_ПравилаПреобразования.ДополнительныйКлюч,
	|	БФТ_ПравилаПреобразования.СпрПравилоПреобразования,
	|	БФТ_ПравилаПреобразования.Очередность,
	|	БФТ_ПравилаПреобразования.ПравилоXSD,
	|	БФТ_ПравилаПреобразования.ПравилоПервичногоПреобразованияXSLT,
	|	БФТ_ПравилаПреобразования.ПравилоБазовогоПреобразованияXSLT,
	|	БФТ_ПравилаПреобразования.ПравилоОтветаИнициатору,
	|	БФТ_ПравилаПреобразования.Комментарий,
	|	БФТ_ПравилаПреобразования.ПолучатьНатуральныеЗначенияОбъекта,
	|	БФТ_ПравилаПреобразования.РасширитьСсылочныеТипы,
	|	БФТ_ПравилаПреобразования.НастройкаРасширенияСсылок,
	|	БФТ_ПравилаПреобразования.ПеречитатьОбъектИзБД,
	|	БФТ_ПравилаПреобразования.Использовать,
	|	БФТ_ПравилаПреобразования.БФТ_ИмяПользователяБД,
	|	БФТ_ТаблицаСоответствияРасширенияРеквизитов.ИмяУзла
	|ИЗ
	|	РегистрСведений.БФТ_ПравилаПреобразования КАК БФТ_ПравилаПреобразования
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.БФТ_СвязьПравилаПреобразованияИРасширенияРеквизитов КАК БФТ_СвязьПравилаПреобразованияИРасширенияРеквизитов
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.БФТ_ТаблицаСоответствияРасширенияРеквизитов КАК БФТ_ТаблицаСоответствияРасширенияРеквизитов
	|			ПО БФТ_СвязьПравилаПреобразованияИРасширенияРеквизитов.ИдентификаторТаблицСоответствияРасширенияРеквизитов = БФТ_ТаблицаСоответствияРасширенияРеквизитов.ИдентификаторИмпорта
	|		ПО БФТ_ПравилаПреобразования.СпрПравилоПреобразования = БФТ_СвязьПравилаПреобразованияИРасширенияРеквизитов.ПравилоПреобразования
	|			И (БФТ_СвязьПравилаПреобразованияИРасширенияРеквизитов.СпособРасширения = ЗНАЧЕНИЕ(Перечисление.БФТ_СпособРасширенияРеквизита.ДоВыполненияПравила))";
	
	РезультатЗапроса = Запрос.Выполнить();
	ВДЗ = РезультатЗапроса.Выбрать();
	Пока ВДЗ.Следующий() Цикл
		РасширенияИРеквизитыОбъектов_Рекурсия(ВДЗ, ВДЗ.ИмяУзла, ВДЗ.ГлавныйКлюч.ЗначениеКлюча);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура РасширенияИРеквизитыОбъектов_Рекурсия(ВДЗ, Расширение, МетаданныеИмя)
	Раздел = "3.1";
	
	Если ЕстьИсключения(Раздел, ВДЗ.СпрПравилоПреобразования) Тогда
		Возврат;
	КонецЕсли;
	
	//Если РасширенияИРеквизитыОбъектов_Исключения(Расширение) Тогда
	//	Возврат;
	//КонецЕсли;
	
	МетаОбъект = Метаданные.НайтиПоПолномуИмени(МетаданныеИмя);
	Если МетаОбъект = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	РеквизитРазделенный = СтрРазделить(Расширение, ".");
	Если РеквизитРазделенный.Количество() >= 2 И НЕ РеквизитРазделенный[1] = "DocumentObject" И НЕ РеквизитРазделенный[1] = "CatalogObject" Тогда
		
		Если РеквизитРазделенный[0] = "Ref" Тогда
			Возврат;
		КонецЕсли;
		
		Если ЕстьИсключения(Раздел, ВДЗ.СпрПравилоПреобразования) Тогда
			Возврат;
		КонецЕсли;
		
		ТЧ = МетаОбъект.ТабличныеЧасти.Найти(РеквизитРазделенный[0]);
		Если ТЧ = Неопределено Тогда
			ВывестиОшибку(Раздел, СтрШаблон("В правиле ""%1"" задано расширение не существующего реквизита ""%2"".", ВДЗ.СпрПравилоПреобразования, РеквизитРазделенный[0]), ВДЗ.СпрПравилоПреобразования);
			Возврат;
		КонецЕсли;
				
		рек = ТЧ.Реквизиты.Найти(РеквизитРазделенный[1]);
		Если рек = Неопределено Тогда
			ВывестиОшибку(Раздел, СтрШаблон("В правиле ""%1"" задано расширение не существующего реквизита ""%2"".", ВДЗ.СпрПравилоПреобразования, РеквизитРазделенный[1]), ВДЗ.СпрПравилоПреобразования);
			Возврат;
		КонецЕсли;
		
	ИначеЕсли РеквизитРазделенный.Количество() = 1 Тогда
		
		Если РеквизитРазделенный[0] = "Ref" И 
			(СтрНайти(МетаданныеИмя, "Документ") = 1 
			ИЛИ СтрНайти(МетаданныеИмя, "Справочник") = 1)
			Тогда
			Возврат;
		КонецЕсли;
				
		рек = МетаОбъект.Реквизиты.Найти(РеквизитРазделенный[0]);
		Если рек = Неопределено Тогда
			ВывестиОшибку(Раздел, СтрШаблон("В правиле ""%1"" задано расширение не существующего реквизита ""%2"".", ВДЗ.СпрПравилоПреобразования, РеквизитРазделенный[0]), ВДЗ.СпрПравилоПреобразования);
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

//&НаСервере
//Функция РасширенияИРеквизитыОбъектов_Исключения(Расширение)
//	
//	Исключения = Новый Соответствие();
//	Исключения.Вставить("Проверка.СвязанныеДокументы", Истина);
//	// Исключения.Вставить("", Истина);
//	
//	Возврат (Исключения[Расширение] <> Неопределено);
//	
//КонецФункции

#endregion

#region Ссылочные_Типы

&НаСервере
Процедура РасширенияИРеквизитыОбъектов_СсылочныеРасширения()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	БФТ_ПравилаПреобразования.ГлавныйКлюч,
	|	БФТ_ПравилаПреобразования.ДополнительныйКлюч,
	|	БФТ_ПравилаПреобразования.СпрПравилоПреобразования,
	|	БФТ_ПравилаПреобразования.Очередность,
	|	БФТ_ПравилаПреобразования.ПравилоXSD,
	|	БФТ_ПравилаПреобразования.ПравилоПервичногоПреобразованияXSLT,
	|	БФТ_ПравилаПреобразования.ПравилоБазовогоПреобразованияXSLT,
	|	БФТ_ПравилаПреобразования.ПравилоОтветаИнициатору,
	|	БФТ_ПравилаПреобразования.Комментарий,
	|	БФТ_ПравилаПреобразования.ПолучатьНатуральныеЗначенияОбъекта,
	|	БФТ_ПравилаПреобразования.РасширитьСсылочныеТипы,
	|	БФТ_ПравилаПреобразования.НастройкаРасширенияСсылок,
	|	БФТ_ПравилаПреобразования.ПеречитатьОбъектИзБД,
	|	БФТ_ПравилаПреобразования.Использовать,
	|	БФТ_ПравилаПреобразования.БФТ_ИмяПользователяБД
	|ИЗ
	|	РегистрСведений.БФТ_ПравилаПреобразования КАК БФТ_ПравилаПреобразования
	|ГДЕ
	|	БФТ_ПравилаПреобразования.РасширитьСсылочныеТипы = ИСТИНА";
	
	РезультатЗапроса = Запрос.Выполнить();
	ВДЗ = РезультатЗапроса.Выбрать();
	Пока ВДЗ.Следующий() Цикл
		ПроверкаРеквизитов_РасширенияСсылок(ВДЗ, ВДЗ.НастройкаРасширенияСсылок, ВДЗ.ГлавныйКлюч.ЗначениеКлюча);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПроверкаРеквизитов_РасширенияСсылок(ВДЗ, Настройки1, МетаданныеИмя)
	
	Если Настройки1 = "" Тогда
		Возврат Истина;
	КонецЕсли;
	
	Дерево1 = ЗначениеИзСтрокиВнутр(Настройки1);
	
	Возврат ПроверкаРеквизитов_РасширенияСсылок_Рекурсия(ВДЗ, Дерево1.Строки, МетаданныеИмя);
	
КонецФункции

&НаСервере
Функция ПроверкаРеквизитов_РасширенияСсылок_Рекурсия(ВДЗ, Дерево1Строки, МетаданныеИмя)
	Раздел = "3.2";
	
	МетаОбъект = Метаданные.НайтиПоПолномуИмени(МетаданныеИмя);
	Если МетаОбъект = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Для Каждого стр Из Дерево1Строки Цикл
		
		Если стр.Уровень = "Объект" Тогда
			
			Если стр.СписокРеквизитов = "" Тогда
				Продолжить;
			КонецЕсли;
			
			СписокРеквизитов = СтрРазделить(стр.СписокРеквизитов, ",");
			Для Каждого стрРек Из СписокРеквизитов Цикл
				стрРек = СокрЛП(стрРек);
				
				рек = МетаОбъект.Реквизиты.Найти(стрРек);
				Если рек = Неопределено Тогда
					ВывестиОшибку(Раздел, СтрШаблон("В правиле ""%1"" задано расширение ссылок не существующего реквизита ""%2"".", ВДЗ.СпрПравилоПреобразования, стрРек), ВДЗ.СпрПравилоПреобразования);
					Возврат Ложь;
				КонецЕсли;
				
			КонецЦикла;
			
		ИначеЕсли стр.Уровень = "Табличные части" Тогда
			
			Если стр.СписокРеквизитов = "" Тогда
				Продолжить;
			КонецЕсли;
			
			СписокРеквизитов = СтрРазделить(стр.СписокРеквизитов, ",");
			Для Каждого стрРек Из СписокРеквизитов Цикл
				стрРек = СокрЛП(стрРек);
				
				РеквизитРазделенный = СтрРазделить(стрРек, ".");
				Если РеквизитРазделенный[0] = "*" Тогда
					Продолжить;
				КонецЕсли;
				
				Если РеквизитРазделенный.Количество() = 1 Тогда
					
					ТЧ = МетаОбъект.ТабличныеЧасти.Найти(СокрЛП(РеквизитРазделенный[0]));
					Если ТЧ = Неопределено Тогда
						ВывестиОшибку(Раздел, СтрШаблон("В правиле ""%1"" задано расширение ссылок не существующей табличной части ""%2"".", ВДЗ.СпрПравилоПреобразования, СокрЛП(РеквизитРазделенный[0])), ВДЗ.СпрПравилоПреобразования);
						Возврат Ложь;
					КонецЕсли;
					
				ИначеЕсли РеквизитРазделенный.Количество() = 2 Тогда
					
					ТЧ = МетаОбъект.ТабличныеЧасти.Найти(СокрЛП(РеквизитРазделенный[0]));
					Если ТЧ = Неопределено Тогда
						ВывестиОшибку(Раздел, СтрШаблон("В правиле ""%1"" задано расширение ссылок не существующей табличной части ""%2"".", ВДЗ.СпрПравилоПреобразования, СокрЛП(РеквизитРазделенный[0])), ВДЗ.СпрПравилоПреобразования);
						Возврат Ложь;
					КонецЕсли;
					
					Если РеквизитРазделенный[1] = "*" Тогда
						Продолжить;
					КонецЕсли;
					
					рек = ТЧ.Реквизиты.Найти(СокрЛП(РеквизитРазделенный[1]));
					Если рек = Неопределено Тогда
						ВывестиОшибку(Раздел, СтрШаблон("В правиле ""%1"" задано расширение ссылок не существующего реквизита ""%2"".", ВДЗ.СпрПравилоПреобразования, СокрЛП(РеквизитРазделенный[1])), ВДЗ.СпрПравилоПреобразования);
						Возврат Ложь;
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		// Мы не знаем какой тип метаданных на втором уровне...
		//Если ПроверкаРеквизитов_РасширенияСсылок_Рекурсия(ВДЗ, стр.Строки, МетаданныеИмя) = Ложь Тогда
		//	Возврат Ложь;
		//КонецЕсли;
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

#endregion

#endregion

// Статусная модель
#region Проверки_Раздел_4

&НаСервере
Процедура ПроверкаСтатуснойМодели()
	
	СуществованиеФиктивногоПерехода();
	ПравилаИсключенияФиктивногоПерехода();
	
КонецПроцедуры

&НаСервере
Процедура СуществованиеФиктивногоПерехода()
	Раздел = "4.1";
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	БФТ_ПравилаПреобразования.ГлавныйКлюч,
	|	БФТ_ПравилаПреобразования.ДополнительныйКлюч,
	|	БФТ_ПравилаПреобразования.СпрПравилоПреобразования,
	|	БФТ_ПравилаПреобразования.Очередность,
	|	БФТ_ПравилаПреобразования.ПравилоXSD,
	|	БФТ_ПравилаПреобразования.ПравилоПервичногоПреобразованияXSLT,
	|	БФТ_ПравилаПреобразования.ПравилоБазовогоПреобразованияXSLT,
	|	БФТ_ПравилаПреобразования.ПравилоОтветаИнициатору,
	|	БФТ_ПравилаПреобразования.Комментарий,
	|	БФТ_ПравилаПреобразования.ПолучатьНатуральныеЗначенияОбъекта,
	|	БФТ_ПравилаПреобразования.РасширитьСсылочныеТипы,
	|	БФТ_ПравилаПреобразования.НастройкаРасширенияСсылок,
	|	БФТ_ПравилаПреобразования.ПеречитатьОбъектИзБД,
	|	БФТ_ПравилаПреобразования.Использовать,
	|	БФТ_ПравилаПреобразования.БФТ_ИмяПользователяБД
	|ИЗ
	|	РегистрСведений.БФТ_ФайлыШаблоновПреобразования КАК БФТ_ФайлыШаблоновПреобразования
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.БФТ_ПравилаПреобразования КАК БФТ_ПравилаПреобразования
	|		ПО БФТ_ФайлыШаблоновПреобразования.ШаблонПреобразования = БФТ_ПравилаПреобразования.ПравилоБазовогоПреобразованияXSLT
	|ГДЕ
	|	БФТ_ФайлыШаблоновПреобразования.КодШаблона = ""0018""";
	
	РезультатЗапроса = Запрос.Выполнить();
	ВДЗ = РезультатЗапроса.Выбрать();
	Пока ВДЗ.Следующий() Цикл
		
		Если ЕстьИсключения(Раздел, ВДЗ.СпрПравилоПреобразования) Тогда
			Продолжить;
		КонецЕсли;
		
		Попытка
			МетаОбъект = Метаданные.НайтиПоПолномуИмени(ВДЗ.ГлавныйКлюч.ЗначениеКлюча);
			Статусы = СтрРазделить(Строка(ВДЗ.ДополнительныйКлюч), "-");
			ИсхСтатус = СУОбщееСервер.НайтиСтатусПоИмени(МетаОбъект, Статусы[0], Ложь);
			НовСтатус = СУОбщееСервер.НайтиСтатусПоИмени(МетаОбъект, Статусы[1], Ложь);
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	СУ_Действия.Ссылка
			|ИЗ
			|	Справочник.СУ_Действия КАК СУ_Действия
			|ГДЕ
			|	СУ_Действия.НовСтатус = &НовСтатус
			|	И СУ_Действия.ИсхСтатус = &ИсхСтатус
			|	И СУ_Действия.ФиктивныйПереход = ИСТИНА";
			
			Запрос.УстановитьПараметр("ИсхСтатус", ИсхСтатус);
			Запрос.УстановитьПараметр("НовСтатус", НовСтатус);
			Если Запрос.Выполнить().Выгрузить().Количество() = 0 Тогда
				ВывестиОшибку(Раздел, СтрШаблон("В правиле ""%1"" происходит создание новой версии документа, но в статусной модели отсутствует фиктивный переход.", ВДЗ.СпрПравилоПреобразования), ВДЗ.СпрПравилоПреобразования);
			КонецЕсли;
			
		Исключение
			ВывестиОшибку(Раздел, СтрШаблон("Ошибка в функции ""ПроверкаСтатуснойМодели"". Ошибка: ""%1""", ОписаниеОшибки()));   
		КонецПопытки;
		
	КонецЦикла;
	
	
КонецПроцедуры

&НаСервере
Процедура ПравилаИсключенияФиктивногоПерехода()
	Раздел = "4.2";
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СУ_Действия.Ссылка
	|ИЗ
	|	Справочник.СУ_Действия КАК СУ_Действия
	|ГДЕ
	|	СУ_Действия.ФиктивныйПереход = ИСТИНА";
	
	РезультатЗапроса = Запрос.Выполнить();
	ВДЗ = РезультатЗапроса.Выбрать();
	Пока ВДЗ.Следующий() Цикл
		
		Если ВДЗ.Ссылка.ПравилаИсключения.Количество() = 0 И Не ЕстьИсключения(Раздел, ВДЗ.Ссылка) Тогда
			ВывестиОшибку(Раздел, СтрШаблон("В фиктивном действии ""%1: %2"" не заданы правила исключения создающие движения в регистрах.", ВДЗ.Ссылка.Владелец, ВДЗ.Ссылка), ВДЗ.Ссылка);
		КонецЕсли;
		
	КонецЦикла;
	
	
КонецПроцедуры

#endregion

// Другое
#region Проверки_Раздел_5


&НаСервере
Процедура ПроверкаОчередностиAny()
	Раздел = "5.1";
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	БФТ_ПравилаПреобразования.ГлавныйКлюч КАК ГлавныйКлюч,
	|	БФТ_ПравилаПреобразования.ДополнительныйКлюч,
	|	БФТ_ПравилаПреобразования.СпрПравилоПреобразования,
	|	БФТ_ПравилаПреобразования.Очередность КАК Очередность,
	|	БФТ_ПравилаПреобразования.ПравилоXSD,
	|	БФТ_ПравилаПреобразования.ПравилоПервичногоПреобразованияXSLT,
	|	БФТ_ПравилаПреобразования.ПравилоБазовогоПреобразованияXSLT,
	|	БФТ_ПравилаПреобразования.ПравилоОтветаИнициатору,
	|	БФТ_ПравилаПреобразования.Комментарий,
	|	БФТ_ПравилаПреобразования.ПолучатьНатуральныеЗначенияОбъекта,
	|	БФТ_ПравилаПреобразования.РасширитьСсылочныеТипы,
	|	БФТ_ПравилаПреобразования.НастройкаРасширенияСсылок,
	|	БФТ_ПравилаПреобразования.ПеречитатьОбъектИзБД,
	|	БФТ_ПравилаПреобразования.Использовать,
	|	БФТ_ПравилаПреобразования.БФТ_ИмяПользователяБД
	|ИЗ
	|	РегистрСведений.БФТ_ПравилаПреобразования КАК БФТ_ПравилаПреобразования
	|ГДЕ
	|	БФТ_ПравилаПреобразования.ДополнительныйКлюч.Наименование ПОДОБНО ""%Any%""
	|	И БФТ_ПравилаПреобразования.ПравилоПервичногоПреобразованияXSLT = ЗНАЧЕНИЕ(Справочник.БФТ_ШаблоныПреобразования.ПустаяСсылка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Очередность
	|ИТОГИ ПО
	|	ГлавныйКлюч";
	
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаГлавныйКлюч = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаГлавныйКлюч.Следующий() Цикл
		
		НомераAnyBefore = Новый Соответствие();
		НомераAnyAfter = Новый Соответствие();
		ВДЗ = ВыборкаГлавныйКлюч.Выбрать();
		Пока ВДЗ.Следующий() Цикл
			
			Если ЕстьИсключения(Раздел, ВДЗ.СпрПравилоПреобразования) Тогда
				Продолжить;
			КонецЕсли;
			
			Если ВДЗ.ДополнительныйКлюч.Наименование = "AnyBefore" Тогда
				НомераAnyBefore.Вставить(ВДЗ.Очередность, ВДЗ.СпрПравилоПреобразования);
			КонецЕсли;
			Если ВДЗ.ДополнительныйКлюч.Наименование = "AnyAfter" Тогда
				НомераAnyAfter.Вставить(ВДЗ.Очередность, ВДЗ.СпрПравилоПреобразования);
			КонецЕсли;
			
		КонецЦикла;
		
		ВДЗ = ВыборкаГлавныйКлюч.Выбрать();
		Пока ВДЗ.Следующий() Цикл
			
			Если ВДЗ.ДополнительныйКлюч.Наименование = "AnyBefore" ИЛИ ВДЗ.ДополнительныйКлюч.Наименование = "AnyAfter" Тогда
				Продолжить;
			КонецЕсли;
			
			Если СтрНайти(ВДЗ.ДополнительныйКлюч.Наименование, "AnyBefore") >= 1 Тогда
				Номера = НомераAnyBefore;
			КонецЕсли;
			
			Если СтрНайти(ВДЗ.ДополнительныйКлюч.Наименование, "AnyAfter") >= 1 Тогда
				Номера = НомераAnyAfter;
			КонецЕсли;
			
			Если Номера <> Неопределено И Номера[ВДЗ.Очередность] <> Неопределено Тогда
				
				Если ЕстьИсключения(Раздел, ВДЗ.СпрПравилоПреобразования) Тогда
					Продолжить;
				КонецЕсли;
				
				ВывестиОшибку(Раздел, СтрШаблон("В правилах ""%1"" и ""%2"" совпадают очередности.", ВДЗ.СпрПравилоПреобразования, Номера[ВДЗ.Очередность]), ВДЗ.СпрПравилоПреобразования);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаОчередностиОпределенныхПравил()
	Раздел = "5.2";
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	БФТ_ПравилаПреобразования.ГлавныйКлюч,
	|	БФТ_ПравилаПреобразования.ДополнительныйКлюч,
	|	БФТ_ПравилаПреобразования.Очередность,
	|	БФТ_ПравилаПреобразования.СпрПравилоПреобразования
	|ИЗ
	|	РегистрСведений.БФТ_ПравилаПреобразования КАК БФТ_ПравилаПреобразования
	|ГДЕ
	|	БФТ_ПравилаПреобразования.ПравилоПервичногоПреобразованияXSLT = ЗНАЧЕНИЕ(Справочник.БФТ_ШаблоныПреобразования.ПустаяСсылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	БФТ_ПравилаПреобразования.ДополнительныйКлюч,
	|	БФТ_ПравилаПреобразования.ГлавныйКлюч,
	|	БФТ_ПравилаПреобразования.Очередность,
	|	БФТ_ПравилаПреобразования.СпрПравилоПреобразования
	|
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(*) > 1";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ВывестиОшибку(Раздел, СтрШаблон("В правилах с ключами ""%1"".""%2"" совпадают очередности, очередность - ""%3""", Выборка.ГлавныйКлюч, Выборка.ДополнительныйКлюч, Выборка.Очередность), Выборка.СпрПравилоПреобразования);
	КонецЦикла;
КонецПроцедуры

#endregion

#region Проверки_Раздел_6

&НаСервере
Процедура ПроверитьОшибкиВТаблицеСоответствияРасширенияРеквизитов()
	Раздел = "6";

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	БФТ_ТаблицаСоответствияРасширенияРеквизитов.КодВызова,
	|	БФТ_ТаблицаСоответствияРасширенияРеквизитов.ДопКодВызова,
	|	БФТ_ТаблицаСоответствияРасширенияРеквизитов.ПолеРезультата,
	|	БФТ_ТаблицаСоответствияРасширенияРеквизитов.ДопПолеРезультата,
	|	БФТ_ТаблицаСоответствияРасширенияРеквизитов.ИсточникВызова,
	|	БФТ_ТаблицаСоответствияРасширенияРеквизитов.ИдентификаторИмпорта
	|ИЗ
	|	РегистрСведений.БФТ_ТаблицаСоответствияРасширенияРеквизитов КАК БФТ_ТаблицаСоответствияРасширенияРеквизитов
	|ГДЕ
	|	(БФТ_ТаблицаСоответствияРасширенияРеквизитов.ПолеРезультата <> """"
	|			ИЛИ БФТ_ТаблицаСоответствияРасширенияРеквизитов.ДопПолеРезультата <> """")";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если ЕстьИсключения(Раздел, Выборка.ИдентификаторИмпорта) Тогда
			Продолжить;	
		КонецЕсли;
		
		ПолеРезультатаСуществует(Раздел, Выборка.ПолеРезультата, Выборка.КодВызова, Выборка.ИсточникВызова, Выборка.ИдентификаторИмпорта);
		ПолеРезультатаСуществует(Раздел, Выборка.ДопПолеРезультата, Выборка.ДопКодВызова, Выборка.ИсточникВызова, Выборка.ИдентификаторИмпорта);
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ПолеРезультатаСуществует(Раздел, Знач ПолеРезультата, КодВызова, ИсточникВызова, Guid)
	Если Не ЗначениеЗаполнено(ПолеРезультата) Тогда
		Возврат;	
	КонецЕсли;
	СтрРазбит = СтрРазделить(ПолеРезультата, ".", Ложь);
	Если СтрРазбит.Количество() > 1 Тогда
		ПолеРезультата = СтрРазбит[0];	
	КонецЕсли;
	
	ИмяМодуля = РегистрыСведений.БФТ_ТаблицаСоответствияРасширенияРеквизитов.ПолучитьИмяМодуля(ИсточникВызова);
	Поля = Вычислить(СтрШаблон("%1.ПолучитьСписокПолей(""%2"")", ИмяМодуля, КодВызова));
	Если Поля.Найти(ПолеРезультата) = Неопределено Тогда
		Ссылка = Новый Структура("Guid,Тип", Guid, Тип("РегистрСведенийКлючЗаписи.БФТ_ТаблицаСоответствияРасширенияРеквизитов"));
		ВывестиОшибку(Раздел, СтрШаблон("В таблице соответствия расширения реквизитов с кодом вызова ""%1"" используется не существующее поле результата ""%2""", КодВызова, ПолеРезультата), Ссылка);	
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПроверитьСуществованиеФункций()
	Раздел = "6.1";
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	БФТ_ТаблицаСоответствияРасширенияРеквизитов.КодВызова,
	|	БФТ_ТаблицаСоответствияРасширенияРеквизитов.ИсточникВызова,
	|	БФТ_ТаблицаСоответствияРасширенияРеквизитов.ИдентификаторИмпорта
	|ИЗ
	|	РегистрСведений.БФТ_ТаблицаСоответствияРасширенияРеквизитов КАК БФТ_ТаблицаСоответствияРасширенияРеквизитов
	|ГДЕ
	|	БФТ_ТаблицаСоответствияРасширенияРеквизитов.КодВызова <> """"";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если ЕстьИсключения(Раздел, Выборка.ИдентификаторИмпорта) Тогда
			Продолжить;	
		КонецЕсли;
		
		ПроцедурыМодуляСтрокой = Новый Массив();
		ИмяМодуля = РегистрыСведений.БФТ_ТаблицаСоответствияРасширенияРеквизитов.ПолучитьИмяМодуля(Выборка.ИсточникВызова);
		ПроцедурыМодуля = Вычислить(СтрШаблон("%1.ПолучитьПроцедурыМодуля()", ИмяМодуля));
		
		Для Каждого ЭлементМассива Из ПроцедурыМодуля Цикл
			Если ТипЗнч(ЭлементМассива) = Тип("Структура") Тогда
				ПроцедурыМодуляСтрокой.Добавить(ЭлементМассива.ИмяФункции);
			Иначе
				ПроцедурыМодуляСтрокой.Добавить(ЭлементМассива);
			КонецЕсли;
		КонецЦикла;
		
		Если ПроцедурыМодуляСтрокой.Найти(Выборка.КодВызова) = Неопределено Тогда
			Ссылка = Новый Структура("Guid,Тип", Выборка.ИдентификаторИмпорта, Тип("РегистрСведенийКлючЗаписи.БФТ_ТаблицаСоответствияРасширенияРеквизитов"));
			ВывестиОшибку(Раздел, СтрШаблон("В таблице соответствия расширения реквизитов используется функция ""%1"" из модуля ""%2"", такой функции в модуле не существует", Выборка.КодВызова, ИмяМодуля), Ссылка);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры


#endregion

#endregion

#region ДобавлениеВИсключения

&НаКлиенте
Процедура ДобавитьВИсключение(Команда)
	ВыделенныеСтроки = Элементы.ЛогЗагрузки.ВыделенныеСтроки;
	
	Для Каждого Стр Из ВыделенныеСтроки Цикл
		ДанныеСтроки = ЛогЗагрузки.НайтиПоИдентификатору(Стр);
	
		Если Не ЗначениеЗаполнено(ДанныеСтроки.ДанныеОбъектов) Тогда
			Продолжить;	
		КонецЕсли;
		ДанныеОбъектов = ЗначениеИзСтрокиВнутрНаСервере(ДанныеСтроки.ДанныеОбъектов);
		Если ДанныеОбъектов = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Разбивка = СтрРазделить(ДанныеСтроки.Текст, ":");
		Если Разбивка.Количество() >= 2 Тогда
			ТипПроверки = СокрЛП(Разбивка[0]);
		Иначе
			ТипПроверки = "";
		КонецЕсли;

		Для Каждого ДанныеОбъекта Из ДанныеОбъектов Цикл
			ДобавитьВИсключениеНаСервере(ДанныеОбъекта, ТипПроверки);
		КонецЦикла;	

		ДанныеСтроки.ДобавленВИсключения = Истина;
	КонецЦикла;
КонецПроцедуры


Процедура ДобавитьВИсключениеНаСервере(ДанныеОбъекта, ТипПроверки)
	Запись = РегистрыСведений.БФТ_ТестированиеШаблоновИсключения.СоздатьМенеджерЗаписи();
	Запись.GuidОбъекта = ДанныеОбъекта.Guid;
	Запись.Комментарий = "Добавлен из контекстного меню";
	Запись.ТипПроверки = ТипПроверки;
	Запись.Записать();
КонецПроцедуры

&НаКлиенте
Процедура ЛогЗагрузкиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	Перем Правило;
	
	ДанныеСтроки = ЛогЗагрузки.НайтиПоИдентификатору(ВыбраннаяСтрока);
	
	Если Не ЗначениеЗаполнено(ДанныеСтроки.ДанныеОбъектов) Тогда
		Возврат;	
	КонецЕсли;
	
	ДанныеОбъектов = ЗначениеИзСтрокиВнутрНаСервере(ДанныеСтроки.ДанныеОбъектов);
	Если ДанныеОбъектов = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Стр Из ДанныеОбъектов Цикл
		ДанныеФормы = ПолучитьДанныеФормыНаСервере(Стр); 
		Если ДанныеФормы = Неопределено Тогда
			Продолжить;	
		КонецЕсли;
		
		ОткрытьФорму(ДанныеФормы.Форма, Новый Структура("Ключ", ДанныеФормы.Ключ));
	КонецЦикла;	
КонецПроцедуры                                               

&НаКлиентеНаСервереБезКонтекста
Функция УбратьФорматирование(Знач Строка)
	Строка = СтрЗаменить(СокрЛП(Строка), Символы.ПС, "");
	
	Возврат СтрЗаменить(Строка, Символы.ВК, "");
КонецФункции

#endregion

&НаСервереБезКонтекста
Функция ЗначениеИзСтрокиВнутрНаСервере(ИсхСтрока)
	Возврат ЗначениеИзСтрокиВнутр(ИсхСтрока);	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьДанныеФормыНаСервере(ДанныеОбъекта)
	Перем КлючевоеИзмерение; 
	
	Если ДанныеОбъекта = Неопределено Тогда
		Возврат Неопределено;	
	КонецЕсли;
	ДанныеОбъекта.Свойство("КлючевоеИзмерение", КлючевоеИзмерение);
	КлючевоеИзмерение = ?(КлючевоеИзмерение = Неопределено, "ИдентификаторИмпорта", КлючевоеИзмерение);
	
	МетаОбъект = Метаданные.НайтиПоТипу(ДанныеОбъекта.Тип);
	Ответ = Новый Структура("Форма,Ключ");
	Если ОбщегоНазначения.ЭтоРегистр(МетаОбъект) Тогда
		Ответ.Форма = МетаОбъект.ОсновнаяФормаЗаписи.ПолноеИмя();	
		Менеджер = БФТ_ДесериализаторСервер.ПолучитьМенеджерОбъекта(МетаОбъект);
		
		Набор = Менеджер.СоздатьНаборЗаписей();
		Набор.Отбор[КлючевоеИзмерение].Установить(ДанныеОбъекта.Guid);
		Набор.Прочитать();
		
		Если Набор.Количество() = 1 Тогда
			КлючПравила = Новый Структура;
			Для Каждого Изм Из МетаОбъект.Измерения Цикл
				КлючПравила.Вставить(Изм.Имя, Неопределено);
			КонецЦикла;
			
			ЗаполнитьЗначенияСвойств(КлючПравила, Набор[0]);
			Ответ.Ключ = Менеджер.СоздатьКлючЗаписи(КлючПравила);
		КонецЕсли;
	Иначе
		Ответ.Форма = МетаОбъект.ОсновнаяФормаОбъекта.ПолноеИмя();	
		Менеджер = БФТ_ДесериализаторСервер.ПолучитьМенеджерОбъекта(МетаОбъект);
		Ссылка = Менеджер.ПолучитьСсылку(ДанныеОбъекта.Guid);
		
		Если ТипЗнч(Ссылка) = Тип("СправочникСсылка.БФТ_ПравилаПреобразования") Тогда
			Данные = Новый Структура("Тип,Guid,КлючевоеИзмерение", Тип("РегистрСведенийКлючЗаписи.БФТ_ПравилаПреобразования"), Ссылка, "СпрПравилоПреобразования");
			Возврат ПолучитьДанныеФормыНаСервере(Данные);      
		Иначе
			Ответ.Ключ = Ссылка;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ответ;
КонецФункции

#КонецОбласти

