#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
	Процедура ОбработкаПолученияПолейПредставления(Поля, СтандартнаяОбработка)
		СтандартнаяОбработка = Ложь;
		
		Поля.Добавить("Код");
		Поля.Добавить("Наименование");
	КонецПроцедуры
	
	Процедура ОбработкаПолученияПредставления(Данные, Представление, СтандартнаяОбработка)
		СтандартнаяОбработка = Ложь;
		Представление = СтрШаблон("(%1) %2", Данные.Код, Данные.Наименование);
	КонецПроцедуры
	
	Функция ПолучитьЗадачи(НомераЗадач = Неопределено, Обсуждение = Неопределено) Экспорт 
		МассивНомеров = ?(ТипЗнч(НомераЗадач) = Тип("Массив"), НомераЗадач, СтрРазделить(НомераЗадач, ",", Ложь));
		Разбивка = ОбщегоНазначенияКлиентСервер.РазбитьМассив(МассивНомеров, 100);
		//ТекПроцент = ДобавитьКТекущемуПроцентуВыполнения(2);
		
		МаксПроц = 50;
		Результат = Новый Массив();
		ТекИндекс = 0;
		Для Каждого Блок Из Разбивка Цикл
			ТекИндекс = ТекИндекс + 1;
			Если Обсуждение <> Неопределено Тогда
				СоздатьСообщение(Обсуждение, Цел(ТекИндекс / Разбивка.Количество() * МаксПроц));
			КонецЕсли;
			
			JQL = СтрШаблон("key in(%1)", СтрСоединить(Блок, ","));
			СписокЗадач = ВзаимодействиеC_JIRA_КлиентСервер.ПолучитьСписокЗадач(JQL);
			Для Каждого З Из СписокЗадач Цикл
				Результат.Добавить(З);	
			КонецЦикла;
		КонецЦикла;
		
		Возврат Результат;
	КонецФункции
	
	Процедура ЧисткаУдаленныхЗадач() Экспорт 
		Запрос = Новый Запрос;                    
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Задачи.Ссылка КАК Задача,
		|	Задачи.Код КАК Номер
		|ИЗ
		|	Справочник.Задачи КАК Задачи
		|ГДЕ
		|	НЕ Задачи.ПометкаУдаления";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			Ошибка = "";
			Попытка
				СписокЗадач = ПолучитьЗадачи(Выборка.Номер);
			Исключение
				Ошибка = ОписаниеОшибки();
			КонецПопытки;
			
			// Нормального способа проверить существования задачи не нашел
			Если СтрЧислоВхождений(Ошибка, "не существует для поля 'key'") > 0 Тогда
				Объект = Выборка.Задача.ПолучитьОбъект();
				Объект.ПометкаУдаления = Истина;
				Объект.Записать();
			КонецЕсли;
		КонецЦикла;
	КонецПроцедуры
		
	Процедура СоздатьСообщение(Обсуждение, Текст)
		Сообщение = СистемаВзаимодействия.СоздатьСообщение(Обсуждение.Идентификатор);
		Сообщение.Текст = Текст;
		Сообщение.Записать();
	КонецПроцедуры
	
	Процедура ОбновитьЗадачи(НомераДдяОбновления = Неопределено, Знач Часы = 0) Экспорт 
		Перем Обсуждение;
		
		//ИдентификатоПользователяИБ = ПользователиИнформационнойБазы.ТекущийПользователь().УникальныйИдентификатор;
		//ПользовательСистемыВзаимодействия = СистемаВзаимодействия.ПолучитьИдентификаторПользователя(ИдентификатоПользователяИБ);
		//Обсуждение = СистемаВзаимодействия.СоздатьОбсуждение();
		//Обсуждение.Заголовок = "Процесс обновления задач";
		//Обсуждение.Участники.Добавить(ПользовательСистемыВзаимодействия); 
		//Обсуждение.Записать();
		//
		//СоздатьСообщение(Обсуждение, 1);
		
		Если НомераДдяОбновления <> Неопределено Тогда
			СписокЗадач = ПолучитьЗадачи(НомераДдяОбновления, Обсуждение);	
			//СоздатьСообщение(Обсуждение, 60);
			ЗаписатьЗадачиВБазу(СписокЗадач, Неопределено);
			//СоздатьСообщение(Обсуждение, 100);	
			Возврат;
		КонецЕсли;
		
		ОтсеятьАрхивныеЗадачи();
		
		JQL = ОбщегоНазначенияСервер.ПолучитьЗначениеКонстанты("JIRA_JQL");
		ДатаСоздания = ПоследняяДатаСоздания();
		ФильтрПоДатаСоздания = "";
		Если ЗначениеЗаполнено(ДатаСоздания) Тогда
			ФильтрПоДатаСоздания = СтрШаблон("or created >= %1", Формат(ДатаСоздания, "ДФ=yyyy-MM-dd"));
		КонецЕсли;
		
		
		// Обновляем измененные
		JQL = СтрШаблон("(updated >= -%1h %2 ) and %3", Формат(?(Часы = 0, 1, Часы), "ЧГ="), ФильтрПоДатаСоздания, JQL);
		СписокЗадач = ВзаимодействиеC_JIRA_КлиентСервер.ПолучитьСписокЗадач(JQL);
		ЗаписатьЗадачиВБазу(СписокЗадач, ДатаСоздания);
	КонецПроцедуры
	
	Процедура ОтсеятьАрхивныеЗадачи() 
		СписокЗадач = ВзаимодействиеC_JIRA_КлиентСервер.ПолучитьЗадачиИСабтаскиСМетками("Архив");
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Задачи.Ссылка КАК Задача
		|ИЗ
		|	Справочник.Задачи КАК Задачи
		|ГДЕ
		|	Задачи.Код В(&СписокЗадач)
		|	И НЕ Задачи.ПометкаУдаления";
		
		Запрос.УстановитьПараметр("СписокЗадач", СписокЗадач);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			Объект = Выборка.Задача.ПолучитьОбъект();
			Объект.ПометкаУдаления = Истина;
			Объект.Записать();
		КонецЦикла;
	КонецПроцедуры
	
	Функция ЗаписатьЗадачиВБазу(СписокЗадач, ПоследняяДатаСоздания) 
		//Сабтаски = Новый Массив();
		Для Каждого Задача Из СписокЗадач Цикл
			ПоляЗадачи = Задача["fields"];
			
			НачатьТранзакцию();
			Попытка
				//Блокировка = Новый БлокировкаДанных;
				//ЭлементБлокировки = Блокировка.Добавить("Справочник.Задачи_");
				//ЭлементБлокировки.УстановитьЗначение("Номер", Задача["key"]);
				//ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
				//Блокировка.Заблокировать();
				
				ЗадачаСсылка = Справочники.Задачи.НайтиПоКоду(Задача["key"]);
				ЗадачаОбъект = ?(ЗначениеЗаполнено(ЗадачаСсылка), ЗадачаСсылка.ПолучитьОбъект(), Справочники.Задачи.СоздатьЭлемент());
												
				ЗадачаОбъект.Код = Задача["key"];
				ЗадачаОбъект.Исполнитель = Справочники.Пользователи.НайтиСоздатьПользователя(ПоляЗадачи["assignee"]);
				ЗадачаОбъект.Автор = Справочники.Пользователи.НайтиСоздатьПользователя(ПоляЗадачи["reporter"]);
				
				ОценкаВСекундах = ПоляЗадачи["timeoriginalestimate"]; // timeoriginalestimate - в секундах
				ЗадачаОбъект.Оценка = ?(ОценкаВСекундах <> Неопределено, ОценкаВСекундах, 0) / 60/60;    
				ЗадачаОбъект.ПлановаяДатаЗавершения = ВзаимодействиеC_JIRA_КлиентСервер.ПреобразоватьВДату(ПоляЗадачи["duedate"]);
				ЗадачаОбъект.Приоритет = Справочники.Приоритеты.НайтиСоздатьПриоритет(ПоляЗадачи["priority"]);
				ЗадачаОбъект.ДатаСоздания = ВзаимодействиеC_JIRA_КлиентСервер.ПреобразоватьВДату(ПоляЗадачи["created"]);
				ЗадачаОбъект.Наименование = ПоляЗадачи["summary"];
				ЗадачаОбъект.Статус = ПоляЗадачи["status"]["name"];
				
				Если ПоляЗадачи["parent"] <> Неопределено Тогда
					ЗадачаОбъект.Родитель = Справочники.Задачи.НайтиПоКоду(ПоляЗадачи["parent"]["key"]);
				КонецЕсли;
				
				ЗадачаОбъект.Тип = Справочники.ТипыЗадач.НайтиСоздатьТип(ПоляЗадачи["issuetype"]);
				ЗадачаОбъект.ЭтоНовая = ПоследняяДатаСоздания <> Неопределено И ЗадачаОбъект.ДатаСоздания > ПоследняяДатаСоздания;
				ЗадачаОбъект.Бюджет = Справочники.БюджетыПУ.НайтиСоздатьБюджет(ПоляЗадачи[БФТ_ОбщиеМетодыАРМаСборокНаКлиентеНаСервере.КастомныеПоляJIRA("Бюджет")]);
				
				Версии = Справочники.Релизы.НайтиСоздатьВерсии(ПоляЗадачи["fixVersions"]);
				ЗадачаОбъект.Версии.Очистить();
				Для Каждого Релиз Из Версии Цикл
					НовСтр = ЗадачаОбъект.Версии.Добавить();  
					НовСтр.Версия = Релиз;
				КонецЦикла;
				
				// Если установили один раз (первый) больше сбрасываться не должно
				Если Не ЗадачаОбъект.ДатуЗавершенияУстановилАвтор Тогда
					ЗадачаОбъект.ДатуЗавершенияУстановилАвтор = ЗадачаОбъект.ЭтоНовая И ЗначениеЗаполнено(ЗадачаОбъект.ПлановаяДатаЗавершения);
				КонецЕсли;
				ЗадачаОбъект.Записать();
				
				
				// т.к. что-то менялось в задаче, мы удаляем по задаче информацию из журнала уведомлений
				Набор = РегистрыСведений.ЖурналОтправкиУведомлений.СоздатьНаборЗаписей();
				Набор.Отбор.Задача.Установить(ЗадачаОбъект.Ссылка);	
				Набор.Записать();
				
				ЗафиксироватьТранзакцию();
			Исключение
				ОтменитьТранзакцию();
				ВызватьИсключение;
			КонецПопытки;
		КонецЦикла;	
		
		//Возврат Сабтаски;
	КонецФункции
	
	//Функция ПолучитьНомераЗадачНеЗакрытые()
	//	Запрос = Новый Запрос;
	//	Запрос.Текст = 
	//	"ВЫБРАТЬ
	//	|	Задачи.Код КАК Номер
	//	|ИЗ
	//	|	Справочник.Задачи_ КАК Задачи
	//	|ГДЕ
	//	|	Задачи.Родитель = ЗНАЧЕНИЕ(Справочник.Задачи_.ПустаяСсылка)
	//	|	И НЕ Задачи.Статус В (&СтатусыИсключения)";
	//	
	//	Запрос.УстановитьПараметр("СтатусыИсключения", СтрРазделить("Закрыт", ","));
	//	
	//	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Номер");
	//КонецФункции
	
	Функция ПоследняяДатаСоздания()
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Задачи.ДатаСоздания КАК ДатаСоздания
		|ИЗ
		|	Справочник.Задачи КАК Задачи
		|ГДЕ
		|	НЕ Задачи.ПометкаУдаления
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДатаСоздания УБЫВ";                            
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Возврат Выборка.ДатаСоздания;	
		КонецЕсли;
	КонецФункции
	
#КонецЕсли