/////////////// Защита модуля ///////////////
// @protect                                //
/////////////////////////////////////////////

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
  ПрочитатьТаблицуПараметровНаСервере();
  ОбновитьПредпросмотрНаСервере(); 
	Если Не ЗначениеЗаполнено(Объект.ИсполняемыйФайл) Тогда
		Объект.ИсполняемыйФайл = ?(ЗначениеЗаполнено(Объект.Владелец), Объект.Владелец.ИсполняемыйФайл, "");
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
  
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	ЗаписатьТаблицуПараметровНаСервере(ТекущийОбъект);
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	ПрочитатьТаблицуПараметровНаСервере();
КонецПроцедуры


#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ШаблонПриИзменении(Элемент)
  ОбновитьТаблицуПараметров();
  ОбновитьПредпросмотрНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ИсполняемыйФайлНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ПолучитьИсполняемыйФайл();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПараметрыВыполнения

&НаКлиенте
Процедура ПараметрыВыполненияРежимВводаПараметраПриИзменении(Элемент)
	ТекущиеДанные = Элементы.ПараметрыВыполнения.ТекущиеДанные;
  Если ТекущиеДанные = Неопределено Тогда
    Возврат;  
  КонецЕсли;
  
  ТекущиеДанные.ЗначениеПараметра = "";
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыВыполненияПриИзменении(Элемент)
  ЭтаФорма.Модифицированность = Истина;
КонецПроцедуры


&НаКлиенте
Процедура ПараметрыВыполненияЗначениеПараметраНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
  //СтандартнаяОбработка = Ложь;
  ТекущиеДанные = Элементы.ПараметрыВыполнения.ТекущиеДанные;
  Если ТекущиеДанные = Неопределено Тогда
    Возврат;  
  КонецЕсли;
	
  Элементы.ПараметрыВыполненияЗначениеПараметра.СписокВыбора.Очистить();
  Элементы.ПараметрыВыполненияЗначениеПараметра.РежимВыбораИзСписка = Ложь;
  Если ТекущиеДанные.РежимВводаПараметра = ПредопределенноеЗначение("Перечисление.БФТ_РежимВводаПараметра.ВыборКаталога") Тогда
    ОткрытьДиалоговоеОкно(ТекущиеДанные, "Выберите каталог", РежимДиалогаВыбораФайла.ВыборКаталога);
  ИначеЕсли ТекущиеДанные.РежимВводаПараметра = ПредопределенноеЗначение("Перечисление.БФТ_РежимВводаПараметра.ВыборФайла") Тогда
    ОткрытьДиалоговоеОкно(ТекущиеДанные, "Выберите файл", РежимДиалогаВыбораФайла.Открытие);
  ИначеЕсли ТекущиеДанные.РежимВводаПараметра = ПредопределенноеЗначение("Перечисление.БФТ_РежимВводаПараметра.ВыполнитьМетод") Тогда
    Методы = ПолучитьСписокМетодов();
    Элементы.ПараметрыВыполненияЗначениеПараметра.СписокВыбора.ЗагрузитьЗначения(Методы);
    Элементы.ПараметрыВыполненияЗначениеПараметра.РежимВыбораИзСписка = Истина;
  ИначеЕсли ТекущиеДанные.РежимВводаПараметра = ПредопределенноеЗначение("Перечисление.БФТ_РежимВводаПараметра.ВнешнийПараметр")  Тогда
    Методы = ПолучитьСписокВнешнихПараметров();
    Элементы.ПараметрыВыполненияЗначениеПараметра.СписокВыбора.ЗагрузитьЗначения(Методы);
    Элементы.ПараметрыВыполненияЗначениеПараметра.РежимВыбораИзСписка = Истина;
  КонецЕсли;
  
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыВыполненияПередУдалением(Элемент, Отказ)
  Отказ = Истина;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОбновитьПредпросмотр(Команда)
  Если ЭтаФорма.Модифицированность Тогда
    ПоказатьВопрос(Новый ОписаниеОповещения("ОбновитьПредпросмотрЗавершение", ЭтотОбъект), "Будет произведено сохранение элемента.
    |Продолжить?", РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Да, "Выберите действия");
  Иначе
    ОбновитьПредпросмотрНаСервере();
  КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьНастройки(Команда)
	ОткрытьФорму("Справочник.БФТ_МетодыРаботыСРепозиторием.Форма.ФормаВыводаРезультатаТеста",, ЭтаФорма,,,, Новый ОписаниеОповещения("ПроверитьНастройкиЗавершение", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Функция ОбновитьПредпросмотрНаСервере()
   Предпросмотр = Справочники.БФТ_МетодыРаботыСРепозиторием.СформироватьКомандуВыполнения(Объект.Ссылка,, Ложь);
КонецФункции

&НаКлиенте
Процедура ОбновитьТаблицуПараметров()
  Если Не ЗначениеЗаполнено(Объект.Шаблон) Тогда
    Объект.ПараметрыВыполнения.Очистить();
    Возврат;
  КонецЕсли;
  
  Индексы = ПолучитьИндексыПараметров();
  Для Каждого ИД Из Индексы Цикл 
    Отбор = Новый Структура("ПорядковыйНомерПараметра", ИД);
    Если Объект.ПараметрыВыполнения.НайтиСтроки(Отбор).Количество() = 0 Тогда
      НовСтр = Объект.ПараметрыВыполнения.Добавить();
      НовСтр.РежимВводаПараметра = ПредопределенноеЗначение("Перечисление.БФТ_РежимВводаПараметра.Произвольно"); // по умолчанию
      НовСтр.ПорядковыйНомерПараметра = ИД;
    КонецЕсли;
  КонецЦикла;
  
  // В шаблоне могло стать индексов меньше чем было до изменений.
  // Удаляем из таблице индексы которых нет в массиве.
  Для а = -(Объект.ПараметрыВыполнения.Количество()-1) По 0 Цикл
    Если Индексы.Найти(Объект.ПараметрыВыполнения[-а].ПорядковыйНомерПараметра) = Неопределено Тогда
      Объект.ПараметрыВыполнения.Удалить(-а);
    КонецЕсли;
  КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ЗаписатьТаблицуПараметровНаСервере(ТекущийОбъект)
	Если ТекущийОбъект.СерверныеНастройки Тогда
		Возврат;
	КонецЕсли;
			
	
	// Параметры с режимом ввода ВыполнитьМетод ВнешнийПараметр
	// не привязаны к текущему пользователю, по этому имеет смысл их сохранять в объекте
	Для Каждого Стр Из ТекущийОбъект.ПараметрыВыполнения Цикл
		Если Стр.РежимВводаПараметра = Перечисления.БФТ_РежимВводаПараметра.ВыполнитьМетод
			ИЛИ Стр.РежимВводаПараметра = Перечисления.БФТ_РежимВводаПараметра.ВнешнийПараметр Тогда
			Продолжить;	
		КонецЕсли;
		
		ХранилищеОбщихНастроек.Сохранить(Строка(ТекущийОбъект.Ссылка.УникальныйИдентификатор()) , Строка(Стр.ПорядковыйНомерПараметра), Стр.ЗначениеПараметра);
		Стр.ЗначениеПараметра = "";
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьТаблицуПараметровНаСервере()
	Если Объект.СерверныеНастройки Тогда
		Возврат;
	КонецЕсли;
	
	// Параметры с режимом ввода ВыполнитьМетод ВнешнийПараметр
	// не привязаны к текущему пользователю, по этому имеет смысл их сохранять в объекте
	Для Каждого Стр Из Объект.ПараметрыВыполнения Цикл
		Если Стр.РежимВводаПараметра = Перечисления.БФТ_РежимВводаПараметра.ВыполнитьМетод
			ИЛИ Стр.РежимВводаПараметра = Перечисления.БФТ_РежимВводаПараметра.ВнешнийПараметр Тогда
			Продолжить;	
		КонецЕсли;
		
		Стр.ЗначениеПараметра = ХранилищеОбщихНастроек.Загрузить(Строка(Объект.Ссылка.УникальныйИдентификатор()) , Строка(Стр.ПорядковыйНомерПараметра));
	КонецЦикла;
	
КонецПроцедуры


&НаКлиенте
Функция ПолучитьИндексыПараметров(НачальнаяПозиция = 1)
  Результат = Новый Массив();
  
  Если НачальнаяПозиция > СтрДлина(Объект.Шаблон) Тогда
    Возврат Результат;
  КонецЕсли;
    
  ОткрывающаяСкобка = СтрНайти(Объект.Шаблон, "{",, НачальнаяПозиция) +1;
  ЗакрывающаяСкобка = СтрНайти(Объект.Шаблон, "}",, НачальнаяПозиция);
  Если ОткрывающаяСкобка = 1 И ЗакрывающаяСкобка = 0 Тогда
    Возврат Результат;
  ИначеЕсли ОткрывающаяСкобка > 1 И ОткрывающаяСкобка > ЗакрывающаяСкобка Тогда
    ВызватьИсключение "Нарушена последовательность открывающихся и закрывающихся скобок";  
  КонецЕсли;
  
  ПараметрСтрокой = Сред(Объект.Шаблон, ОткрывающаяСкобка, ЗакрывающаяСкобка - ОткрывающаяСкобка);
  Параметр = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(ПараметрСтрокой); 
  Если Параметр = Неопределено ИЛИ Параметр = 0 Тогда
    ВызватьИсключение СтрШаблон("Ошибочное значение параметра ""%1"", параметр может быть цифрой больше 0", ПараметрСтрокой);
  КонецЕсли;
  
  Результат.Добавить(Параметр);
  
  Возврат ОбщегоНазначенияКлиентСервер.СлитьМассивы(Результат, ПолучитьИндексыПараметров(ЗакрывающаяСкобка +1));
КонецФункции


&НаКлиенте                                                          
Процедура ОткрытьДиалоговоеОкно(ТекущиеДанные, Заголовок, РежимДиалога)
  #Если ВебКлиент Тогда 
    Каталог = КаталогДокументов();
  #Иначе
    Каталог = КаталогПрограммы();
  #КонецЕсли 
  
  Если ЗначениеЗаполнено(ТекущиеДанные.ЗначениеПараметра) Тогда
    Файл = Новый Файл(ТекущиеДанные.ЗначениеПараметра); 
    Если Файл.Существует() Тогда
      Каталог = Файл.Путь;
    КонецЕсли;
  КонецЕсли;
  
  Диалог            = Новый ДиалогВыбораФайла(РежимДиалога);
  Диалог.Заголовок  = Заголовок;
  Диалог.МножественныйВыбор = Ложь;
  Диалог.Каталог = Каталог; 
	
	ДопПарам = Новый Структура("ТекущиеДанные", ТекущиеДанные);
	ОО = Новый ОписаниеОповещения("ЗавершениеВыбораПараметра", ЭтаФорма, ДопПарам);
  Диалог.Показать(ОО);

	//Если Диалог.Выбрать() Тогда
	//  Возврат ?(РежимДиалога = РежимДиалогаВыбораФайла.ВыборКаталога, Диалог.Каталог, Диалог.ПолноеИмяФайла);
	//КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ПолучитьСписокМетодов()
  Возврат Справочники.БФТ_МетодыРаботыСРепозиторием.ПубличныеМетоды(); 
КонецФункции

&НаСервере
Функция ПолучитьСписокВнешнихПараметров()
  Возврат Справочники.БФТ_МетодыРаботыСРепозиторием.ВнешниеПараметры(); 
КонецФункции

&НаКлиенте
Процедура ОбновитьПредпросмотрЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
  Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
    ЭтаФорма.Записать();
    ОбновитьПредпросмотрНаСервере();      
  КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьИсполняемыйФайл()
  #Если ВебКлиент Тогда 
    Каталог = КаталогДокументов();
  #Иначе
    Каталог = КаталогПрограммы();
  #КонецЕсли 
  
  Если ЗначениеЗаполнено(Объект.ИсполняемыйФайл) Тогда
    Файл = Новый Файл(Объект.ИсполняемыйФайл);  
    Каталог = Файл.Путь;
  КонецЕсли;
  
  Диалог            = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
  Диалог.Заголовок  = "Выберите исполняемый файл";
  Диалог.Фильтр     = "*.exe|*.exe";   
  Диалог.МножественныйВыбор = Ложь;
  Диалог.Каталог = Каталог; 
  
  ОО = Новый ОписаниеОповещения("ЗавершениеВыбораИспФайла", ЭтаФорма);
  Диалог.Показать(ОО);
КонецПроцедуры

&НаКлиенте
Процедура ЗавершениеВыбораИспФайла(ВыбранныеФайлы, ДопПараметры) Экспорт 
	Если ВыбранныеФайлы <> Неопределено И ВыбранныеФайлы.Количество() = 1 Тогда
		Объект.ИсполняемыйФайл = ВыбранныеФайлы[0];
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗавершениеВыбораПараметра(ВыбранныеФайлы, ДопПараметры) Экспорт
	Перем ТекущиеДанные;
	
	Если ДопПараметры.Свойство("ТекущиеДанные", ТекущиеДанные) И ТекущиеДанные <> Неопределено
		И ВыбранныеФайлы <> Неопределено И ВыбранныеФайлы.Количество() = 1 Тогда
		ТекущиеДанные.ЗначениеПараметра = ВыбранныеФайлы[0]
	КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура ПроверитьНастройкиЗавершение(Результат, ДополнительныеПараметры) Экспорт
  Рез = Результат; // Не нужно ничего делать.	
КонецПроцедуры





#КонецОбласти
