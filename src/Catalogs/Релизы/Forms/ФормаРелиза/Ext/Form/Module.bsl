&НаКлиенте
Перем ИдентификаторФЗ, ИндексТекущегоЗадания, ЗапущенПроцесс, ПредыдущаяВерсия;


&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	УстановитьДефолтныеПараметрыДинСписка();
	//ДатаРелизаДоИзменений = Объект.ДатаРелиза;
	СтрокаПодключенияКБазеПроверкиРезиза = Константы.СтрокаПодключенияКБазеПроверкиРезиза.Получить();
	
	//ПутьККаталогуСРелизом = ХранилищеОбщихНастроек.Загрузить("Путь сохранения файлов сборки", "ПутьККаталогуСРелизом");
КонецПроцедуры

&НаСервере
Процедура УстановитьДефолтныеПараметрыДинСписка()
	ЗадачиПопавшиеВРелиз.Параметры.УстановитьЗначениеПараметра("КонечныеСтатусы", СтрРазделить("Закрыт,Сделан,Предоставлено ПР", ","));
	ЗадачиПопавшиеВРелиз.Параметры.УстановитьЗначениеПараметра("ТекРелиз", Объект.Ссылка);
	ЗадачиПопавшиеВРелиз.Параметры.УстановитьЗначениеПараметра("ПрименитьОтборСборка", Ложь);	
	ЗадачиПопавшиеВРелиз.Параметры.УстановитьЗначениеПараметра("ПрименитьОтборВыпуск", Ложь);
	ЗадачиПопавшиеВРелиз.Параметры.УстановитьЗначениеПараметра("НачалоРелиза", ПолучитьДатуПоследнегоНеВыпущеногоРелиза(Объект.ДатаНачала));	
	ЗадачиПопавшиеВРелиз.Параметры.УстановитьЗначениеПараметра("ОкончаниеРелиза", Объект.ДатаРелиза);	
	ЗадачиПопавшиеВРелиз.Параметры.УстановитьЗначениеПараметра("ТекРелизВыпущен", Объект.РелизВыпущен);	
	ЗадачиПопавшиеВРелиз.Параметры.УстановитьЗначениеПараметра("ТекРелизСобран", Объект.РелизСобран);	
	ЗадачиПопавшиеВРелиз.Параметры.УстановитьЗначениеПараметра("ОтборСтатус", "");	
	ЗадачиПопавшиеВРелиз.Параметры.УстановитьЗначениеПараметра("ОтборВерсия", Неопределено);	
КонецПроцедуры

&НаСервере
Процедура УстановитьДефолтныеПараметрыЗапроса(Параметры)
	Параметры.Вставить("КонечныеСтатусы", СтрРазделить("Закрыт,Сделан,Предоставлено ПР", ","));
	Параметры.Вставить("ТекРелиз", Объект.Ссылка);
	Параметры.Вставить("ПрименитьОтборСборка", Ложь);	
	Параметры.Вставить("ПрименитьОтборВыпуск", Ложь);
	Параметры.Вставить("НачалоРелиза", ПолучитьДатуПоследнегоНеВыпущеногоРелиза(Объект.ДатаНачала));	
	Параметры.Вставить("ОкончаниеРелиза", Объект.ДатаРелиза);	
	Параметры.Вставить("ТекРелизВыпущен", Объект.РелизВыпущен);	
	Параметры.Вставить("ТекРелизСобран", Объект.РелизСобран);	
	Параметры.Вставить("ОтборСтатус", "");	
	Параметры.Вставить("ОтборВерсия", Неопределено);	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДатуПоследнегоНеВыпущеногоРелиза(ДатаНачала)
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Релизы.ДатаНачала КАК ДатаНачала
		|ИЗ
		|	Справочник.Релизы КАК Релизы
		|ГДЕ
		|	НЕ Релизы.РелизВыпущен
		|	И Релизы.ДатаНачала > ДАТАВРЕМЯ(1, 1, 1)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДатаРелиза";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() И Выборка.ДатаНачала < ДатаНачала Тогда
		Возврат Выборка.ДатаНачала + 24*60*60;
	Иначе
		Возврат ДатаНачала;
	КонецЕсли;
КонецФункции

&НаКлиенте
Процедура СобратьИВыпустить(Команда)
	Если Не Объект.РелизСобран И Объект.ДатаНачала <> НачалоДня(ТекущаяДата()) Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("Вопрос1Завершение", ЭтотОбъект), "Сборка релиза осуществляется не по плану, сместить даты в JIRA?", РежимДиалогаВопрос.ДаНетОтмена);
    Возврат;
	КонецЕсли;
	
	Если Объект.РелизСобран И Не Объект.РелизВыпущен И Объект.ДатаРелиза <> НачалоДня(ТекущаяДата()) Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("Вопрос2Завершение", ЭтотОбъект), "Выпуск релиза осуществляется не по плану, сместить даты в JIRA?", РежимДиалогаВопрос.ДаНетОтмена);
    Возврат;
	КонецЕсли;
	
	СобратьИВыпуститьФрагмент();
КонецПроцедуры

&НаКлиенте
Процедура Вопрос1Завершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Объект.ДатаНачала	= НачалоДня(ТекущаяДата());
	ИначеЕсли РезультатВопроса = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	
	
	СобратьИВыпуститьФрагмент();

КонецПроцедуры

&НаКлиенте
Процедура Вопрос2Завершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Объект.ДатаРелиза = НачалоДня(ТекущаяДата());
	ИначеЕсли РезультатВопроса = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	
	
	СобратьИВыпуститьФрагмент();

КонецПроцедуры

&НаКлиенте
Процедура СобратьИВыпуститьФрагмент()
	Перем ОО, Ошибки, Ф;
	
	сообщить("Собираем");
	Возврат;
	
	Ошибки = Новый Массив();
	Если Не Объект.РелизСобран И Элементы.грОшибкаСборки.Видимость Тогда
		Ошибки.Добавить("Существуют задачи запланированные, но не сделанные в текущем релизе");
	КонецЕсли;
	Если Объект.РелизСобран И Не Объект.РелизВыпущен И Элементы.грОшибкаВыпуска.Видимость Тогда
		Ошибки.Добавить("Существуют задачи не в конечных статусах");
	КонецЕсли;
	Если Объект.РелизСобран И Не Объект.РелизВыпущен И Элементы.грНастройкиПодключенияКБазам.Видимость Тогда
		Ошибки.Добавить("Заполните настройки подключения");
	КонецЕсли;
	Если ЭтаФорма.Модифицированность Тогда
		Ошибки.Добавить("Необходимо сохраниться");  // так надо, потому что при сохранении есть диалоговое окно вопроса
	КонецЕсли;
	
	Если Ошибки.Количество() > 0 Тогда
		Сообщить("Ошибки:
		|" + СтрСоединить(Ошибки, Символы.ПС));
		Возврат;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(ОбщегоНазначенияСервер.ПолучитьЗначениеКонстанты("ПутьККаталогуСФайламиРасширений")) Тогда
		ВызватьИсключение "Заполните константу ""Путь к каталогу с файлами расширения""";
	КонецЕсли;
	Если Не ЗначениеЗаполнено(ОбщегоНазначенияСервер.ПолучитьЗначениеКонстанты("ПутьККаталогуШаблонов")) Тогда
		ВызватьИсключение "Заполните константу ""Путь к каталогу шаблонов""";
	КонецЕсли;
	Если Не ЗначениеЗаполнено(ОбщегоНазначенияСервер.ПолучитьЗначениеКонстанты("ПутьККаталогуSVN")) Тогда
		ВызватьИсключение "Заполните константу ""Путь к каталогу SVN""";
	КонецЕсли;
	
	//Если Объект.РелизСобран И Не Объект.РелизВыпущен Тогда
	//	ПредыдущаяВерсия = ПолучитьПредыдущуюВерсию();
	//КонецЕсли;
	
	
	Ф = Новый Файл(ПутьККаталогуСРелизом);
	ОО = Новый ОписаниеОповещения("ПроверкаСуществованияЗавершение", ЭтотОбъект);
	Ф.НачатьПроверкуСуществования(ОО);

КонецПроцедуры

&НаКлиенте
Процедура ВыборКаталогаЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт 
	Если ВыбранныеФайлы <> Неопределено И ВыбранныеФайлы.Количество() = 1 Тогда
		ПутьККаталогуСРелизом	= ВыбранныеФайлы[0];
		ПродолжитьВыпуск();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаСуществованияЗавершение(Существует, ДополнительныеПараметры) Экспорт 
	Если Не Существует Тогда
		Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
		ОО = Новый ОписаниеОповещения("ВыборКаталогаЗавершение", ЭтотОбъект);
		Диалог.Показать(ОО);
		Возврат;
	Иначе
		//СохранитьНастройкиНаСервере();
	КонецЕсли;
	
	ПродолжитьВыпуск();
КонецПроцедуры

&НаСервере
Процедура СохранитьНастройкиНаСервере()
	ХранилищеОбщихНастроек.Сохранить("Путь сохранения файлов сборки", "ПутьККаталогуСРелизом", ПутьККаталогуСРелизом);
КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьВыпуск()
	ЗапущенПроцесс = Истина;
	Элементы.Вкладки.ТекущаяСтраница = Элементы.грПроцесс;
	Элементы.Собрать.Доступность = Ложь;
	Элементы.Выпустить.Доступность = Ложь;
	
	ПроверкаИЗапускСледующегоЗадания();
	ЭтаФорма.ПодключитьОбработчикОжидания("ПроверкаИЗапускСледующегоЗадания", 1, Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ВыпускВерсииВJIRA()
	Данные = Новый Структура("released", Истина);
	ВзаимодействиеC_JIRA_КлиентСервер.ИзменитьДанныеВерсии(Формат(Объект.Код, "ЧГ="), Объект.Наименование, Данные);
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОписаниеВерсииВJIRA(ТекстОписания)
	Данные = Новый Структура("description", ТекстОписания);
	ВзаимодействиеC_JIRA_КлиентСервер.ИзменитьДанныеВерсии(Формат(Объект.Код, "ЧГ="), Объект.Наименование, Данные);
КонецПроцедуры

&НаСервере
Функция ПолучитьЗадачи(Статус = Неопределено, Версия = Неопределено)
	Запрос = Новый Запрос(ЗадачиПопавшиеВРелиз.ТекстЗапроса);
	УстановитьДефолтныеПараметрыЗапроса(Запрос.Параметры);
	Если Статус <> Неопределено Тогда
		Запрос.Параметры.Вставить("ОтборСтатус", Статус);
	КонецЕсли;
	Если Версия <> Неопределено Тогда
		Запрос.Параметры.Вставить("ОтборВерсия", Версия);
	КонецЕсли;
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Задача");
КонецФункции

&НаСервере
Процедура ИнициализироватьШагиСборки()
		
	/////////////////////////////////////////////////////////////////////////
	СтрокаЛогаРодитель = Задания.ПолучитьЭлементы().Добавить();
	СтрокаЛогаРодитель.Комментарий = СтрШаблон("Выгрузка актуальной конфигурации из хранилища ""%1""", Константы.АдресХранилища.Получить());
	СтрокаЛогаРодитель.АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, Новый УникальныйИдентификатор());
	СтрокаЛогаРодитель.Картинка = 0;
	СтрокаЛогаРодитель.Метод = "СтартВыгрузкиНаКлиенте";
	СтрокаЛогаРодитель.ОбратныйМетод = "ПолучитьКонфигурациюИзВременногоХранилища";
	
	НовСтр = СтрокаЛогаРодитель.ПолучитьЭлементы().Добавить();
	НовСтр.Комментарий = "Создание временной файловой БД";
	НовСтр.Метод = "СоздатьВременнуюБД";
	НовСтр.Картинка = 0;
	НовСтр = СтрокаЛогаРодитель.ПолучитьЭлементы().Добавить();
	НовСтр.Комментарий = "Получить конфигурацию из хранилища";
	НовСтр.Метод = "ПолучитьКонфигурациюИзХранилища";
	НовСтр.Картинка = 0;
	
	//+++Д Ганеев 13.04.2018 !dlHhsq!+	
	НовСтр = СтрокаЛогаРодитель.ПолучитьЭлементы().Добавить();
	НовСтр.Комментарий = "Обновления из репозитория (SVN)";
	НовСтр.Метод = СтрШаблон("ОбновленияРасширенияИзРепозиторияДоп_%1", "ФункцииРасширения");
	НовСтр.Картинка = 0;
	
	НовСтр = СтрокаЛогаРодитель.ПолучитьЭлементы().Добавить();
	НовСтр.Комментарий = "Обновление макета синхронизатора (тексты шаблонов)";
	НовСтр.Метод = СтрШаблон("ОбновлениеШаблоновРасширенияДоп_%1", "ФункцииРасширения");                  
	НовСтр.Картинка = 0;
	
	НовСтр = СтрокаЛогаРодитель.ПолучитьЭлементы().Добавить();
	НовСтр.Комментарий = "Помещение макета в репозиторий (SVN)";
	НовСтр.Метод = "Commit_Макета";                  
	НовСтр.Картинка = 0;

	
	/////////////////////////////////////////////////////////////////////////
	Для Каждого ИмяРасширения Из СтрРазделить("ВерсияЦПК,ФункцииРасширения,ТиповыеЦПК", ",") Цикл
		СтрокаЛогаРодитель = Задания.ПолучитьЭлементы().Добавить();
		СтрокаЛогаРодитель.Комментарий = СтрШаблон("Сборка расширения (%1)", ИмяРасширения);
		СтрокаЛогаРодитель.АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, Новый УникальныйИдентификатор());
		СтрокаЛогаРодитель.Картинка = 0;
		СтрокаЛогаРодитель.Метод = "СборкаРасширений";
		СтрокаЛогаРодитель.ДопПараметр = ИмяРасширения;
		СтрокаЛогаРодитель.ОбратныйМетод = "ПолучитьРасширениеИзВременногоХранилища";
		
		НовСтр = СтрокаЛогаРодитель.ПолучитьЭлементы().Добавить();
		НовСтр.Комментарий = "Обновления расширения из репозитория";
		НовСтр.Метод = СтрШаблон("ОбновленияРасширенияИзРепозитория_%1", ИмяРасширения);
		НовСтр.Картинка = 0;
		НовСтр = СтрокаЛогаРодитель.ПолучитьЭлементы().Добавить();
		НовСтр.Комментарий = "Создание временной файловой БД";
		НовСтр.Метод = СтрШаблон("СоздатьВременнуюБД_%1", ИмяРасширения);
		НовСтр.Картинка = 0;
		НовСтр = СтрокаЛогаРодитель.ПолучитьЭлементы().Добавить();
		НовСтр.Комментарий = "Обновление расширения";
		НовСтр.Метод = СтрШаблон("ОбновлениеРасширения_%1", ИмяРасширения);                  
		НовСтр.Картинка = 0;
	КонецЦикла;

	/////////////////////////////////////////////////////////////////////////
	СтрокаЛогаРодитель = Задания.ПолучитьЭлементы().Добавить();
	СтрокаЛогаРодитель.Комментарий = "Инкремент версии АЦК БУ";
	СтрокаЛогаРодитель.Картинка = 0;
	СтрокаЛогаРодитель.Метод = "ОбновлениеВерсииАЦКБУ";
	
	/////////////////////////////////////////////////////////////////////////
	СтрокаЛогаРодитель = Задания.ПолучитьЭлементы().Добавить();
	СтрокаЛогаРодитель.Комментарий = "Обновление версий в JIRA";
	СтрокаЛогаРодитель.Картинка = 0;
	СтрокаЛогаРодитель.Метод = "ОбновлениеЗадачВ_JIRA_Сборка";
	
	/////////////////////////////////////////////////////////////////////////
	Для Каждого Стр Из Объект.БазыДляОбновления Цикл
		Если Не ЗначениеЗаполнено(Стр.СтрокаПодключения) Тогда
			Продолжить;	
		КонецЕсли;
		
		СтрокаЛогаРодитель = Задания.ПолучитьЭлементы().Добавить();
		СтрокаЛогаРодитель.Комментарий = СтрШаблон("Обновление базы (%1)", Стр.СтрокаПодключения);
		СтрокаЛогаРодитель.АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, Новый УникальныйИдентификатор());
		СтрокаЛогаРодитель.Картинка = 0;
		СтрокаЛогаРодитель.Метод = "ОбновитьБазу";
		СтрокаЛогаРодитель.ДопПараметр = Стр.СтрокаПодключения;
		
		НовСтр = СтрокаЛогаРодитель.ПолучитьЭлементы().Добавить();
		НовСтр.Комментарий = "Обновления конфигурации";
		НовСтр.Метод = "ОбновленияКонфигурации";
		НовСтр.Картинка = 0;
		НовСтр = СтрокаЛогаРодитель.ПолучитьЭлементы().Добавить();
		НовСтр.Комментарий = "Обновление расширений";
		НовСтр.Метод = "ОбновлениеРасширений";
		НовСтр.Картинка = 0;
	КонецЦикла;

	
	/////////////////////////////////////////////////////////////////////////
	Если ПереноситьОграничения Тогда
		СтрокаЛогаРодитель = Задания.ПолучитьЭлементы().Добавить();
		СтрокаЛогаРодитель.Комментарий = "Перенос ограничений по бюджетам";
		СтрокаЛогаРодитель.Картинка = 0;
		СтрокаЛогаРодитель.Метод = "ПереносОграниченийПоБюджетам";
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьШагиВыпуска()
	
	/////////////////////////////////////////////////////////////////////////
	Для Каждого ИмяРасширения Из СтрРазделить("ВерсияЦПК,ФункцииРасширения", ",") Цикл
		СтрокаЛогаРодитель = Задания.ПолучитьЭлементы().Добавить();
		СтрокаЛогаРодитель.Комментарий = СтрШаблон("Выгрузка расширения (%1)", ИмяРасширения);
		СтрокаЛогаРодитель.АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, Новый УникальныйИдентификатор());
		СтрокаЛогаРодитель.Картинка = 0;
		СтрокаЛогаРодитель.Метод = "СтартВыгрузкиРасширенийНаКлиенте";
		СтрокаЛогаРодитель.ОбратныйМетод = "ПолучитьРасширениеИзВременногоХранилища";
		СтрокаЛогаРодитель.ДопПараметр = ИмяРасширения;
		
		//НовСтр = СтрокаЛогаРодитель.ПолучитьЭлементы().Добавить();
		//НовСтр.Комментарий = СтрШаблон("Выгрузка расширения (%1)", ИмяРасширения);
		//НовСтр.Метод = СтрШаблон("ВыгрузкаРасширений_%1", ИмяРасширения);                  
		//НовСтр.Картинка = 0;
	КонецЦикла;

	
	//СтрокаЛогаРодитель.ДопПараметр = ПредыдущаяВерсия.Наименование;
	
	//НовСтр = СтрокаЛогаРодитель.ПолучитьЭлементы().Добавить();
	//НовСтр.Комментарий = "Выгрузка расширений";
	//НовСтр.Метод = "ВыгрузкаРасширений";
	//НовСтр.Картинка = 0;
	//НовСтр = СтрокаЛогаРодитель.ПолучитьЭлементы().Добавить();
	//НовСтр.Комментарий = "Выгрузка конфигурации";          
	//НовСтр.Метод = "ВыгрузкаКонфигурации";
	//НовСтр.Картинка = 0;
	
	СтрокаЛогаРодитель = Задания.ПолучитьЭлементы().Добавить();
	СтрокаЛогаРодитель.Комментарий = "Выгрузка конфигурации";
	СтрокаЛогаРодитель.АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, Новый УникальныйИдентификатор());
	СтрокаЛогаРодитель.Картинка = 0;
	СтрокаЛогаРодитель.Метод = "СтартВыгрузкиКонфигурацииНаКлиенте";
	СтрокаЛогаРодитель.ОбратныйМетод = "ПолучитьКонфигурациюИзВременногоХранилища";
	//СтрокаЛогаРодитель.ДопПараметр = ИмяРасширения;
	
	/////////////////////////////////////////////////////////////////////////
	СтрокаЛогаРодитель = Задания.ПолучитьЭлементы().Добавить();
	СтрокаЛогаРодитель.Комментарий = "Сохранение настроек";
	СтрокаЛогаРодитель.АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, Новый УникальныйИдентификатор());
	СтрокаЛогаРодитель.Картинка = 0;
	СтрокаЛогаРодитель.Метод = "СохранениеНастроек";
	СтрокаЛогаРодитель.ОбратныйМетод = "ПолучитьФайлНастроекИзВременногоХранилища";
	
	/////////////////////////////////////////////////////////////////////////
	СтрокаЛогаРодитель = Задания.ПолучитьЭлементы().Добавить();
	СтрокаЛогаРодитель.Комментарий = "Обновление версий в JIRA";
	СтрокаЛогаРодитель.Картинка = 0;
	СтрокаЛогаРодитель.Метод = "ОбновлениеЗадачВ_JIRA_Выпуск";
КонецПроцедуры

&НаКлиенте
Процедура ИнициализироватьШаги()
	Если ЗапущенПроцесс Тогда
		Сообщить("Дождитесь окончания сборки релиза");
		Возврат;	
	КонецЕсли;
	
	Задания.ПолучитьЭлементы().Очистить();

	Если Не Объект.РелизСобран Тогда
		ИнициализироватьШагиСборки();
	ИначеЕсли Объект.РелизСобран И Не Объект.РелизВыпущен Тогда
		ИнициализироватьШагиВыпуска();
	КонецЕсли;
КонецПроцедуры                                       

&НаСервере
Функция ПолучитьПредыдущуюВерсию()
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Релизы.Ссылка КАК Ссылка,
		|	Релизы.Наименование КАК Наименование
		|ИЗ
		|	Справочник.Релизы КАК Релизы
		|ГДЕ
		|	Релизы.РелизВыпущен
		|	И Релизы.ДатаРелиза < &ТекДата
		|
		|УПОРЯДОЧИТЬ ПО
		|	Релизы.ДатаРелиза УБЫВ";
	
	Запрос.УстановитьПараметр("ТекДата", ТекущаяДатаСеанса());
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Наименование;
	Иначе
		Возврат ""; //Справочники.Релизы.ПустаяСсылка();
	КонецЕсли;
КонецФункции


#Область ПроцессСборки

&НаКлиенте
Процедура СохранениеНастроек(Строка)
	СохранениеНастроекНаСервере(Строка.АдресХранилища, Строка.ИдентификаторЗадания);
	ЭтаФорма.ПодключитьОбработчикОжидания("ПроверкаВыполненияЗаданий", 1, Ложь);	
КонецПроцедуры


&НаКлиенте
Процедура СтартВыгрузкиНаКлиенте(Строка)
	СтартВыгрузки(Строка.АдресХранилища, Строка.ИдентификаторЗадания);
	ЭтаФорма.ПодключитьОбработчикОжидания("ПроверкаВыполненияЗаданий", 1, Ложь);	
КонецПроцедуры

&НаКлиенте
Процедура СтартВыгрузкиКонфигурацииНаКлиенте(Строка)
	СтартВыгрузкиКонфигурации(Строка.АдресХранилища, Строка.ИдентификаторЗадания);
	ЭтаФорма.ПодключитьОбработчикОжидания("ПроверкаВыполненияЗаданий", 1, Ложь);	
КонецПроцедуры

&НаКлиенте
Процедура СтартВыгрузкиРасширенийНаКлиенте(Строка)
	СтартВыгрузкиКонфигурации(Строка.АдресХранилища, Строка.ИдентификаторЗадания, Строка.ДопПараметр);
	ЭтаФорма.ПодключитьОбработчикОжидания("ПроверкаВыполненияЗаданий", 1, Ложь);	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьБазу(Строка)
	Попытка
		ОО = Новый ОписаниеОповещения("НачатьПоискФайловЗавершение", ЭтотОбъект, Новый Структура("Строка", Строка));
		НачатьПоискФайлов(ОО, ПутьККаталогуСРелизом, "*.*");
	Исключение
		Строка.Картинка = 3;
		Строка.ТекстОшибкиКоротко = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		Строка.ТекстОшибкиПодробно = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
	КонецПопытки;
КонецПроцедуры

&НаКлиенте
Процедура НачатьПоискФайловЗавершение(НайденныеФайлы, ДополнительныеПараметры) Экспорт 	
	ИменаФайлов = Новый Массив();
	
	Для Каждого Файл Из НайденныеФайлы Цикл 
		ИменаФайлов.Добавить(Файл.ПолноеИмя);
	КонецЦикла;
	
	Состояние("Архивация файлов");
	ДД = ОбщегоНазначенияКлиентСервер.Заархивировать(ИменаФайлов, Неопределено);
	АдресаХранилищФайлов = ПоместитьВоВременноеХранилище(ДД, ЭтаФорма.УникальныйИдентификатор);
	ОбновитьБазуНаСервере(ДополнительныеПараметры.Строка.ДопПараметр, АдресаХранилищФайлов, ДополнительныеПараметры.Строка.ИдентификаторЗадания);
	ЭтаФорма.ПодключитьОбработчикОжидания("ПроверкаВыполненияЗаданий", 1, Ложь);	

	
	//ВремФайл = ПолучитьИмяВременногоФайла();
	//Попытка
	//	Состояние("Помещаем во временное хранилище");
	//	ДД.Записать(ВремФайл);
	//	ОО = Новый ОписаниеОповещения("ПоместитьФайлЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	//	НачатьПомещениеФайла(ОО,, ВремФайл, Ложь, ЭтаФорма.УникальныйИдентификатор);
	//	//АдресаХранилищФайлов = ПоместитьВоВременноеХранилище(ДД); 
	//	//ПоместитьВоВременноеХранилище(ДД, АдресаХранилищФайлов); 
	//			
	//	ОбщегоНазначенияКлиентСервер.УдалитьФайлыКлиентСервер(ВремФайл);
	//Исключение
	//	ОбщегоНазначенияКлиентСервер.УдалитьФайлыКлиентСервер(ВремФайл);
	//	ВызватьИсключение;
	//КонецПопытки;
КонецПроцедуры

&НаКлиенте
Процедура ПоместитьФайлЗавершение(Результат, Адрес, ВыбранноеИмяФайла, ДополнительныеПараметры) Экспорт 
	ОбновитьБазуНаСервере(ДополнительныеПараметры.Строка.ДопПараметр, Адрес, ДополнительныеПараметры.Строка.ИдентификаторЗадания);
	ЭтаФорма.ПодключитьОбработчикОжидания("ПроверкаВыполненияЗаданий", 1, Ложь);	
КонецПроцедуры

&НаКлиенте
Процедура СборкаРасширений(Строка)
	Попытка
		СборкаРасширенийНаСервере(Строка.ДопПараметр, Строка.АдресХранилища, Строка.ИдентификаторЗадания);
		ЭтаФорма.ПодключитьОбработчикОжидания("ПроверкаВыполненияЗаданий", 1, Ложь);	
	Исключение
		Строка.Картинка = 3;
		Строка.ТекстОшибкиКоротко = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		Строка.ТекстОшибкиПодробно = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
	КонецПопытки;
КонецПроцедуры

&НаКлиенте
Процедура ОбновлениеВерсииАЦКБУ(Строка)
	Попытка
		ОбновлениеВерсииАЦКБУНаСервере();
		Строка.Картинка = 2;
	Исключение
		Строка.Картинка = 3;
		Строка.ТекстОшибкиКоротко = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		Строка.ТекстОшибкиПодробно = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
	КонецПопытки;

	
КонецПроцедуры

&НаКлиенте
Процедура ОбновлениеЗадачВ_JIRA_Выпуск(Строка)
	Попытка
		Состояние("Обновляем даты в JIRA");
		ОбновитьДатыВыпусков();
		
		Состояние("Обновляем описание релиза в JIRA");
		УстановитьОписаниеВерсииВJIRA("");
		
		Состояние(СтрШаблон("Выпуск релиза ""%1""", Объект.Наименование));
		ВыпускВерсииВJIRA();
		
		ЭтаФорма.Прочитать();
		Объект.РелизВыпущен = Истина;
		ЭтаФорма.Записать();

		Строка.Картинка = 2;
		УправлениеВидимостьюЭлементов();
	Исключение
		Строка.Картинка = 3;
		Строка.ТекстОшибкиКоротко = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		Строка.ТекстОшибкиПодробно = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
	КонецПопытки;
КонецПроцедуры

&НаКлиенте
Процедура ОбновлениеЗадачВ_JIRA_Сборка(Строка)
	Попытка
		Состояние("Обновляем даты в JIRA");
		ОбновитьДатыВыпусков();        
		
		Состояние("Обновляем описание релиза в JIRA");
		УстановитьОписаниеВерсииВJIRA("Выпуск в тестировании");
		
		Состояние(СтрШаблон("Добавляем задачи в релиз ""%1""", Объект.Наименование));
		ЗадачиРелиза = ПолучитьЗадачи();
		ДобавитьВВерсию(ЗадачиРелиза, Объект.Ссылка);
				
		ЭтаФорма.Прочитать();
		Объект.РелизСобран = Истина;
		Строка.Картинка = 2;
		
		ЭтаФорма.Записать();
		УправлениеВидимостьюЭлементов();
		ИнициализироватьШаги();
	Исключение
		Строка.Картинка = 3;
		Строка.ТекстОшибкиКоротко = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		Строка.ТекстОшибкиПодробно = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
	КонецПопытки;
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДатыВыпусков() Экспорт
	ДанныеВерсии = ВзаимодействиеC_JIRA_КлиентСервер.ПолучитьДанныеВерсии(Объект.Код);
	ДатаВыпускаJIRA = ВзаимодействиеC_JIRA_КлиентСервер.ПреобразоватьВДату(ДанныеВерсии["releaseDate"]);
	ДатаНачалаJIRA = ВзаимодействиеC_JIRA_КлиентСервер.ПреобразоватьВДату(ДанныеВерсии["startDate"]);
	Если ДатаВыпускаJIRA = Объект.ДатаРелиза И ДатаНачалаJIRA = Объект.ДатаНачала Тогда
		Возврат;
	КонецЕсли;
	
	Состояние("Обновляем даты во всех последующих релизах");
	
	АктуализироватьВерсии();
	ДанныеВерсий = ПолучитьВерсииДляОбновления(ДатаВыпускаJIRA, Объект.Ссылка);
	ИнтервалВыпускаРелиза = ОбщегоНазначенияСервер.ПолучитьЗначениеКонстанты("КоличествоДнейДляПроверкиРелиза");
	ИнтервалВыпускаРелиза = ?(ИнтервалВыпускаРелиза = 0, 14, ИнтервалВыпускаРелиза); // 14 дней по умолчанию
	
	// обновляем данные тек версии
	Данные = Новый Структура("releaseDate", Формат(Объект.ДатаРелиза, "ДФ=yyyy-MM-ddTHH:mm:ss.000+0300"));
	Данные.Вставить("startDate", Формат(Объект.ДатаНачала, "ДФ=yyyy-MM-ddTHH:mm:ss.000+0300"));
	ВзаимодействиеC_JIRA_КлиентСервер.ИзменитьДанныеВерсии(Формат(Объект.Код, "ЧГ="), Объект.Наименование, Данные, Ложь);	
	
	// обновляем данные следующих версий
	НаваяДатаНачала = Объект.ДатаРелиза;
	Для Каждого Версия Из ДанныеВерсий Цикл
		НоваяДатаРелиза = НаваяДатаНачала + ИнтервалВыпускаРелиза * 24*60*60;
		Данные = Новый Структура("releaseDate", Формат(НоваяДатаРелиза, "ДФ=yyyy-MM-ddTHH:mm:ss.000+0300"));
		Данные.Вставить("startDate", Формат(НаваяДатаНачала, "ДФ=yyyy-MM-ddTHH:mm:ss.000+0300"));
		
		ВзаимодействиеC_JIRA_КлиентСервер.ИзменитьДанныеВерсии(Формат(Версия.ID, "ЧГ="), Версия.Наименование, Данные, Ложь);		
		НаваяДатаНачала = НоваяДатаРелиза; 
	КонецЦикла;
КонецПроцедуры
 
&НаСервереБезКонтекста
Процедура СтартВыгрузкиКонфигурации(АдресХранилища, ИдентификаторЗадания, ИмяРасширения = Неопределено)
	Парам = Новый Массив();  
	
	Парам.Добавить(АдресХранилища); 
	Парам.Добавить(Константы.СтрокаПодключенияКБазеПроверкиРезиза.Получить()); 
	Парам.Добавить(Константы.ПользовательБазыПроверкиРезиза.Получить()); 
	Парам.Добавить(Константы.ПарольБазыПроверкиРезиза.Получить()); 
	Парам.Добавить(ИмяРасширения);
	
	ФЗ = ФоновыеЗадания.Выполнить("БФТ_ДлительныеОперацииСервер.ВыгрузитьКонфигурациюИзБазы", Парам,, "Выгрузка конфигурации");
	ИдентификаторЗадания = ФЗ.УникальныйИдентификатор;
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СтартВыгрузки(АдресХранилища, ИдентификаторЗадания)
	Парам = Новый Массив();  
	
	Парам.Добавить(АдресХранилища); 
	Парам.Добавить(Константы.АдресХранилища.Получить()); 
	Парам.Добавить(Константы.ПользовательХранилища.Получить()); 
	Парам.Добавить(Константы.ПарольХранилища.Получить()); 
	Парам.Добавить(-1); 
	//+++Д Ганеев 13.04.2018 !dlHhsq!+
	Парам.Добавить(Константы.ПутьККаталогуSVN.Получить() + Константы.ПутьККаталогуСФайламиРасширений.Получить());
	Парам.Добавить(Константы.ПутьККаталогуSVN.Получить() + Константы.ПутьККаталогуШаблонов.Получить());
	Парам.Добавить("ФункцииРасширения");
	//+++К Ганеев 13.04.2018 !dlHhsq!-

	ФЗ = ФоновыеЗадания.Выполнить("БФТ_ДлительныеОперацииСервер.ВыгрузитьКонфигурациюИзХранилища", Парам,, "Выгрузка конфигурации из хранилища");
	ИдентификаторЗадания = ФЗ.УникальныйИдентификатор;
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СборкаРасширенийНаСервере(ИмяРасширения, АдресХранилища, ИдентификаторЗадания)
	Парам = Новый Массив(); 
	Парам.Добавить(ИмяРасширения);
	Парам.Добавить(АдресХранилища);
	Парам.Добавить(Константы.ПутьККаталогуSVN.Получить() + Константы.ПутьККаталогуСФайламиРасширений.Получить() + "\" + ИмяРасширения);
	
	ФЗ = ФоновыеЗадания.Выполнить("БФТ_ДлительныеОперацииСервер.СборкаРасширений", Парам,, "Сборка расширений");
	ИдентификаторЗадания = ФЗ.УникальныйИдентификатор;
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОбновитьБазуНаСервере(СтрокаПодключения, АдресАрхива, ИдентификаторЗадания);
	ВремФайл = ПолучитьИмяВременногоФайла();
	ДД = ПолучитьИзВременногоХранилища(АдресАрхива);
	ДД.Записать(ВремФайл);
	
	Парам = Новый Массив(); 
	Парам.Добавить(СтрокаПодключения);
	Парам.Добавить(ВремФайл);

	ФЗ = ФоновыеЗадания.Выполнить("БФТ_ДлительныеОперацииСервер.ОбновитьБазу", Парам,, СтрШаблон("Обновление базы ""%1""", СтрокаПодключения));
	ИдентификаторЗадания = ФЗ.УникальныйИдентификатор;
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СохранениеНастроекНаСервере(АдресХранилища, ИдентификаторЗадания)
	Парам = Новый Массив();  
	
	Парам.Добавить(АдресХранилища); 
	Парам.Добавить(Константы.СтрокаПодключенияКБазеПроверкиРезиза.Получить()); 
	Парам.Добавить(Константы.ПользовательБазыПроверкиРезиза.Получить()); 
	Парам.Добавить(Константы.ПарольБазыПроверкиРезиза.Получить()); 

	ФЗ = ФоновыеЗадания.Выполнить("БФТ_ДлительныеОперацииСервер.СохранениеНастроек", Парам,, "Сохранение настроек ЦПК");
	ИдентификаторЗадания = ФЗ.УникальныйИдентификатор;
КонецПроцедуры


&НаСервереБезКонтекста
Процедура ОбновлениеВерсииАЦКБУНаСервере()
	ПутьККаталогуРасширения = Константы.ПутьККаталогуСФайламиРасширений.Получить() + "\ВерсияЦПК";
	ПутьКРасширению = ПутьККаталогуРасширения + "\CommonModules\БФТ_ОбновлениеИнформационнойБазы\Ext\Module.bsl";
	
	Если Не БФТ_ФайлСуществует(ПутьКРасширению) Тогда
		ВызватьИсключение "Не найден модуль содержащий верцию ЦПК";	
	КонецЕсли;
	
	ТекстовыйДокумент = Новый ТекстовыйДокумент();
	ТекстовыйДокумент.Прочитать(ПутьКРасширению, КодировкаТекста.UTF8);
	ТелоМодуля = ТекстовыйДокумент.ПолучитьТекст(); 
	
	Если СтрЧислоВхождений(ТелоМодуля, "Расш_ВерсияАЦКБУ") = 0 Тогда
		ВызватьИсключение СтрШаблон("В модуле ""%1"" не найдена функция ""Расш_ВерсияАЦКБУ""", ПутьКРасширению);	
	КонецЕсли;
	
	Версия = ПолучитьВерсию(ТелоМодуля);
	ВерсияРазбивка = СтрРазделить(Версия, ".", Ложь);
	НомерНовогоРелиза = Формат(Число(ВерсияРазбивка[1])+1, "ЧГ=");
	НоваяВерсия = СтрШаблон("%1.%2.0.0", ВерсияРазбивка[0], НомерНовогоРелиза);
	ТелоМодуля = СтрЗаменить(ТелоМодуля, Версия, НоваяВерсия);
	
	ЗаписьТекста = Новый ЗаписьТекста(ПутьКРасширению, КодировкаТекста.UTF8);
	ЗаписьТекста.Записать(ТелоМодуля);
	ЗаписьТекста.Закрыть();
	
	БФТ_ОбщиеМетодыАРМаСборокНаСервере.ПоместитьНовуюВерсиюВSVN();
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьВерсию(ТелоМодуля) Экспорт 
	Перем RegExp;
	
	RegExp = Новый COMОбъект("VBScript.RegExp");
	
	RegExp.IgnoreCase = Ложь; //Игнорировать регистр
	RegExp.Global = Истина; //Поиск всех вхождений шаблона
	//RegExp.MultiLine = Ложь; //Многострочный режим
	
	RegExp.Pattern = "Возврат[\s]+[\""]([\d]+[\.][\d]+[\.][\d]+[\.][\d]+)[\""]"; 
	Matches = RegExp.Execute(ТелоМодуля);
	
	Если Matches.Count > 0 Тогда
		 Возврат Matches.Item(0).SubMatches(0);
	КонецЕсли; 
КонецФункции

&НаКлиенте
Процедура ПереносОграниченийПоБюджетам(Строка)
	Попытка
		Состояние("Переносим ограничения побюджетам");
		ПеренестиНаСервере(Объект.Ссылка);
		
		Объект.РелизСобран = Истина;
		Строка.Картинка = 2;
		
		ЭтаФорма.Записать();
		УправлениеВидимостьюЭлементов();
		//ИнициализироватьШаги();
	Исключение
		Строка.Картинка = 3;
		Строка.ТекстОшибкиКоротко = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		Строка.ТекстОшибкиПодробно = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
	КонецПопытки;
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПеренестиНаСервере(ТекРелиз)
	СлРелиз = ПолучитьСлРелиз(ТекРелиз.ДатаРелиза);
	Если Не ЗначениеЗаполнено(СлРелиз) Тогда
		Возврат;	
	КонецЕсли;
	
	ОграничениеПоБюджетам = Справочники.ОграничениеПоБюджетам.Выбрать(, ТекРелиз);
	Пока ОграничениеПоБюджетам.Следующий() Цикл
		СпрОбъект = ОграничениеПоБюджетам.ПолучитьОбъект();	
		НовОбъект = СпрОбъект.Скопировать();		
		НовОбъект.Владелец = СлРелиз;
		НовОбъект.Записать();
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСлРелиз(ДатаРелиза)
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Релизы.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Релизы КАК Релизы
		|ГДЕ
		|	Релизы.ДатаРелиза > &ДатаРелиза
		|
		|УПОРЯДОЧИТЬ ПО
		|	Релизы.ДатаРелиза";
	
	Запрос.УстановитьПараметр("ДатаРелиза", ДатаРелиза);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	КонецЕсли;
КонецФункции

#КонецОбласти


&НаКлиенте
Процедура ПроверкаИЗапускСледующегоЗадания() Экспорт 
	
	Строки = Задания.ПолучитьЭлементы();
	
	Если ИндексТекущегоЗадания = Строки.Количество() Тогда
		ИндексТекущегоЗадания = 0;
		ЭтаФорма.ОтключитьОбработчикОжидания("ПроверкаВыполненияЗаданий");
		ЭтаФорма.ОтключитьОбработчикОжидания("ПроверкаИЗапускСледующегоЗадания");
		ЗапущенПроцесс = Ложь;
		УправлениеВидимостьюЭлементов();
		Возврат;
	КонецЕсли;
	
	ТекСтрокаСЗаданием = Строки[ИндексТекущегоЗадания];
	Если Не ЗначениеЗаполнено(ТекСтрокаСЗаданием.Метод) Или ТекСтрокаСЗаданием.НеВыполнять Тогда
		ИндексТекущегоЗадания = ИндексТекущегоЗадания +1;
		Возврат;
	КонецЕсли;
		
	Если ТекСтрокаСЗаданием.Картинка = 1 Тогда
		Возврат; // Значит тек. задание еще выполняется	
	ИначеЕсли ТекСтрокаСЗаданием.Картинка = 2 Тогда 
		ИндексТекущегоЗадания = ИндексТекущегоЗадания +1;
		Возврат;    // Задание уже выполнелось, переходим к следующему
	ИначеЕсли ТекСтрокаСЗаданием.Картинка = 3 Тогда 
		ИндексТекущегоЗадания = 0;
		ЭтаФорма.ОтключитьОбработчикОжидания("ПроверкаВыполненияЗаданий");
		ЭтаФорма.ОтключитьОбработчикОжидания("ПроверкаИЗапускСледующегоЗадания");
		Элементы.Собрать.Доступность = Истина;
	Иначе
		ТекСтрокаСЗаданием.Картинка = 1;
		Выполнить(СтрШаблон("%1(ТекСтрокаСЗаданием)", ТекСтрокаСЗаданием.Метод));
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаВыполненияЗаданий() Экспорт 
	ВсеВыполнено = Истина;
	Стр = Задания.ПолучитьЭлементы()[ИндексТекущегоЗадания];
	Если Не ЗначениеЗаполнено(Стр.ИдентификаторЗадания) Тогда
		ЭтаФорма.ОтключитьОбработчикОжидания("ПроверкаВыполненияЗаданий");	  
		Возврат;	
	КонецЕсли;
	
	Попытка
		Если Не ОбщегоНазначенияСервер.ЗаданиеВыполнено(Стр.ИдентификаторЗадания) Тогда
			ВсеВыполнено = Ложь;
			
			Стр.Картинка = 1;
			ДанныеФЗ = БФТ_ДлительныеОперацииСервер.ПолучитьДанныеФЗ(Стр.ИдентификаторЗадания, Ложь);
			Если ДанныеФЗ = Неопределено ИЛИ ТипЗнч(ДанныеФЗ) <> Тип("Массив") ИЛИ (ТипЗнч(ДанныеФЗ) = Тип("Массив") И ДанныеФЗ.Количество() = 0) Тогда
				Возврат;
			КонецЕсли;
			
			ПоследняяЗапись = ДанныеФЗ[ДанныеФЗ.ВГраница()];
			ВсеШагиФЗВыполнены = ПоследняяЗапись.ВыполненныеШаги.Количество() = Стр.ПолучитьЭлементы().Количество() ИЛИ Стр.ПолучитьЭлементы().Количество() = 0;
			Для Каждого ПодЗадание Из Стр.ПолучитьЭлементы() Цикл
				Стр.Картинка = 1;
				Если ПодЗадание.Метод = ПоследняяЗапись.ТекущийШаг Тогда
					ПодЗадание.Картинка = 1;	
				КонецЕсли;
				Если ПоследняяЗапись.ВыполненныеШаги.Найти(ПодЗадание.Метод) <> Неопределено ИЛИ ВсеШагиФЗВыполнены Тогда
					ПодЗадание.Картинка = 2;				
				КонецЕсли;
			КонецЦикла;
		Иначе
			ВсеШагиФЗВыполнены = Истина;    
			Для Каждого ПодЗадание Из Стр.ПолучитьЭлементы() Цикл
				ПодЗадание.Картинка = 2;				
			КонецЦикла;
		КонецЕсли;
		
		
		// Получаем данные ФЗ.
		Если ВсеШагиФЗВыполнены Тогда
			Стр.Картинка = 2;
			Если ЗначениеЗаполнено(Стр.ОбратныйМетод) Тогда
				Выполнить(СтрШаблон("%1(Стр.АдресХранилища, Стр.ДопПараметр)", Стр.ОбратныйМетод));  
			КонецЕсли;
		КонецЕсли;
	Исключение
		Стр.Картинка = 3;
		Стр.ТекстОшибкиКоротко = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		Стр.ТекстОшибкиПодробно = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
	КонецПопытки;
	//Иначе
	//	Стр.Картинка = 3;
	//	Стр.ТекстОшибкиКоротко = "Не найден идентификатор ФЗ";
	//КонецЕсли;
	Если ВсеВыполнено Тогда
		ЭтаФорма.ОтключитьОбработчикОжидания("ПроверкаВыполненияЗаданий");	  
	КонецЕсли;
	
	//ЭтаФорма.ОбновитьОтображениеДанных();
КонецПроцедуры


#region callback

//&НаКлиенте
//Процедура ПолучитьФайлИзВременногоХранилища(АдресХранилища, ДопПараметр)
//	//Данные = ПолучитьИзВременногоХранилища(АдресХранилища);
//	//Если ТипЗнч(Данные) = Тип("Массив") Тогда
//	//	Для Каждого Файл Из Данные Цикл
//	//		Если Файл <> Неопределено И Файл.ДД <> Неопределено Тогда
//	//			Файл.ДД.Записать(ПутьККаталогуСРелизом + "\" + Файл.Имя);
//	//		КонецЕсли;
//	//	КонецЦикла;
//	//ИначеЕсли ТипЗнч(Данные) = Тип("Структура") Тогда
//	//	Если Данные.ДД <> Неопределено Тогда
//	//		Данные.ДД.Записать(ПутьККатаполучилогуСРелизом + "\" + Данные.Имя);
//	//	КонецЕсли;
//	//КонецЕсли;
//КонецПроцедуры

&НаКлиенте
Процедура ПолучитьКонфигурациюИзВременногоХранилища(АдресХранилища, ДопПараметр)
	//Наименование = ?(ЗначениеЗаполнено(ПредыдущаяВерсия), ПредыдущаяВерсия, Объект.Наименование);
	ПолучитьФайл(АдресХранилища, ПутьККаталогуСРелизом + СтрШаблон("\%1.cf", Объект.Наименование), Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьРасширениеИзВременногоХранилища(АдресХранилища, ДопПараметр)
	//Наименование = ?(ЗначениеЗаполнено(ПредыдущаяВерсия), ПредыдущаяВерсия, Объект.Наименование);
	ПолучитьФайл(АдресХранилища, ПутьККаталогуСРелизом + СтрШаблон("\%1 (%2).cfe", Объект.Наименование, ДопПараметр), Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьФайлНастроекИзВременногоХранилища(АдресХранилища, ДопПараметр)
	ПолучитьФайл(АдресХранилища, ПутьККаталогуСРелизом + СтрШаблон("\%1.xml", Объект.Наименование), Ложь);
КонецПроцедуры

#endregion

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	УстановитьДефолтныеПараметрыДинСписка();
	
	Элементы.грОшибкаСборки.Видимость = Ложь;
	Элементы.грОшибкаВыпуска.Видимость = Ложь;
	
	Запрос = Новый Запрос(ЗадачиПопавшиеВРелиз.ТекстЗапроса);
	Если Объект.РелизСобран Тогда
		УстановитьДефолтныеПараметрыЗапроса(Запрос.Параметры);
		Запрос.Параметры.Вставить("ПрименитьОтборВыпуск", Истина);	
		Элементы.грОшибкаВыпуска.Видимость = Не Запрос.Выполнить().Пустой();
	Иначе
		УстановитьДефолтныеПараметрыЗапроса(Запрос.Параметры);
		Запрос.Параметры.Вставить("ПрименитьОтборСборка", Истина);	
		Элементы.грОшибкаСборки.Видимость = Не Запрос.Выполнить().Пустой();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОтборЗадачНаСервере()
	ЗадачиПопавшиеВРелиз.Параметры.УстановитьЗначениеПараметра("ПрименитьОтборСборка", ОтборСборкаПрименен);
	ЗадачиПопавшиеВРелиз.Параметры.УстановитьЗначениеПараметра("ПрименитьОтборВыпуск", ОтборВыпускПрименен);
КонецПроцедуры

&НаКлиенте
Процедура ОтборЗадач(Команда)
	ОтборСборкаПрименен = Не ОтборСборкаПрименен;
	ОтборЗадачНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ОтборЗадачВыпуск(Команда)
	ОтборВыпускПрименен = Не ОтборВыпускПрименен;
	ОтборЗадачНаСервере();
КонецПроцедуры


&НаКлиенте
Процедура ПеренестиЗадачиВДругуюВерсию(Команда)
	ВыделенныеСтроки = Элементы.ЗадачиПопавшиеВРелиз.ВыделенныеСтроки;
	СписокЗадач = Новый Массив();
	Для Каждого Стр Из ВыделенныеСтроки Цикл
		Если ТипЗнч(Стр) = Тип("СправочникСсылка.Задачи") Тогда
		  СписокЗадач.Добавить(Стр);
		КонецЕсли;
	КонецЦикла;
	
	Если СписокЗадач.Количество() = 0 Тогда
		Сообщить("Выделите строки с задачами");
		Возврат;	
	КонецЕсли;
	
	Парам = Новый Структура("РелизыПозжеЧем, НеВыпущенныеИНеСобранные", ТекущаяДата(), Истина);
	ДД = Новый Структура("СписокЗадач", СписокЗадач);
	ОткрытьФорму("Справочник.Релизы.ФормаВыбора", Парам,,,,, Новый ОписаниеОповещения("ПеренестиЗадачиВДругуюВерсиюЗавершение", ЭтотОбъект, ДД), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
КонецПроцедуры


&НаКлиенте
Процедура ПеренестиЗадачиВДругуюВерсиюЗавершение(Результат, ДополнительныеПараметры) Экспорт
	Если Результат <> Неопределено Тогда
		ПереместитьВВерсию(ДополнительныеПараметры.СписокЗадач, Результат);	
		ОтборСборкаПрименен = Ложь;
		ОтборВыпускПрименен = Ложь;
		ЭтаФорма.Прочитать();
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПереместитьВВерсию(СписокЗадач, НоваяВерсия)
	Справочники.Релизы.ПереместитьВВерсию(СписокЗадач, НоваяВерсия);
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ДобавитьВВерсию(СписокЗадач, НоваяВерсия)
	Справочники.Релизы.ДобавитьВВерсию(СписокЗадач, НоваяВерсия);
КонецПроцедуры


&НаКлиенте
Процедура ЗадачиПопавшиеВРелизВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ОткрытьВБраузере(Элемент, ВыбраннаяСтрока);
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьВБраузере(Элемент, ВыбраннаяСтрока)
	ТекСтрока = Элемент.ДанныеСтроки(ВыбраннаяСтрока);
	Если ТекСтрока <> Неопределено Тогда
		ВзаимодействиеC_JIRA_КлиентСервер.ОткрытьЗадачуВБраузере(ТекСтрока.Номер);
	КонецЕсли;
КонецПроцедуры


&НаСервереБезКонтекста
Функция ПолучитьВерсииДляОбновления(ДатаРелизаДоИзменений, ТекРелиз)
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Релизы.ДатаРелиза КАК ДатаРелиза,
		|	Релизы.Код КАК ID,
		|	Релизы.Наименование КАК Наименование,
		|	Релизы.ДатаНачала КАК ДатаНачала
		|ИЗ
		|	Справочник.Релизы КАК Релизы
		|ГДЕ
		|	Релизы.Ссылка <> &ТекРелиз
		|	И Релизы.ДатаРелиза > &ДатаРелиза
		|
		|УПОРЯДОЧИТЬ ПО
		|	Релизы.Код";
	
	Запрос.УстановитьПараметр("ДатаРелиза", ДатаРелизаДоИзменений);
	Запрос.УстановитьПараметр("ТекРелиз", ТекРелиз);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Ответ = Новый Массив();
	Пока Выборка.Следующий() Цикл
		Знч = Новый Структура("ДатаРелиза,ДатаНачала,ID,Наименование");
		ЗаполнитьЗначенияСвойств(Знч, Выборка);
		Ответ.Добавить(Знч);
	КонецЦикла;
	
	Возврат Ответ;
КонецФункции
	
&НаСервереБезКонтекста
Процедура АктуализироватьВерсии()
	Справочники.Релизы.ОбновитьВерсии();
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	//Если ПараметрыЗаписи.Свойство("НеПоказыватьВопрос") И ПараметрыЗаписи.НеПоказыватьВопрос = Истина Тогда
	//	Возврат;
	//КонецЕсли;
	//
	//Если Не ЗначениеЗаполнено(Объект.ДатаРелиза) Тогда
	//	Отказ = Истина;
	//	Сообщить("Дата должна быть заполнена");
	//	Возврат;
	//КонецЕсли;  
	
	//Если Объект.ДатаРелиза > ДатаРелизаДоИзменений Тогда
	//	Отказ = Истина;
	//	ПоказатьВопрос(Новый ОписаниеОповещения("ДатаРелизаПриИзмененииЗавершение", ЭтотОбъект), "Даты всех последующих релизов будет изменена", РежимДиалогаВопрос.ОКОтмена);
	//Иначе
	//	Данные = Новый Структура("releaseDate", Формат(Объект.ДатаРелиза, "ДФ=yyyy-MM-ddTHH:mm:ss.000+0300"));
	//	ВзаимодействиеC_JIRA_КлиентСервер.ИзменитьДанныеВерсии(Формат(Объект.Код, "ЧГ="), Объект.Наименование, Данные, Ложь);
	//КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВкладкиПриСменеСтраницы(Элемент, ТекущаяСтраница)
	Если ТекущаяСтраница = Элементы.грReleaseNote Тогда
		СформироватьОписание();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура СформироватьОписание()
	Запрос = Новый Запрос(ЗадачиПопавшиеВРелиз.ТекстЗапроса);
	УстановитьДефолтныеПараметрыЗапроса(Запрос.Параметры);
	
	НомераЗадач = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Номер");
	ИнтергационныеЗадачи = ПолучитьИнтергационныеЗадачи(НомераЗадач);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = ReleaseNote.Добавить();
		НоваяСтрока.Задача = Выборка.Задача;
		НоваяСтрока.Номер = Выборка.Номер;
		
		Если ЗначениеЗаполнено(Выборка.Родитель) Тогда
			НоваяСтрока.Описание = СформироватьОписаниеПоЗадаче(ИнтергационныеЗадачи, Выборка.Родитель, Выборка.ЕстьКоммит, НоваяСтрока.Важность);	
		Иначе
			НоваяСтрока.Описание = СформироватьОписаниеПоЗадаче(ИнтергационныеЗадачи, Выборка.Задача, Выборка.ЕстьКоммит, НоваяСтрока.Важность);	
		КонецЕсли;
	КонецЦикла;
	ReleaseNote.Сортировать("Важность Убыв");

КонецПроцедуры

&НаСервере
Функция ПолучитьИнтергационныеЗадачи(НомераЗадач)
	Ответ = Новый ТаблицаЗначений();
	Ответ.Колонки.Добавить("ЗадачаБУ");
	Ответ.Колонки.Добавить("ИнтегрЗадача");
	Ответ.Колонки.Добавить("Информация");
	
	JQL = СтрШаблон("project = BU AND issueFunction in linkedIssuesOf(""project = ZRI"") AND KEY in(%1)", СтрСоединить(НомераЗадач, ","));
	СписокЗадач = ВзаимодействиеC_JIRA_КлиентСервер.ПолучитьСписокЗадач(JQL, Ложь);
	Для Каждого Задача Из СписокЗадач Цикл
		СвойствоЗадачи = Задача["fields"];
		// отбираем все связанные задачи (могут быть несколько связаных, не только интеграционные)
		Для Каждого СвЗадача Из СвойствоЗадачи["issuelinks"] Цикл 
			Если СвЗадача["inwardIssue"] <> Неопределено Тогда
				НовСтр = Ответ.Добавить();
				НовСтр.ЗадачаБУ = Задача["key"];
				НовСтр.ИнтегрЗадача = СвЗадача["inwardIssue"]["key"];
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Если Ответ.Количество() = 0 Тогда
		Возврат Ответ;	
	КонецЕсли;
	
	// теперь фильтруем второй раз, нам нужны задачи относящиеся к проекту интеграционных задач
	JQL = СтрШаблон("project = ZRI AND KEY in(%1)", СтрСоединить(Ответ.ВыгрузитьКолонку("ИнтегрЗадача"), ","));
	СписокЗадач = ВзаимодействиеC_JIRA_КлиентСервер.ПолучитьСписокЗадач(JQL, Ложь);
	Для Каждого Задача Из СписокЗадач Цикл
		Стр = Ответ.Найти(Задача["key"], "ИнтегрЗадача");
		Если Стр = Неопределено Тогда
			Продолжить;	
		КонецЕсли;
		
		СвойствоЗадачи = Задача["fields"];
		
		ИнформацияПоВыпускам = Новый Структура("ВерсияФин, ВерсияГЗ");
		ИнформацияПоВыпускам.ВерсияФин = СвойствоЗадачи[БФТ_ОбщиеМетодыАРМаСборокНаКлиентеНаСервере.КастомныеПоляJIRA("ВЕРСИЯФИН")];
		ИнформацияПоВыпускам.ВерсияГЗ = СвойствоЗадачи[БФТ_ОбщиеМетодыАРМаСборокНаКлиентеНаСервере.КастомныеПоляJIRA("ВЕРСИЯГЗ")];
		
		Стр.Информация = ИнформацияПоВыпускам;
	КонецЦикла;
	
	// Теперь удаляем строки в которых нет информации по версиям
	Для а = -(Ответ.Количество()-1) По 0 Цикл
		Если Ответ[-а].Информация = Неопределено Тогда
			Ответ.Удалить(-а);
		КонецЕсли;
	КонецЦикла;
		
	Возврат Ответ;
КонецФункции

&НаСервере
Функция СформироватьОписаниеПоЗадаче(СписокИнтергационныхЗадач, Задача, ЕстьКоммит, Важность)
	Ответ = Новый Массив();
	Важность = 0;  // Значение по умолчанию.
	
	КонечныеСтатусы = СтрРазделить("Закрыт,Сделан,Предоставлено ПР", ",");
	Выборка = Справочники.Задачи.ВыбратьИерархически(Задача);
	РазработкаЗакрыта = КонечныеСтатусы.Найти(Задача.Статус) <> Неопределено;   
	ТестированиеЗакрыта = КонечныеСтатусы.Найти(Задача.Статус) <> Неопределено;
	
	Пока Выборка.Следующий() Цикл
		Если Выборка.Тип.Родитель = Справочники.ТипыЗадач.Разработка Тогда
			РазработкаЗакрыта = КонечныеСтатусы.Найти(Выборка.Статус) <> Неопределено;
		КонецЕсли;
		Если Выборка.Тип.Родитель = Справочники.ТипыЗадач.Тестирование Тогда
			ТестированиеЗакрыта = КонечныеСтатусы.Найти(Выборка.Статус) <> Неопределено;
		КонецЕсли;
	КонецЦикла;
	
	Если ЕстьКоммит И (Не РазработкаЗакрыта) Тогда
		Ответ.Добавить("Задача частично выложена разработкой");
		Важность = 1;
	КонецЕсли;
	Если (Не ЕстьКоммит) И РазработкаЗакрыта Тогда
		Ответ.Добавить("По задаче не было внесено правок");
	КонецЕсли;
	Если ЕстьКоммит И РазработкаЗакрыта И ТестированиеЗакрыта Тогда
		Ответ.Добавить("Задача проверена");
	КонецЕсли;
	Если ЕстьКоммит И РазработкаЗакрыта И Не ТестированиеЗакрыта Тогда
		Ответ.Добавить("Задача сделана разработкой, но не проверена");
	КонецЕсли;
	
	Интеграция = СписокИнтергационныхЗадач.Найти(Задача.Код, "ЗадачаБУ");
	Если Интеграция <> Неопределено Тогда
		Ответ.Добавить(СтрШаблон("Интеграционная задача. Необходимые версии смежных систем:
		|Фин: ""%1""
		|ГЗ: ""%2""", Интеграция.Информация.ВерсияФин, Интеграция.Информация.ВерсияГЗ));
		Важность = 2;
	КонецЕсли;
	
	Возврат СтрСоединить(Ответ, Символы.ПС);
КонецФункции

&НаКлиенте
Процедура ОбновитьСПолучениемИзменений(Команда)
	ИдентификаторФЗ = ЗапускЗадачНаСервере();
	Элементы.ДеревоЗадачВРаботеОбновитьСПолучениемИзменений.Доступность = Не ЗначениеЗаполнено(ИдентификаторФЗ);
	ЭтаФорма.ПодключитьОбработчикОжидания("ПроверкаСтатусаРегЗадания", "1", Ложь);
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗапускЗадачНаСервере()
	РЗ = РегламентныеЗадания.НайтиПредопределенное("ПолучениеЗадач");
	Если РЗ = Неопределено Тогда
		Сообщить("Не нашли регламентное задание");
		Возврат Неопределено;
	КонецЕсли;
	
	Если РЗ.Использование Тогда
		
		//проверика на выполнение в текущий момент
		Отбор = Новый Структура;
		Отбор.Вставить("Ключ", Строка(РЗ.УникальныйИдентификатор));
		Отбор.Вставить("Состояние", СостояниеФоновогоЗадания.Активно);		
		МассивЗаданий = ФоновыеЗадания.ПолучитьФоновыеЗадания(Отбор);
		
		Если МассивЗаданий.Количество() = 0 Тогда 
			НаименованиеФоновогоЗадания = "Запуск вручную: "+ РЗ.Метаданные.Синоним;
			ФЗ = ФоновыеЗадания.Выполнить(РЗ.Метаданные.ИмяМетода, РЗ.Параметры, Строка(РЗ.УникальныйИдентификатор), НаименованиеФоновогоЗадания);
			Возврат ФЗ.УникальныйИдентификатор;
		Иначе
			Сообщить("Задание уже запущено");
		КонецЕсли;
	КонецЕсли;
КонецФункции

&НаКлиенте
Процедура ПроверкаСтатусаРегЗадания() Экспорт 
	Если ОбщегоНазначенияСервер.ЗаданиеВыполнено(ИдентификаторФЗ) Тогда
		Элементы.ДеревоЗадачВРаботеОбновитьСПолучениемИзменений.Доступность = Истина;
		ЭтаФорма.ОтключитьОбработчикОжидания("ПроверкаСтатусаРегЗадания");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаданияТекстОшибкиОткрытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.Задания.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		Сообщить(ТекущиеДанные.ТекстОшибкиПодробно);	
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	Если Не ЗавершениеРаботы И Не Элементы.Собрать.Доступность И ЗапущенПроцесс Тогда
		Отказ = Истина;
		Сообщить("Дождитесь окончания сборки релиза");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	УправлениеВидимостьюЭлементов();
	ИнициализироватьШаги();
КонецПроцедуры

&НаКлиенте
Процедура УправлениеВидимостьюЭлементов()
	Элементы.грНастройкиПодключенияКБазам.Видимость = Не НастройкиПодключенияЗаполнены();
	Элементы.Собрать.Доступность = Не Объект.РелизСобран И Не Объект.РелизВыпущен;
	Элементы.Выпустить.Доступность = Не Объект.РелизВыпущен И Объект.РелизСобран;
	Элементы.АвтоматическиОбновлятьБазы.Видимость = Не Объект.РелизСобран И Не Объект.РелизВыпущен;
	
	Если Не Объект.РелизСобран Тогда
		Элементы.Собрать.КнопкаПоУмолчанию = Истина;
	Иначе
		Элементы.Выпустить.КнопкаПоУмолчанию = Истина;
	КонецЕсли;
	Элементы.НаборКонстантСтрокаПодключенияКБазеПроверкиРезиза.Видимость = Объект.РелизСобран;
	//АвтоматическиОбновлятьБазы = Объект.БазыДляОбновления.Количество() > 0;
	Элементы.Группа5.Видимость = АвтоматическиОбновлятьБазы;
КонецПроцедуры

&НаСервереБезКонтекста
Функция НастройкиПодключенияЗаполнены()
	Возврат ЗначениеЗаполнено(Константы.АдресХранилища.Получить()) И
	ЗначениеЗаполнено(Константы.ПользовательХранилища.Получить());
	//ЗначениеЗаполнено(Константы.СтрокаПодключенияКБазеПроверкиРезиза.Получить()) И
	//ЗначениеЗаполнено(Константы.ПользовательБазыПроверкиРезиза.Получить());
КонецФункции

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "ИзменениеНастроек" Тогда
		УправлениеВидимостьюЭлементов();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьНастройки(Команда)
	ОткрытьФорму("ОбщаяФорма.НастройкиПодключенияКХранилищу",,,,,, Новый ОписаниеОповещения("ОткрытьФормуКонстантЗавершение", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуКонстантЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
КонецПроцедуры

&НаКлиенте
Процедура Выпустить(Команда)
	
КонецПроцедуры

&НаКлиенте
Процедура ИгнорироватьПредупреждения(Команда)
	Элементы.грОшибкаСборки.Видимость = Ложь;
	Элементы.грОшибкаВыпуска.Видимость = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ДатаРелизаПриИзменении(Элемент)
	ОбновитьДатыВыпусков();
КонецПроцедуры

&НаКлиенте
Процедура ДатаНачалаПриИзменении(Элемент)
	ОбновитьДатыВыпусков();
КонецПроцедуры

&НаКлиенте
Процедура ReleaseNoteВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ОткрытьВБраузере(Элемент, ВыбраннаяСтрока);
КонецПроцедуры

&НаКлиенте
Процедура ReleaseNoteПриАктивизацииСтроки(Элемент)
	ТекущиеДанные = Элементы.ReleaseNote.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		ReleaseNote_Детализация = ТекущиеДанные.Описание;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаданияНеВыполнятьПриИзменении(Элемент)
	Для Каждого Стр Из Задания.ПолучитьЭлементы() Цикл
		Для Каждого Стр2 Из Стр.ПолучитьЭлементы() Цикл
			Стр2.НеВыполнять = Стр.НеВыполнять;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ПутьККаталогуСРелизомНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	ОО = Новый ОписаниеОповещения("ВыборКаталогаЗавершение2", ЭтотОбъект);
	Диалог.Показать(ОО);
КонецПроцедуры


&НаКлиенте
Процедура ВыборКаталогаЗавершение2(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт 
	Если ВыбранныеФайлы <> Неопределено И ВыбранныеФайлы.Количество() = 1 Тогда
		ПутьККаталогуСРелизом	= ВыбранныеФайлы[0];
		ЭтаФорма.Модифицированность = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура АвтоматическиОбновлятьБазыПриИзменении(Элемент)
	УправлениеВидимостьюЭлементов();
КонецПроцедуры

&НаКлиенте
Процедура БазыДляОбновленияПриИзменении(Элемент)
	ИнициализироватьШаги();
КонецПроцедуры

&НаКлиенте
Процедура ПереноситьОграниченияПриИзменении(Элемент)
	ИнициализироватьШаги();
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьЗадачиВБраузере(Команда)
	Перем Статус, Версия, НомераЗадач, СписокЗадач;
	
	ТекущаяСтрока = Элементы.ЗадачиПопавшиеВРелиз.ТекущаяСтрока;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;	
	КонецЕсли;
	
	СписокЗадач = Новый Массив();
	Если ТипЗнч(ТекущаяСтрока) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
		Если ТипЗнч(ТекущаяСтрока.Ключ) = Тип("Строка") Тогда
			Статус = ТекущаяСтрока.Ключ;
			Если ТекущаяСтрока.РодительскаяГруппировка <> Неопределено И ТипЗнч(ТекущаяСтрока.РодительскаяГруппировка.Ключ) = Тип("СправочникСсылка.Релизы") Тогда
				Версия = ТекущаяСтрока.РодительскаяГруппировка.Ключ;	
			КонецЕсли;
		ИначеЕсли ТипЗнч(ТекущаяСтрока.Ключ) = Тип("СправочникСсылка.Релизы") Тогда
			Версия = ТекущаяСтрока.Ключ;
		КонецЕсли;
		СписокЗадач = ПолучитьЗадачи(Статус, Версия);
	ИначеЕсли ТипЗнч(ТекущаяСтрока) = Тип("СправочникСсылка.Задачи") Тогда
		СписокЗадач.Добавить(ТекущаяСтрока);
	Иначе
		Возврат;
	КонецЕсли;
	
	НомераЗадач = Новый Массив();
	Для Каждого Задача Из СписокЗадач Цикл
		НомераЗадач.Добавить(ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(Задача, "Код"));	
	КонецЦикла;
	
	Если НомераЗадач.Количество() > 0 Тогда
		НачатьЗапускПриложения(Новый ОписаниеОповещения("ОткрытьСписокВJIRAЗавершение", ЭтотОбъект), СтрШаблон("https://jira.bftcom.com/issues/?jql=key in(%1)", СтрСоединить(НомераЗадач, ",")));
	КонецЕсли;
КонецПроцедуры

Процедура ОткрытьСписокВJIRAЗавершение(КодВозврата, ДополнительныеПараметры) Экспорт 
	
КонецПроцедуры


ИндексТекущегоЗадания = 0;                                                                
ЗапущенПроцесс = Ложь;

