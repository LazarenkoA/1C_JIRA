Функция НайтиСоздатьВерсии(МассивВерсий) Экспорт 
	Ответ = Новый Массив();
	Для Каждого ДанныеВерсии Из МассивВерсий Цикл
		Ответ.Добавить(НайтиСоздатьВерсию(ДанныеВерсии));	
	КонецЦикла;
	Возврат Ответ;
КонецФункции

Функция НайтиСоздатьВерсию(ДанныеВерсии) Экспорт 
	Если ДанныеВерсии = Неопределено Тогда
		Возврат Справочники.Релизы.ПустаяСсылка();	
	КонецЕсли;
	
	Код = Число(ДанныеВерсии["id"]);
	ВерсияСсылка = НайтиРелизПоКоду(Код);
	
	Версия = ?(ЗначениеЗаполнено(ВерсияСсылка), ВерсияСсылка.ПолучитьОбъект(), Справочники.Релизы.СоздатьЭлемент());
	Версия.Наименование = ДанныеВерсии["name"];
	Версия.Код = Код;
	Версия.РелизВыпущен = ДанныеВерсии["released"];
	ДатаРелизаСтрокой = ДанныеВерсии["releaseDate"];
	ДатаНачалаСтрокой = ДанныеВерсии["startDate"];
	
	Если ЗначениеЗаполнено(ДатаРелизаСтрокой) Тогда
		Версия.ДатаРелиза = ВзаимодействиеC_JIRA_КлиентСервер.ПреобразоватьВДату(ДатаРелизаСтрокой);
	КонецЕсли;
	Если ЗначениеЗаполнено(ДатаНачалаСтрокой) Тогда
		Версия.ДатаНачала = ВзаимодействиеC_JIRA_КлиентСервер.ПреобразоватьВДату(ДатаНачалаСтрокой);
	КонецЕсли;
	
	Версия.Записать();
	
	Возврат Версия.Ссылка;
КонецФункции

Процедура ОбновитьВерсию(id_версии) Экспорт 
	ДанныеВерсии = ВзаимодействиеC_JIRA_КлиентСервер.ПолучитьДанныеВерсии(id_версии);
	НайтиСоздатьВерсию(ДанныеВерсии);		
КонецПроцедуры

Процедура ОбновитьВерсии() Экспорт 
	Версии = ВзаимодействиеC_JIRA_КлиентСервер.ПолучитьСписокВерсий();
	
	Для Каждого Версия Из Версии Цикл
		НайтиСоздатьВерсию(Версия);		
	КонецЦикла;
КонецПроцедуры

Функция НайтиРелизПоКоду(Код)
	// у релиза и у патча номера будут обинаковы, по этому мы поиск производим только по элементам не имеющим родителя
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Релизы.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Релизы КАК Релизы
		|ГДЕ
		|	Релизы.Код = &Код
		|	И Релизы.Родитель = &Родитель";
	
	Запрос.УстановитьПараметр("Код", Код);
	Запрос.УстановитьПараметр("Родитель", Справочники.Релизы.ПустаяСсылка());
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	Иначе
		Возврат Справочники.Релизы.ПустаяСсылка();
	КонецЕсли;
КонецФункции

Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка)
	Перем Объект;
	
	Если ВидФормы = "ФормаОбъекта" И Параметры.Свойство("Ключ", Объект) И Объект <> Неопределено Тогда
		СтандартнаяОбработка = Ложь;
		ВыбраннаяФорма = ?(ЗначениеЗаполнено(Объект.Родитель), "ФормаПатча", "ФормаРелиза");
 	КонецЕсли;
КонецПроцедуры

Процедура ПереместитьВВерсию(ВыбранныеЗадачи, НоваяВерсия) Экспорт 
	Если ВыбранныеЗадачи.Количество() = 0 ИЛИ Не ЗначениеЗаполнено(НоваяВерсия) Тогда
		Возврат;	
	КонецЕсли;
	
	Для Каждого Задача Из ВыбранныеЗадачи Цикл 
		НачатьТранзакцию();
		Попытка
			ЗадачаОбъект = Задача.ПолучитьОбъект();
			ЗадачаОбъект.Версии.Очистить();
			НовСтр = ЗадачаОбъект.Версии.Добавить();
			НовСтр.Версия = НоваяВерсия;
			ЗадачаОбъект.Записать();
			
			ДанныеВерсии = Новый Структура("fixVersions", Новый Массив());
			ДанныеВерсии.fixVersions.Добавить(Новый Структура("id", Формат(НоваяВерсия.Код, "ЧГ=")));
			ВзаимодействиеC_JIRA_КлиентСервер.ИзменитьПоляЗадачи(Задача.Код, ДанныеВерсии);
			
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ВызватьИсключение;
		КонецПопытки;
		
	КонецЦикла;
КонецПроцедуры

Процедура ДобавитьВВерсию(ВыбранныеЗадачи, НоваяВерсия) Экспорт 
	Если ВыбранныеЗадачи.Количество() = 0 ИЛИ Не ЗначениеЗаполнено(НоваяВерсия) Тогда
		Возврат;	
	КонецЕсли;
	
	Для Каждого Задача Из ВыбранныеЗадачи Цикл 
		НачатьТранзакцию();
		Попытка
			ЗадачаОбъект = Задача.ПолучитьОбъект();
			НовСтр = ЗадачаОбъект.Версии.Добавить();
			НовСтр.Версия = НоваяВерсия;
			ЗадачаОбъект.Записать();
			
			ДанныеВерсий = Новый Структура("fixVersions");
			ДанныеВерсий.fixVersions = КонвертироватьВерсииВJSON(ЗадачаОбъект.Версии.ВыгрузитьКолонку("Версия"));
			
			ДанныеВерсий.fixVersions.Добавить(Новый Структура("id", Формат(НоваяВерсия.Код, "ЧГ=")));
			ВзаимодействиеC_JIRA_КлиентСервер.ИзменитьПоляЗадачи(Задача.Код, ДанныеВерсий);
			
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ВызватьИсключение;
		КонецПопытки;
		
	КонецЦикла;
КонецПроцедуры

Функция КонвертироватьВерсииВJSON(Версии)
	Ответ = Новый Массив();
	Для Каждого Версия Из Версии Цикл
		Ответ.Добавить(Новый Структура("id", Формат(Версия.Код, "ЧГ=")));	
	КонецЦикла;
	
	Возврат Ответ;
КонецФункции

Функция ПолучитьАктуальныйРелиз() Экспорт 
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Релизы.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Релизы КАК Релизы
		|ГДЕ
		|	НЕ Релизы.РелизСобран
		|	И НЕ Релизы.РелизВыпущен
		|	И Релизы.Родитель = ЗНАЧЕНИЕ(Справочник.Релизы.ПустаяСсылка)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Релизы.ДатаРелиза";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	КонецЕсли;
КонецФункции

Функция ПолучитьРелизНаДату(Дата) Экспорт 
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Релизы.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Релизы КАК Релизы
		|ГДЕ
		|	&Дата МЕЖДУ Релизы.ДатаНачала И Релизы.ДатаРелиза";
	
	Запрос.Параметры.Вставить("Дата", Дата);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	КонецЕсли;
КонецФункции

Процедура ПроверитьПревышениеОбъема(Релиз, ДопОценка = 0) Экспорт 
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СУММА(ГрафикРаботы.РабочихЧасов) КАК РабочихЧасов,
		|	&ДатаНач КАК ДатаНач,
		|	&ДатаКон КАК ДатаКон
		|ПОМЕСТИТЬ РабЧасы
		|ИЗ
		|	РегистрСведений.ГрафикРаботы КАК ГрафикРаботы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
		|		ПО ГрафикРаботы.Пользователь = Пользователи.Ссылка
		|ГДЕ
		|	НЕ Пользователи.ПометкаУдаления
		|	И Пользователи.Родитель = ЗНАЧЕНИЕ(Справочник.Пользователи.Разработка)
		|	И ГрафикРаботы.Дата МЕЖДУ &ДатаНач И &ДатаКон
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Релизы.Ссылка КАК Ссылка,
		|	СУММА(Задачи.Оценка) + &ДопОценка КАК Оценка,
		|	РабЧасы.РабочихЧасов КАК РабочихЧасов
		|ИЗ
		|	Справочник.Задачи.Версии КАК ЗадачиВерсии
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Задачи КАК Задачи
		|		ПО ЗадачиВерсии.Ссылка = Задачи.Ссылка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Релизы КАК Релизы
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РабЧасы КАК РабЧасы
		|			ПО Релизы.ДатаНачала = РабЧасы.ДатаНач
		|				И Релизы.ДатаРелиза = РабЧасы.ДатаКон
		|		ПО ЗадачиВерсии.Версия = Релизы.Ссылка
		|ГДЕ
		|	Релизы.Ссылка = &РелизСсылка
		|
		|СГРУППИРОВАТЬ ПО
		|	Релизы.Ссылка,
		|	РабЧасы.РабочихЧасов
		|
		|ИМЕЮЩИЕ
		|	СУММА(Задачи.Оценка) + &ДопОценка > РабЧасы.РабочихЧасов";
	
	Запрос.УстановитьПараметр("ДатаНач", Релиз.ДатаНачала);
	Запрос.УстановитьПараметр("ДатаКон", Релиз.ДатаРелиза);
	Запрос.УстановитьПараметр("РелизСсылка", Релиз);
	Запрос.УстановитьПараметр("ДопОценка", ДопОценка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ВызватьИсключение СтрШаблон("Привышение объема часов в релизе ""%1""
		|Емкость релиза: ""%2""
		|Общая оценка задач (в часах): ""%3""", Релиз, Выборка.РабочихЧасов, Выборка.Оценка);		
	КонецЕсли;
	
КонецПроцедуры

