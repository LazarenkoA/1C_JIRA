#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	Процедура ОбновитьЗаписи(Номера = Неопределено) Экспорт 
		СписокЗадач = Новый Массив();
		Если Номера = Неопределено Тогда
			СписокЗадач = ВзаимодействиеC_JIRA_КлиентСервер.ПолучитьЗадачиОбновленныеСегодня(Ложь);
		Иначе
			Для Каждого Блок Из ОбщегоНазначенияКлиентСервер.РазбитьМассив(Номера, 100) Цикл
				СписокЗадачВрем = ВзаимодействиеC_JIRA_КлиентСервер.ПолучитьСписокЗадач(СтрШаблон("key in(%1)", СтрСоединить(Блок, ",")), Ложь);
				СписокЗадач = ОбщегоНазначенияКлиентСервер.СлитьМассивы(СписокЗадач, СписокЗадачВрем);
			КонецЦикла;	
		КонецЕсли;
		
		//ДанныеДляПроверки = Новый Массив();
		Для Каждого Задача Из СписокЗадач Цикл
			Лог = ВзаимодействиеC_JIRA_КлиентСервер.ПолучитьЛогСписанийПоЗадаче(Задача["key"]);
			Для Каждого ЗаписьЛога Из Лог Цикл
				Запись = РегистрыСведений.СписаниеВремени.СоздатьМенеджерЗаписи();
				Запись.НомерЗадачи = Задача["key"];
				Запись.Автор = Справочники.Пользователи.НайтиСоздатьПользователя(ЗаписьЛога["author"]);                        
				Запись.Комментарий = ЗаписьЛога["comment"];
				Запись.Часы = Число(ЗаписьЛога["timeSpentSeconds"]) / 60 / 60;
				Запись.Дата = ВзаимодействиеC_JIRA_КлиентСервер.ПреобразоватьВДату(ЗаписьЛога["started"]);
				Запись.ДатаСозданияЗаписи = ВзаимодействиеC_JIRA_КлиентСервер.ПреобразоватьВДату(ЗаписьЛога["created"]);
				Запись.ДатаОбновленияЗаписи = ВзаимодействиеC_JIRA_КлиентСервер.ПреобразоватьВДату(ЗаписьЛога["updated"]);
				Запись.Записать();
				
				//ДанныеДляПроверки.Добавить(Запись.ДатаСозданияЗаписи);
			КонецЦикла;
			
			// Теперь нужно что-то сделать если в JIRA удалили запись
			//УдалитьЛишнее(Задача["key"], ДанныеДляПроверки);
		КонецЦикла;
	КонецПроцедуры
	
	//Процедура УдалитьЛишнее(НомерЗадачи, ДатыСоздания)
	//	Запрос = Новый Запрос;
	//	Запрос.Текст = 
	//	"ВЫБРАТЬ
	//	|	СписаниеВремени.НомерЗадачи КАК НомерЗадачи,
	//	|	СписаниеВремени.ДатаСозданияЗаписи КАК ДатаСозданияЗаписи,
	//	|	СписаниеВремени.Период КАК Период,
	//	|	СписаниеВремени.Дата КАК Дата,
	//	|	СписаниеВремени.Автор КАК Автор
	//	|ИЗ
	//	|	РегистрСведений.СписаниеВремени.СрезПоследних(, ) КАК СписаниеВремени
	//	|ГДЕ
	//	|	СписаниеВремени.НомерЗадачи = &НомерЗадачи
	//	|	И НЕ СписаниеВремени.ДатаСозданияЗаписи В (&ДатыСоздания)";
	//	
	//	Запрос.УстановитьПараметр("ДатыСоздания", ДатыСоздания);
	//	Запрос.УстановитьПараметр("НомерЗадачи", НомерЗадачи);
	//	
	//	Выборка = Запрос.Выполнить().Выбрать();
	//	Пока Выборка.Следующий() Цикл
	//		Набор = РегистрыСведений.СписаниеВремени.СоздатьНаборЗаписей();
	//		Набор.Отбор.НомерЗадачи.Установить(Выборка.НомерЗадачи);
	//		Набор.Отбор.ДатаСозданияЗаписи.Установить(Выборка.ДатаСозданияЗаписи);
	//		Набор.Отбор.Период.Установить(Выборка.Период);
	//		Набор.Отбор.Дата.Установить(Выборка.Дата);
	//		Набор.Отбор.Автор.Установить(Выборка.Автор);
	//		Набор.Записать();
	//	КонецЦикла;
	//КонецПроцедуры
	
#КонецЕсли