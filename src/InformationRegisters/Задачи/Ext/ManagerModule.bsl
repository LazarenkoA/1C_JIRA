
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
	Функция ПолучитьЗадачи(НомераЗадач = Неопределено) Экспорт 
		МассивНомеров = ?(ТипЗнч(НомераЗадач) = Тип("Массив"), НомераЗадач, СтрРазделить(НомераЗадач, ",", Ложь));
		Разбивка = ОбщегоНазначенияКлиентСервер.РазбитьМассив(МассивНомеров, 100);
		
		Результат = Новый Массив();
		Для Каждого Блок Из Разбивка Цикл
			JQL = СтрШаблон("key in(%1)", СтрСоединить(Блок, ","));
			СписокЗадач = ВзаимодействиеC_JIRA_КлиентСервер.ПолучитьСписокЗадач(JQL);
			Для Каждого З Из СписокЗадач Цикл
				Результат.Добавить(З);	
			КонецЦикла;
		КонецЦикла;

		Возврат Результат;
	КонецФункции
	
	Процедура ЧисткаУдаленныхЗадач() Экспорт 
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Задачи.Номер КАК Номер
		|ИЗ
		|	РегистрСведений.Задачи КАК Задачи";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			Ошибка = "";
			Попытка
				СписокЗадач = ПолучитьЗадачи(Выборка.Номер);
			Исключение
				Ошибка = ОписаниеОшибки();
			КонецПопытки;
			
			// Нормального способа проверить существования задачи не нашел
			Если СтрЧислоВхождений(Ошибка, "не существует для поля 'key'") > 0 Тогда
				УдалитьЗадачу(Выборка.Номер);
			КонецЕсли;
		КонецЦикла;
	КонецПроцедуры
	
	Процедура УдалитьЗадачу(НомерЗадачи)
		Набор = РегистрыСведений.Задачи.СоздатьНаборЗаписей();
		Набор.Отбор.Номер.Установить(НомерЗадачи);
		Набор.Записать();
	КонецПроцедуры
	
	
	Процедура ОбновитьЗадачи(НомераДдяОбновления = Неопределено) Экспорт 
		Если НомераДдяОбновления <> Неопределено Тогда
			СписокЗадач = ПолучитьЗадачи(НомераДдяОбновления);	
			ЗаписатьЗадачиВБазу(СписокЗадач, Неопределено);
			//Если Сабтаски.Количество() > 0 Тогда
			//	ОбновитьЗадачи(Сабтаски);
			//КонецЕсли;
			
			Возврат;
		КонецЕсли;
		
		ОтсеятьАрхивныеЗадачи();
		
		JQL = ОбщегоНазначенияСервер.ПолучитьЗначениеКонстанты("JIRA_JQL");
		ДатаСоздания = ПоследняяДатаСоздания();
		ФильтрПоДатаСоздания = "";
		Если ЗначениеЗаполнено(ДатаСоздания) Тогда
			ФильтрПоДатаСоздания = СтрШаблон("or created >= %1", Формат(ДатаСоздания, "ДФ=yyyy-MM-dd"));
		КонецЕсли;
		
		// Обновляем измененные
		JQL = СтрШаблон("(updated >= -1h %1 ) and %2", ФильтрПоДатаСоздания, JQL);
		СписокЗадач = ВзаимодействиеC_JIRA_КлиентСервер.ПолучитьСписокЗадач(JQL);
		ЗаписатьЗадачиВБазу(СписокЗадач, ДатаСоздания);
		//Если Сабтаски.Количество() > 0 Тогда
		//	ОбновитьЗадачи(Сабтаски);	
		//КонецЕсли;
	КонецПроцедуры
	
	Процедура ОтсеятьАрхивныеЗадачи() 
		СписокЗадач = ВзаимодействиеC_JIRA_КлиентСервер.ПолучитьЗадачиИСабтаскиСМетками("Архив");
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Задачи.Номер КАК Номер,
		|	Задачи.НомерРодительскойЗадачи КАК НомерРодительскойЗадачи
		|ИЗ
		|	РегистрСведений.Задачи КАК Задачи
		|ГДЕ
		|	Задачи.Номер В(&СписокЗадач)";
		
		Запрос.УстановитьПараметр("СписокЗадач", СписокЗадач);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			Набор = РегистрыСведений.Задачи.СоздатьНаборЗаписей();
			Набор.Отбор.Номер.Установить(Выборка.Номер);
			Набор.Записать();
		КонецЦикла;
	КонецПроцедуры
	
	Функция ЗаписатьЗадачиВБазу(СписокЗадач, ПоследняяДатаСоздания) 
		//Сабтаски = Новый Массив();
		Для Каждого Задача Из СписокЗадач Цикл
			ПоляЗадачи = Задача["fields"];
			
			НачатьТранзакцию();
			Попытка
				Блокировка = Новый БлокировкаДанных;
				ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.Задачи");
				ЭлементБлокировки.УстановитьЗначение("Номер", Задача["key"]);
				ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
				Блокировка.Заблокировать();
				
				Набор = РегистрыСведений.Задачи.СоздатьНаборЗаписей();
				Набор.Отбор.Номер.Установить(Задача["key"]);
				Набор.Прочитать();
				Если Набор.Количество() > 1 Тогда
					Набор.Очистить(); // могут быть больше одного, т.к. раньше была ошибка. Задваиваться могло, когда задачу превращали в сабтаск	
				КонецЕсли;
				
				Запись = ?(Набор.Количество() = 0, Набор.Добавить(), Набор[0]);
				
				Запись.Номер = Задача["key"];
				Запись.Исполнитель = Справочники.Пользователи.НайтиСоздатьПользователя(ПоляЗадачи["assignee"]);
				Запись.Автор = Справочники.Пользователи.НайтиСоздатьПользователя(ПоляЗадачи["reporter"]);
				
				ОценкаВСекундах = ПоляЗадачи["timeoriginalestimate"]; // timeoriginalestimate - в секундах
				Запись.Оценка = ?(ОценкаВСекундах <> Неопределено, ОценкаВСекундах, 0) / 60/60;    
				Запись.ПлановаяДатаЗавершения = ВзаимодействиеC_JIRA_КлиентСервер.ПреобразоватьВДату(ПоляЗадачи["duedate"]);
				Запись.Приоритет = Справочники.Приоритеты.НайтиСоздатьПриоритет(ПоляЗадачи["priority"]);
				Запись.ДатаСоздания = ВзаимодействиеC_JIRA_КлиентСервер.ПреобразоватьВДату(ПоляЗадачи["created"]);
				Запись.Заголовок = ПоляЗадачи["summary"];
				Запись.Статус = ПоляЗадачи["status"]["name"];
				Запись.НомерРодительскойЗадачи = ?(ПоляЗадачи["parent"] = Неопределено, "", ПоляЗадачи["parent"]["key"]);
				Запись.Тип = Справочники.ТипыЗадач.НайтиСоздатьТип(ПоляЗадачи["issuetype"]);
				Запись.ЭтоНовая = ПоследняяДатаСоздания <> Неопределено И Запись.ДатаСоздания > ПоследняяДатаСоздания;
				Запись.Бюджет = Справочники.БюджетыПУ.НайтиСоздатьБюджет(ПоляЗадачи["customfield_12500"]);
				
				// Если установили один раз (первый) больше сбрасываться не должно
				Если Не Запись.ДатуЗавершенияУстановилАвтор Тогда
					Запись.ДатуЗавершенияУстановилАвтор = Запись.ЭтоНовая И ЗначениеЗаполнено(Запись.ПлановаяДатаЗавершения);
				КонецЕсли;
				Набор.Записать();
				
				//Для Каждого Сабтаск Из ПоляЗадачи["subtasks"] Цикл
				//	Сабтаски.Добавить(Сабтаск["key"]);
				//КонецЦикла;
				
				// т.к. что-то менялось в задаче, мы удаляем по задаче информацию из журнала уведомлений
				Для Каждого Запись Из Набор Цикл
					Набор = РегистрыСведений.ЖурналОтправкиУведомлений.СоздатьНаборЗаписей();
					Набор.Отбор.НомерЗадачи.Установить(Запись.Номер);	
					Набор.Записать();
				КонецЦикла;
				
				ЗафиксироватьТранзакцию();
			Исключение
				ОтменитьТранзакцию();
				ВызватьИсключение;
			КонецПопытки;
		КонецЦикла;	
		
		//Возврат Сабтаски;
	КонецФункции
		
	Функция ПолучитьНомераЗадачНеЗакрытые()
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Задачи.Номер КАК Номер
		|ИЗ
		|	РегистрСведений.Задачи КАК Задачи
		|ГДЕ
		|	Задачи.НомерРодительскойЗадачи = """"
		|	И НЕ Задачи.Статус В (&СтатусыИсключения)";
		
		Запрос.УстановитьПараметр("СтатусыИсключения", СтрРазделить("Закрыт", ","));
		
		Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Номер");
	КонецФункции
	
	Функция ПоследняяДатаСоздания()
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Задачи.ДатаСоздания КАК ДатаСоздания
		|ИЗ
		|	РегистрСведений.Задачи КАК Задачи
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДатаСоздания УБЫВ";                            
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Возврат Выборка.ДатаСоздания;	
		КонецЕсли;
	КонецФункции
	
#КонецЕсли