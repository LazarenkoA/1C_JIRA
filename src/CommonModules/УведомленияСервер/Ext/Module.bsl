Процедура Уведомить(Получатель, ШаблонУведомления, СписокЗадач) Экспорт
	Если СписокЗадач.Количество() = 0 ИЛИ ШаблонУведомления.ОтключитьУведомление Тогда
		Возврат;	
	КонецЕсли;
	
	НачатьТранзакцию();
	Попытка
		Для Каждого Стр Из СписокЗадач Цикл
			// Запись в регистр
			Запись = РегистрыСведений.ЖурналОтправкиУведомлений.СоздатьМенеджерЗаписи();
			Запись.НомерЗадачи = Стр.Номер;
			//ТекущаяДатаСеанса() + (ШаблонУведомления.ИнтервалУведомлений * 60 * 60);
			Запись.Получатель = Получатель;
			Запись.ШаблонУведомления = ШаблонУведомления;
			Запись.Записать();
		КонецЦикла;
		
		// Отправки письма
		ТелоСообщения = ЗаполнитьПоШаблону(ШаблонУведомления, Получатель, СписокЗадач); 
		ПараметрыПисьма = РаботаСПочтовымиСообщениями.ПолучитьПараметрыПисьма();
		ПараметрыПисьма.Вставить("ТелоHTML");
		ПараметрыПисьма.Тема = ШаблонУведомления.Тема;
		ПараметрыПисьма.АдресПолучателя = Получатель.Email;
		ПараметрыПисьма.ИмяПолучателя = Получатель.ФИО;
		ПараметрыПисьма.ТелоHTML = ТелоСообщения;
		ПараметрыПисьма = РаботаСПочтовымиСообщениями.ПодготовитьПараметрыПисьма(ПараметрыПисьма);
		
		ОписаниеОшибки = "";
		ТекстСообщения = "";
		УспешноеВыполнение = РаботаСПочтовымиСообщениями.ОтправитьСообщение(ПараметрыПисьма, ОписаниеОшибки, ПараметрыПисьма.ТелоHTML);
		Если Не УспешноеВыполнение Тогда
			ВызватьИсключение СтрШаблон(НСтр("ru='Не удалось отправить письмо ответственному по адресу %1.
			|%2'"), ПараметрыПисьма.АдресПолучателя, ОписаниеОшибки); 
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
КонецПроцедуры

Функция ЗаполнитьПоШаблону(Шаблон, Пользователь, СписокЗадач)  
	ШаблонОбъект = Шаблон.ПолучитьОбъект();
	Ответ = СтрЗаменить(ШаблонОбъект.HTMLШаблон, "%Пользователь%", Строка(Пользователь));
	
	МеткаЦикл = "%ЦиклПоЗадачам%";
	МеткаНач = СтрНайти(Ответ, МеткаЦикл);
	МеткаКон = СтрНайти(Ответ, МеткаЦикл,, МеткаНач + СтрДлина(МеткаЦикл));
	Если МеткаНач > 0 И МеткаКон > МеткаНач Тогда
		РазмераШаблонаСтроки = МеткаКон + СтрДлина(МеткаЦикл) - МеткаНач;
		ШаблонСтроки = Сред(Ответ, МеткаНач, РазмераШаблонаСтроки); 
		
		Строки = Новый Массив();
		Для Каждого Задача Из СписокЗадач Цикл
			ШаблонСтрокиБезМеток = СтрЗаменить(ШаблонСтроки, МеткаЦикл, "");
			Метки = ПолучитьМеткиИзШаблона(ШаблонСтрокиБезМеток);
			Для Каждого Метка Из Метки Цикл
				МеткаЧистая = СтрЗаменить(Метка, "%", "");	
				Попытка
					Значение = Вычислить(МеткаЧистая);
				Исключение
					Значение = Неопределено;
				КонецПопытки;
				
				ШаблонСтрокиБезМеток = СтрЗаменить(ШаблонСтрокиБезМеток, Метка, Значение);
			КонецЦикла;
			Строки.Добавить(ШаблонСтрокиБезМеток);	
		КонецЦикла;
		
		Ответ = СтрЗаменить(Ответ, ШаблонСтроки, СтрСоединить(Строки, Символы.ПС));
	КонецЕсли;
	
	Возврат Ответ;
КонецФункции

Функция ПолучитьМеткиИзШаблона(Шаблон) 
	Перем RegExp, Matches;
	
	RegExp = Новый COMОбъект("VBScript.RegExp");
	
	RegExp.IgnoreCase = Ложь; //Игнорировать регистр
	RegExp.Global = Истина; //Поиск всех вхождений шаблона
	// RegExp.MultiLine = Ложь; Многострочный режим.
	
	RegExp.Pattern = "[%](.+?)[%]"; 
	Matches = RegExp.Execute(Шаблон);
	
	Ответ = Новый Массив();
	Для Каждого Match Из Matches Цикл
		Если ЗначениеЗаполнено(Match.Value) Тогда
			Ответ.Добавить(Match.Value);	
		КонецЕсли;
		
		//Если Match.SubMatches.Count() > 0 И ЗначениеЗаполнено(Match.Value Match.SubMatches(0)) Тогда
		//	Возврат Match.SubMatches(0);    
		//КонецЕсли;
	КонецЦикла;
	
	RegExp = Неопределено;
	Возврат Ответ;
КонецФункции
