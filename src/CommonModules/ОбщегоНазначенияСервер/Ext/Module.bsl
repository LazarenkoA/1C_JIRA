
Функция ПроверкаЗаполненияНастроекJIRA(Пользователь = Неопределено, Пароль = Неопределено) Экспорт 
	//ИдентификаторПользователя = Строка(Константы.ПользовательНастроек.Получить());
	Пароль = ХранилищеОбщихНастроек.Загрузить("Настройки JIRA", "JIRA_Password");
	Пользователь = ХранилищеОбщихНастроек.Загрузить("Настройки JIRA", "JIRA_Login");

	Ошибки = Новый Массив();
	Если Не	ЗначениеЗаполнено(Константы.JIRA_URL.Получить()) Тогда
		Ошибки.Добавить("Не заполнен URL подключения к JIRA");	
	КонецЕсли;
	Если Не	ЗначениеЗаполнено(Пароль) Тогда
		Ошибки.Добавить("Не заполнен пароль подключения к JIRA");	
	КонецЕсли;
	Если Не	ЗначениеЗаполнено(Пользователь) Тогда
		Ошибки.Добавить("Не заполнен пользователь подключения к JIRA");	
	КонецЕсли;
	Если Не	ЗначениеЗаполнено(Константы.JIRA_JQL.Получить()) Тогда
		Ошибки.Добавить("Не заполнен базовый JQL");	
	КонецЕсли;                                    
	
	Возврат СтрСоединить(Ошибки, Символы.ПС);
КонецФункции

Функция ПолучитьЗначениеКонстанты(ИмяКонстанты) Экспорт 
	Возврат Константы[ИмяКонстанты].Получить();	
КонецФункции

Функция ПолучитьЗначениеПараметраСеанса(ИмяПараметры) Экспорт 
	Возврат ПараметрыСеанса[ИмяПараметры];
КонецФункции

Процедура УстановитьЗначениеПараметраСеанса(ИмяПараметры, Значение) Экспорт 
	ПараметрыСеанса[ИмяПараметры] = Значение;
КонецПроцедуры

Функция ПолучитьКонфликтующиеДаты() Экспорт 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Задачи.Исполнитель КАК Исполнитель,
	|	Задачи.ПлановаяДатаЗавершения КАК ПлановаяДатаЗавершения,
	|	РАЗНОСТЬДАТ(&ТекДата, Задачи.ПлановаяДатаЗавершения, ЧАС) / 24 КАК РазностьКалендарныхДат,
	|	(МАКСИМУМ(Задачи.Оценка) - СУММА(СписаниеВремени.Часы)) / &РабДней КАК ОценкаВРабДнях
	|ПОМЕСТИТЬ Группировка1
	|ИЗ
	|	РегистрСведений.Задачи КАК Задачи
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СписаниеВремени КАК СписаниеВремени
	|		ПО Задачи.Номер = СписаниеВремени.НомерЗадачи
	|			И Задачи.Исполнитель = СписаниеВремени.Автор
	|ГДЕ
	|	Задачи.НомерРодительскойЗадачи = """"
	|	И Задачи.ПлановаяДатаЗавершения >= &ТекДата
	|	И НЕ Задачи.Статус В (&СтатусыИсключения)
	|	И Задачи.Исполнитель В ИЕРАРХИИ (&Аналитики, &Разработка, &Тестирование)
	|
	|СГРУППИРОВАТЬ ПО
	|	Задачи.Исполнитель,
	|	Задачи.ПлановаяДатаЗавершения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Группировка.Исполнитель КАК Исполнитель,
	|	Группировка.ПлановаяДатаЗавершения КАК ПлановаяДатаЗавершения,
	|	МАКСИМУМ(Группировка.РазностьКалендарныхДат) КАК РазностьКалендарныхДат,
	|	МАКСИМУМ(Группировка.ОценкаВРабДнях) + СУММА(ЕСТЬNULL(ДанныеПрошлыхДат.ОценкаВРабДнях, 0)) КАК ОценкаВРабДнях
	|ПОМЕСТИТЬ Группировка
	|ИЗ
	|	Группировка1 КАК Группировка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Группировка1 КАК ДанныеПрошлыхДат
	|		ПО Группировка.Исполнитель = ДанныеПрошлыхДат.Исполнитель
	|			И Группировка.ПлановаяДатаЗавершения > ДанныеПрошлыхДат.ПлановаяДатаЗавершения
	|
	|СГРУППИРОВАТЬ ПО
	|	Группировка.Исполнитель,
	|	Группировка.ПлановаяДатаЗавершения
	|
	|ИМЕЮЩИЕ
	|	МАКСИМУМ(Группировка.ОценкаВРабДнях) + СУММА(ЕСТЬNULL(ДанныеПрошлыхДат.ОценкаВРабДнях, 0)) > МАКСИМУМ(Группировка.РазностьКалендарныхДат)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Задачи.Номер КАК Номер,
	|	Задачи.Заголовок КАК Заголовок,
	|	Группировка.ПлановаяДатаЗавершения КАК ПлановаяДатаЗавершения,
	|	-(Задачи.Приоритет.Код - 5) КАК Картинка,
	|	Группировка.ОценкаВРабДнях КАК ОценкаВРабДнях,
	|	Группировка.РазностьКалендарныхДат КАК РазностьКалендарныхДат,
	|	ЛОЖЬ КАК ДатаИзменена,
	|	Группировка.Исполнитель КАК Исполнитель,
	|	Задачи.Автор КАК Автор,
	|	Задачи.ДатуЗавершенияУстановилАвтор КАК ДатуЗавершенияУстановилАвтор
	|ИЗ
	|	РегистрСведений.Задачи КАК Задачи
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Группировка КАК Группировка
	|		ПО Задачи.Исполнитель = Группировка.Исполнитель
	|			И Задачи.ПлановаяДатаЗавершения = Группировка.ПлановаяДатаЗавершения
	|ИТОГИ
	|	СУММА(ОценкаВРабДнях),
	|	МАКСИМУМ(РазностьКалендарныхДат)
	|ПО
	|	Исполнитель,
	|	ПлановаяДатаЗавершения";
	
	Запрос.УстановитьПараметр("ТекДата", ТекущаяДатаСеанса());
	РабочийДень = Константы.РабочийДень.Получить();
	Запрос.УстановитьПараметр("РабДней", ?(РабочийДень = 0, 8, РабочийДень));
	Запрос.УстановитьПараметр("СтатусыИсключения", СтрРазделить("Закрыт,Сделан,Предоставлено ПР", ","));
	Запрос.УстановитьПараметр("Аналитики", Справочники.Пользователи.Аналитика);
	Запрос.УстановитьПараметр("Разработка", Справочники.Пользователи.Разработка);
	Запрос.УстановитьПараметр("Тестирование", Справочники.Пользователи.Тестирование);

	Возврат Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
КонецФункции

Функция КоличествоКонфликтующихДат() Экспорт 
	Дерево = ПолучитьКонфликтующиеДаты();
	Возврат Дерево.Строки.Количество();	
КонецФункции

Функция ПолучитьЗадачиПоСГруппировкой(НомераЗадач, ПолеИтог) Экспорт 
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Задачи.Номер КАК Номер,
		|	Задачи.Автор КАК Автор,
		|	Задачи.Заголовок КАК Заголовок,
		|	Задачи.Исполнитель КАК Исполнитель,
		|	Задачи.ПлановаяДатаЗавершения КАК ПлановаяДатаЗавершения
		|ИЗ
		|	РегистрСведений.Задачи КАК Задачи
		|ГДЕ
		|	Задачи.Номер В(&НомераЗадач)
		|	И НЕ Задачи.Статус В (&СтатусыИсключения)
		|ИТОГИ ПО
		|	" + ПолеИтог;
	
	Запрос.УстановитьПараметр("НомераЗадач", НомераЗадач);
	Запрос.УстановитьПараметр("СтатусыИсключения", СтрРазделить("Закрыт,Сделан,Предоставлено ПР", ","));
	Возврат Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
КонецФункции

Функция ПолучитьНомераНовыхЗаписей() Экспорт 
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Задачи.Номер КАК Номер
		|ИЗ
		|	РегистрСведений.Задачи КАК Задачи
		|ГДЕ
		|	Задачи.ЭтоНовая
		|	И Задачи.НомерРодительскойЗадачи = """"";
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Номер");
КонецФункции

Процедура СнятьФлагЭтоНовая() Экспорт 
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Задачи.Номер КАК Номер
		|ИЗ
		|	РегистрСведений.Задачи КАК Задачи
		|ГДЕ
		|	Задачи.ЭтоНовая";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Набор = РегистрыСведений.Задачи.СоздатьНаборЗаписей();	
		Набор.Отбор.Номер.Установить(Выборка.Номер);
		Набор.Прочитать();
		Если Набор.Количество() > 1 Тогда
			ВызватьИсключение СтрШаблон("По номеру задачи ""%1"" нашлось несколько записей", Выборка.Номер);	
		ИначеЕсли Набор.Количество() = 1 Тогда
			Набор[0].ЭтоНовая = Ложь;
		КонецЕсли;
		Набор.Записать();
	КонецЦикла;
КонецПроцедуры

Процедура Очистить_JIRA_Cookies() Экспорт
	ПараметрыСеанса.JIRA_Cookies = "";
КонецПроцедуры
