
Функция ПроверкаЗаполненияНастроекJIRA(Пользователь = Неопределено, Пароль = Неопределено) Экспорт 
	//ИдентификаторПользователя = Строка(Константы.ПользовательНастроек.Получить());
	Пароль = ХранилищеОбщихНастроек.Загрузить("Настройки JIRA", "JIRA_Password");
	Пользователь = ХранилищеОбщихНастроек.Загрузить("Настройки JIRA", "JIRA_Login");

	Ошибки = Новый Массив();
	Если Не	ЗначениеЗаполнено(Константы.JIRA_URL.Получить()) Тогда
		Ошибки.Добавить("Не заполнен URL подключения к JIRA");	
	КонецЕсли;
	Если Не	ЗначениеЗаполнено(Пароль) Тогда
		Ошибки.Добавить("Не заполнен пароль подключения к JIRA");	
	КонецЕсли;
	Если Не	ЗначениеЗаполнено(Пользователь) Тогда
		Ошибки.Добавить("Не заполнен пользователь подключения к JIRA");	
	КонецЕсли;
	Если Не	ЗначениеЗаполнено(Константы.JIRA_JQL.Получить()) Тогда
		Ошибки.Добавить("Не заполнен базовый JQL");	
	КонецЕсли;                                    
	
	Возврат СтрСоединить(Ошибки, Символы.ПС);
КонецФункции

Функция ПолучитьЗначениеКонстанты(ИмяКонстанты) Экспорт 
	Возврат Константы[ИмяКонстанты].Получить();	
КонецФункции

Функция ПолучитьЗначениеПараметраСеанса(ИмяПараметры) Экспорт 
	Возврат ПараметрыСеанса[ИмяПараметры];
КонецФункции

Процедура УстановитьЗначениеПараметраСеанса(ИмяПараметры, Значение) Экспорт 
	ПараметрыСеанса[ИмяПараметры] = Значение;
КонецПроцедуры

Функция ПолучитьКонфликтующиеДаты() Экспорт 
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Задачи.Номер КАК Номер,
	|	Задачи.Заголовок КАК Заголовок,
	|	Задачи.Приоритет КАК Приоритет,
	|	Задачи.Автор КАК Автор,
	|	Задачи.ДатуЗавершенияУстановилАвтор КАК ДатуЗавершенияУстановилАвтор,
	|	Задачи.Исполнитель КАК Исполнитель,
	|	Задачи.ПлановаяДатаЗавершения КАК ПлановаяДатаЗавершения,
	|	(МАКСИМУМ(Задачи.Оценка) - СУММА(СписаниеВремени.Часы)) / &РабДней КАК ОценкаВРабДнях
	|ПОМЕСТИТЬ ОтборЗадач
	|ИЗ
	|	РегистрСведений.Задачи КАК Задачи
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СписаниеВремени КАК СписаниеВремени
	|		ПО Задачи.Номер = СписаниеВремени.НомерЗадачи
	|ГДЕ
	|	Задачи.НомерРодительскойЗадачи = """"
	|	И Задачи.ПлановаяДатаЗавершения >= &ТекДата
	|	И НЕ Задачи.Статус В (&СтатусыИсключения)
	|	И Задачи.Исполнитель В ИЕРАРХИИ (&Аналитики, &Разработка, &Тестирование)
	|
	|СГРУППИРОВАТЬ ПО
	|	Задачи.Исполнитель,
	|	Задачи.Номер,
	|	Задачи.Заголовок,
	|	Задачи.Приоритет,
	|	Задачи.Автор,
	|	Задачи.ДатуЗавершенияУстановилАвтор,
	|	Задачи.ПлановаяДатаЗавершения
	|
	|ИМЕЮЩИЕ
	|	МАКСИМУМ(Задачи.Оценка) - СУММА(СписаниеВремени.Часы) > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Задачи.Исполнитель КАК Исполнитель,
	|	Задачи.ПлановаяДатаЗавершения КАК ПлановаяДатаЗавершения,
	|	СУММА(Задачи.ОценкаВРабДнях) КАК ОценкаВРабДнях
	|ПОМЕСТИТЬ Группировка1
	|ИЗ
	|	ОтборЗадач КАК Задачи
	|
	|СГРУППИРОВАТЬ ПО
	|	Задачи.Исполнитель,
	|	Задачи.ПлановаяДатаЗавершения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Группировка.Исполнитель КАК Исполнитель,
	|	Группировка.ПлановаяДатаЗавершения КАК ПлановаяДатаЗавершения,
	|	МАКСИМУМ(Группировка.ОценкаВРабДнях + ЕСТЬNULL(ДанныеПрошлыхДат.ОценкаВРабДнях, 0)) КАК ОценкаВРабДнях,
	|	РАЗНОСТЬДАТ(&ТекДата, Группировка.ПлановаяДатаЗавершения, ЧАС) / 24 КАК РазностьКалендарныхДат
	|ПОМЕСТИТЬ ИтоговаяГруппировка
	|ИЗ
	|	Группировка1 КАК Группировка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Группировка1 КАК ДанныеПрошлыхДат
	|		ПО Группировка.Исполнитель = ДанныеПрошлыхДат.Исполнитель
	|			И Группировка.ПлановаяДатаЗавершения > ДанныеПрошлыхДат.ПлановаяДатаЗавершения
	|
	|СГРУППИРОВАТЬ ПО
	|	Группировка.Исполнитель,
	|	Группировка.ПлановаяДатаЗавершения
	|
	|ИМЕЮЩИЕ
	|	(ВЫРАЗИТЬ(МАКСИМУМ(Группировка.ОценкаВРабДнях + ЕСТЬNULL(ДанныеПрошлыхДат.ОценкаВРабДнях, 0)) КАК ЧИСЛО(10, 2))) > (ВЫРАЗИТЬ(РАЗНОСТЬДАТ(&ТекДата, Группировка.ПлановаяДатаЗавершения, ЧАС) / 24 КАК ЧИСЛО(10, 2)))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОтборЗадач.Номер КАК Номер,
	|	ОтборЗадач.Заголовок КАК Заголовок,
	|	ИтоговаяГруппировка.ПлановаяДатаЗавершения КАК ПлановаяДатаЗавершения,
	|	-(ОтборЗадач.Приоритет.Код - 5) КАК Картинка,
	|	ВЫРАЗИТЬ(ОтборЗадач.ОценкаВРабДнях КАК ЧИСЛО(10, 2)) КАК ОценкаВРабДнях,
	|	ВЫРАЗИТЬ(ИтоговаяГруппировка.РазностьКалендарныхДат КАК ЧИСЛО(10, 2)) КАК РазностьКалендарныхДат,
	|	ЛОЖЬ КАК ДатаИзменена,
	|	ОтборЗадач.Автор КАК Автор,
	|	ИтоговаяГруппировка.Исполнитель КАК Исполнитель,
	|	ОтборЗадач.ДатуЗавершенияУстановилАвтор КАК ДатуЗавершенияУстановилАвтор,
	|	ОтборЗадач.ПлановаяДатаЗавершения КАК ПлановаяДатаЗавершенияВходящихВПериод
	|ИЗ
	|	ИтоговаяГруппировка КАК ИтоговаяГруппировка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОтборЗадач КАК ОтборЗадач
	|		ПО ИтоговаяГруппировка.Исполнитель = ОтборЗадач.Исполнитель
	|			И ИтоговаяГруппировка.ПлановаяДатаЗавершения >= ОтборЗадач.ПлановаяДатаЗавершения
	|
	|УПОРЯДОЧИТЬ ПО
	|	ОтборЗадач.ПлановаяДатаЗавершения
	|ИТОГИ
	|	СУММА(ОценкаВРабДнях),
	|	МАКСИМУМ(РазностьКалендарныхДат)
	|ПО
	|	Исполнитель,
	|	ПлановаяДатаЗавершения";
	
	Запрос.УстановитьПараметр("ТекДата", ТекущаяДатаСеанса());
	РабочийДень = Константы.РабочийДень.Получить();
	Запрос.УстановитьПараметр("РабДней", ?(РабочийДень = 0, 8, РабочийДень));
	Запрос.УстановитьПараметр("СтатусыИсключения", СтрРазделить("Закрыт,Сделан,Предоставлено ПР", ","));
	Запрос.УстановитьПараметр("Аналитики", Справочники.Пользователи.Аналитика);
	Запрос.УстановитьПараметр("Разработка", Справочники.Пользователи.Разработка);
	Запрос.УстановитьПараметр("Тестирование", Справочники.Пользователи.Тестирование);

	Возврат Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
КонецФункции

Функция ПолучитьРасхождениеВОценках() Экспорт 
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Задачи.Номер КАК Номер,
	               |	Задачи.Оценка КАК Оценка,
	               |	Сабтаски.Номер КАК СабтаскНомер,
	               |	Сабтаски.Оценка КАК СабтаскОценка,
	               |	-(Задачи.Приоритет.Код - 5) КАК Картинка,
	               |	Сабтаски.Тип.Родитель КАК ТипСабтаскаРодитель
	               |ИЗ
	               |	РегистрСведений.Задачи КАК Задачи
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.Задачи КАК Сабтаски
	               |		ПО Задачи.Номер = Сабтаски.НомерРодительскойЗадачи
	               |			И (Задачи.Оценка > 0)
	               |			И Задачи.Оценка < Сабтаски.Оценка
	               |			И (Сабтаски.НомерРодительскойЗадачи <> """")";
	
	Возврат Запрос.Выполнить().Выбрать();
КонецФункции

Функция ПолучитьРасхождениеВОценкахКоличество() Экспорт 
	Возврат ПолучитьРасхождениеВОценках().Количество();	
КонецФункции

Функция КоличествоКонфликтующихДат() Экспорт 
	Дерево = ПолучитьКонфликтующиеДаты();
	Возврат Дерево.Строки.Количество();	
КонецФункции

Функция ПолучитьЗадачиПоСГруппировкой(НомераЗадач, ПолеИтог) Экспорт 
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Задачи.Номер КАК Номер,
		|	Задачи.Автор КАК Автор,
		|	Задачи.Заголовок КАК Заголовок,
		|	Задачи.Исполнитель КАК Исполнитель,
		|	Задачи.ПлановаяДатаЗавершения КАК ПлановаяДатаЗавершения
		|ИЗ
		|	РегистрСведений.Задачи КАК Задачи
		|ГДЕ
		|	Задачи.Номер В(&НомераЗадач)
		|	И НЕ Задачи.Статус В (&СтатусыИсключения)
		|ИТОГИ ПО
		|	" + ПолеИтог;
	
	Запрос.УстановитьПараметр("НомераЗадач", НомераЗадач);
	Запрос.УстановитьПараметр("СтатусыИсключения", СтрРазделить("Закрыт,Сделан,Предоставлено ПР", ","));
	Возврат Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
КонецФункции

Функция ПолучитьНомераНовыхЗаписей() Экспорт 
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Задачи.Номер КАК Номер
		|ИЗ
		|	РегистрСведений.Задачи КАК Задачи
		|ГДЕ
		|	Задачи.ЭтоНовая
		|	И Задачи.НомерРодительскойЗадачи = """"";
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Номер");
КонецФункции

Процедура СнятьФлагЭтоНовая() Экспорт 
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Задачи.Номер КАК Номер
		|ИЗ
		|	РегистрСведений.Задачи КАК Задачи
		|ГДЕ
		|	Задачи.ЭтоНовая";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Набор = РегистрыСведений.Задачи.СоздатьНаборЗаписей();	
		Набор.Отбор.Номер.Установить(Выборка.Номер);
		Набор.Прочитать();
		Если Набор.Количество() > 1 Тогда
			ВызватьИсключение СтрШаблон("По номеру задачи ""%1"" нашлось несколько записей", Выборка.Номер);	
		ИначеЕсли Набор.Количество() = 1 Тогда
			Набор[0].ЭтоНовая = Ложь;
		КонецЕсли;
		Набор.Записать();
	КонецЦикла;
КонецПроцедуры

Процедура Очистить_JIRA_Cookies() Экспорт
	ПараметрыСеанса.JIRA_Cookies = "";
КонецПроцедуры

Функция НайтиЗаданиеПоИдентификатору(Знач ИдентификаторЗадания) Экспорт 
	
	Если ТипЗнч(ИдентификаторЗадания) = Тип("Строка") Тогда
		ИдентификаторЗадания = Новый УникальныйИдентификатор(ИдентификаторЗадания);
	КонецЕсли;
	
	Задание = ФоновыеЗадания.НайтиПоУникальномуИдентификатору(ИдентификаторЗадания);
	Возврат Задание;
	
КонецФункции


// Проверяет состояние фонового задания по переданному идентификатору.
// При аварийном завершении задания вызывает исключение.
//
// Параметры:
//  ИдентификаторЗадания - УникальныйИдентификатор - идентификатор фонового задания. 
//
// Возвращаемое значение:
//  Булево - состояние выполнения задания.
// 
Функция ЗаданиеВыполнено(Знач ИдентификаторЗадания) Экспорт
	
	Задание = НайтиЗаданиеПоИдентификатору(ИдентификаторЗадания);
	
	Если Задание <> Неопределено
		И Задание.Состояние = СостояниеФоновогоЗадания.Активно Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ОперацияНеВыполнена = Истина;
	ПоказатьПолныйТекстОшибки = Ложь;
	Если Задание = Неопределено Тогда
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Длительные операции.Фоновое задание не найдено'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка, , , Строка(ИдентификаторЗадания));
	Иначе
		Если Задание.Состояние = СостояниеФоновогоЗадания.ЗавершеноАварийно Тогда
			ОшибкаЗадания = Задание.ИнформацияОбОшибке;
			Если ОшибкаЗадания <> Неопределено Тогда
				ПоказатьПолныйТекстОшибки = Истина;
			КонецЕсли;
		ИначеЕсли Задание.Состояние = СостояниеФоновогоЗадания.Отменено Тогда
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Длительные операции.Фоновое задание отменено администратором'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Ошибка,
				,
				,
				НСтр("ru = 'Задание завершилось с неизвестной ошибкой.'"));
		Иначе
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если ПоказатьПолныйТекстОшибки Тогда
		ТекстОшибки = КраткоеПредставлениеОшибки(Задание.ИнформацияОбОшибке);
		ВызватьИсключение(ТекстОшибки);
	ИначеЕсли ОперацияНеВыполнена Тогда
		ВызватьИсключение(НСтр("ru = 'Не удалось выполнить данную операцию. 
		                             |Подробности см. в Журнале регистрации.'"));
	КонецЕсли;
	
КонецФункции

Функция GuidИзСтроки(ИсходнаяСтрока, ХешФ = Неопределено) Экспорт 
	_ХешФ_ = ?(ХешФ = Неопределено, ХешФункция.MD5, ХешФ);
	
	MD5 = Новый ХешированиеДанных(_ХешФ_);
  MD5.Добавить(ИсходнаяСтрока);
  ХешСумма = MD5.ХешСумма; 

  Возврат ДвоичныеДанныеВGuid(ХешСумма); 
КонецФункции

Функция ДвоичныеДанныеВGuid(ДвоичДанные)
  ИсходнаяСтрока = СтрЗаменить(Строка(ДвоичДанные), " ", "");
  Шаблон         = "XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX";
  ИдентификаторСтрока = "";
  НоваяПозиция = 0;
  
  Для ТекСимвол = 1 По СтрДлина(Шаблон) Цикл  
    ПораРазделять = Сред(Шаблон, ТекСимвол, 1) = "-";
    НоваяПозиция = НоваяПозиция +1;
    
    Если ПораРазделять Тогда
      ИдентификаторСтрока = ИдентификаторСтрока + Лев(ИсходнаяСтрока, НоваяПозиция-1) + "-";  
      ИсходнаяСтрока = Прав(ИсходнаяСтрока, СтрДлина(ИсходнаяСтрока) - НоваяПозиция+1);
      НоваяПозиция = 0;
    КонецЕсли;                                         
  КонецЦикла;

  ИдентификаторСтрока = ИдентификаторСтрока + "" + ИсходнаяСтрока; // остаточек
  
  Возврат Новый УникальныйИдентификатор(ИдентификаторСтрока); // типа уникальный идентификатор
КонецФункции

Функция ЗначениеВСтрокуXML(Значение) Экспорт
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку();
	СериализаторXDTO.ЗаписатьXML(ЗаписьXML, Значение, НазначениеТипаXML.Явное);
	
	Возврат ЗаписьXML.Закрыть();
КонецФункции

Функция ЗначениеИзСтрокиXML(СтрокаXML) Экспорт
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(СтрокаXML);
	
	Возврат СериализаторXDTO.ПрочитатьXML(ЧтениеXML);
КонецФункции

// Возвращает менеджер объекта по полному имени объекта метаданных.
// Ограничение: не обрабатываются точки маршрутов бизнес-процессов.
//
// Параметры:
//  ПолноеИмя - Строка - полное имя объекта метаданных. Пример: "Справочник.Организации".
//
// Возвращаемое значение:
//  СправочникМенеджер, ДокументМенеджер, ОбработкаМенеджер, РегистрСведенийМенеджер - менеджер объекта.
// 
// Пример:
//  МенеджерСправочника = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени("Справочник.Организации");
//  ПустаяСсылка = МенеджерСправочника.ПустаяСсылка();
//
Функция МенеджерОбъектаПоПолномуИмени(ПолноеИмя) Экспорт
	Перем КлассОМ, ИмяОМ, Менеджер;
	
	ЧастиИмени = СтрРазделить(ПолноеИмя, ".");
	
	Если ЧастиИмени.Количество() >= 2 Тогда
		КлассОМ = ЧастиИмени[0];
		ИмяОМ  = ЧастиИмени[1];
	КонецЕсли;
	
	Если      ВРег(КлассОМ) = "ПЛАНОБМЕНА" Тогда
		Менеджер = ПланыОбмена;
		
	ИначеЕсли ВРег(КлассОМ) = "СПРАВОЧНИК" Тогда
		Менеджер = Справочники;
		
	ИначеЕсли ВРег(КлассОМ) = "ДОКУМЕНТ" Тогда
		Менеджер = Документы;
		
	ИначеЕсли ВРег(КлассОМ) = "ЖУРНАЛДОКУМЕНТОВ" Тогда
		Менеджер = ЖурналыДокументов;
		
	ИначеЕсли ВРег(КлассОМ) = "ПЕРЕЧИСЛЕНИЕ" Тогда
		Менеджер = Перечисления;
		
	ИначеЕсли ВРег(КлассОМ) = "ОТЧЕТ" Тогда
		Менеджер = Отчеты;
		
	ИначеЕсли ВРег(КлассОМ) = "ОБРАБОТКА" Тогда
		Менеджер = Обработки;
		
	ИначеЕсли ВРег(КлассОМ) = "ПЛАНВИДОВХАРАКТЕРИСТИК" Тогда
		Менеджер = ПланыВидовХарактеристик;
		
	ИначеЕсли ВРег(КлассОМ) = "ПЛАНСЧЕТОВ" Тогда
		Менеджер = ПланыСчетов;
		
	ИначеЕсли ВРег(КлассОМ) = "ПЛАНВИДОВРАСЧЕТА" Тогда
		Менеджер = ПланыВидовРасчета;
		
	ИначеЕсли ВРег(КлассОМ) = "РЕГИСТРСВЕДЕНИЙ" Тогда
		Менеджер = РегистрыСведений;
		
	ИначеЕсли ВРег(КлассОМ) = "РЕГИСТРНАКОПЛЕНИЯ" Тогда
		Менеджер = РегистрыНакопления;
		
	ИначеЕсли ВРег(КлассОМ) = "РЕГИСТРБУХГАЛТЕРИИ" Тогда
		Менеджер = РегистрыБухгалтерии;
		
	ИначеЕсли ВРег(КлассОМ) = "РЕГИСТРРАСЧЕТА" Тогда
		Если ЧастиИмени.Количество() = 2 Тогда
			// Регистр расчета
			Менеджер = РегистрыРасчета;
		Иначе
			КлассПодчиненногоОМ = ЧастиИмени[2];
			ИмяПодчиненногоОМ = ЧастиИмени[3];
			Если ВРег(КлассПодчиненногоОМ) = "ПЕРЕРАСЧЕТ" Тогда
				// Перерасчет
				Попытка
					Менеджер = РегистрыРасчета[ИмяОМ].Перерасчеты;
					ИмяОм = ИмяПодчиненногоОМ;
				Исключение
					Менеджер = Неопределено;
				КонецПопытки;
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ВРег(КлассОМ) = "БИЗНЕСПРОЦЕСС" Тогда
		Менеджер = БизнесПроцессы;
		
	ИначеЕсли ВРег(КлассОМ) = "ЗАДАЧА" Тогда
		Менеджер = Задачи;
		
	ИначеЕсли ВРег(КлассОМ) = "КОНСТАНТА" Тогда
		Менеджер = Константы;
		
	ИначеЕсли ВРег(КлассОМ) = "ПОСЛЕДОВАТЕЛЬНОСТЬ" Тогда
		Менеджер = Последовательности;
	КонецЕсли;
	
	Если Менеджер <> Неопределено Тогда
		Попытка
			Возврат Менеджер[ИмяОМ];
		Исключение
			Менеджер = Неопределено;
		КонецПопытки;
	КонецЕсли;
	
	ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Неизвестный тип объекта метаданных ""%1""'"), ПолноеИмя);
	
КонецФункции

// Функция - Получить список метаданных подсистемы.
//
// Параметры:
//  ИмяПодсистемаКорень	 - Строка	 - Имя корневой подсистемы.
//  ИмяПодсистемы				 - Строка	 - Имя подсистемы.
// 
// Возвращаемое значение:
// 	Массив - Состав подсистем
//
Функция ПолучитьСписокМетаданныхПодсистемы(ИмяПодсистемаКорень, ИмяПодсистемы) Экспорт 
	СписокОбъектовМетаданных = Новый Массив();	
	ВсеПодсистемы = ПолучитьПодчиненныеПодсистемы(ИмяПодсистемы, ИмяПодсистемаКорень);
	Для Каждого Подсистема Из ВсеПодсистемы Цикл
		Для Каждого ОбъектМетаданных Из Подсистема.Состав Цикл
			СписокОбъектовМетаданных.Добавить(ОбъектМетаданных.ПолноеИмя());
		КонецЦикла;
	КонецЦикла;
	
	Возврат СписокОбъектовМетаданных;
КонецФункции

// Функция - Получить подчиненные подсистемы.
//
// Параметры:
//  ИмяПодсистемы				 - Строка	 - Имя подсистемы.
//  ИмяПодсистемыКорень	 - Строка	 - Имя корневой подсистемы.
// 
// Возвращаемое значение:
// 	Массив  -  Подчиненные подсистемы.
//
Функция ПолучитьПодчиненныеПодсистемы(Знач ИмяПодсистемы, ИмяПодсистемыКорень = Неопределено) Экспорт 
	
	Если ИмяПодсистемыКорень <> Неопределено Тогда
		Если ТипЗнч(ИмяПодсистемыКорень) = Тип("Строка") Тогда
			  ПодсистемаКорень = Метаданные.Подсистемы.Найти(ИмяПодсистемыКорень);
			Иначе
				ПодсистемаКорень = ИмяПодсистемыКорень;
		КонецЕсли;
	КонецЕсли;

	Если ТипЗнч(ИмяПодсистемы) = Тип("Строка") Тогда    
		Если ПодсистемаКорень = Неопределено Тогда
			ИмяПодсистемы = Метаданные.Подсистемы.Найти(ИмяПодсистемы);
		ИначеЕсли ИмяПодсистемыКорень <> ИмяПодсистемы Тогда
			ИмяПодсистемы = НайтиПодсистемуРекурсивно(ПодсистемаКорень.Подсистемы, ИмяПодсистемы, Ложь);
			Если ИмяПодсистемы.Количество() >= 1 Тогда
				ИмяПодсистемы = ИмяПодсистемы[0];
			КонецЕсли;
		Иначе
			ИмяПодсистемы = ПодсистемаКорень;
		КонецЕсли;
	КонецЕсли;
	
  Ответ = Новый Массив();
  Ответ.Добавить(ИмяПодсистемы);
  Для Каждого Подсистема Из ИмяПодсистемы.Подсистемы Цикл
    Если Подсистема.Подсистемы.Количество() > 0 Тогда
      Ответ = ОбщегоНазначенияКлиентСервер.СлитьМассивы(Ответ, ПолучитьПодчиненныеПодсистемы(Подсистема, ПодсистемаКорень));
    Иначе
      Ответ.Добавить(Подсистема);  
    КонецЕсли;
  КонецЦикла;
  
  Возврат Ответ;
КонецФункции

// Функция - Найти подсистему рекурсивно.
//
// Параметры:
//  КорневойУровень		 - 	ОбъектМетаданных - Корневая подсистема.
//  ИмяПодсистемы			 - 	Строка - Имя подсистемы.
//  ВключаяПодчиненные - 	Булево - Истина обход будет включать подчиненные подсистемы.
// 
// Возвращаемое значение:
//  ОбъектМетаданных - Подсистема.
//
Функция НайтиПодсистемуРекурсивно(КорневойУровень, ИмяПодсистемы, ВключаяПодчиненные)  
  Подсистема = КорневойУровень.Найти(ИмяПодсистемы);
  Если Подсистема <> Неопределено Тогда
    Возврат ?(ВключаяПодчиненные, ПолучитьПодчиненныеПодсистемы(Подсистема), ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Подсистема));
  Иначе
    Для Каждого Подсис Из КорневойУровень Цикл
      Подсистемы = НайтиПодсистемуРекурсивно(Подсис.Подсистемы, ИмяПодсистемы, ВключаяПодчиненные);
      Если Подсистемы <> Неопределено И Подсистемы.Количество() > 0  Тогда
        Возврат Подсистемы;
      КонецЕсли;
    КонецЦикла;
  КонецЕсли;
КонецФункции


// Возвращает имя базового типа по переданному значению объекта метаданных.
//
// Параметры:
//  ОбъектМетаданных - ОбъектМетаданных - объект метаданных, по которому необходимо определить базовый тип.
// 
// Возвращаемое значение:
//  Строка - имя базового типа по переданному значению объекта метаданных.
//
// Пример:
//  ИмяБазовогоТипа = ОбщегоНазначения.ИмяБазовогоТипаПоОбъектуМетаданных(Метаданные.Справочники.Номенклатура); = "Справочники".
//
Функция ИмяБазовогоТипаПоОбъектуМетаданных(ОбъектМетаданных) Экспорт
	
	Если Метаданные.Документы.Содержит(ОбъектМетаданных) Тогда
		Возврат "Документы";
		
	ИначеЕсли Метаданные.Справочники.Содержит(ОбъектМетаданных) Тогда
		Возврат "Справочники";
		
	ИначеЕсли Метаданные.Перечисления.Содержит(ОбъектМетаданных) Тогда
		Возврат "Перечисления";
		
	ИначеЕсли Метаданные.РегистрыСведений.Содержит(ОбъектМетаданных) Тогда
		Возврат "РегистрыСведений";
		
	ИначеЕсли Метаданные.РегистрыНакопления.Содержит(ОбъектМетаданных) Тогда
		Возврат "РегистрыНакопления";
		
	ИначеЕсли Метаданные.РегистрыБухгалтерии.Содержит(ОбъектМетаданных) Тогда
		Возврат "РегистрыБухгалтерии";
		
	ИначеЕсли Метаданные.РегистрыРасчета.Содержит(ОбъектМетаданных) Тогда
		Возврат "РегистрыРасчета";
		
	ИначеЕсли Метаданные.ПланыОбмена.Содержит(ОбъектМетаданных) Тогда
		Возврат "ПланыОбмена";
		
	ИначеЕсли Метаданные.ПланыВидовХарактеристик.Содержит(ОбъектМетаданных) Тогда
		Возврат "ПланыВидовХарактеристик";
		
	ИначеЕсли Метаданные.БизнесПроцессы.Содержит(ОбъектМетаданных) Тогда
		Возврат "БизнесПроцессы";
		
	ИначеЕсли Метаданные.Задачи.Содержит(ОбъектМетаданных) Тогда
		Возврат "Задачи";
		
	ИначеЕсли Метаданные.ПланыСчетов.Содержит(ОбъектМетаданных) Тогда
		Возврат "ПланыСчетов";
		
	ИначеЕсли Метаданные.ПланыВидовРасчета.Содержит(ОбъектМетаданных) Тогда
		Возврат "ПланыВидовРасчета";
		
	ИначеЕсли Метаданные.Константы.Содержит(ОбъектМетаданных) Тогда
		Возврат "Константы";
		
	ИначеЕсли Метаданные.ЖурналыДокументов.Содержит(ОбъектМетаданных) Тогда
		Возврат "ЖурналыДокументов";
		
	ИначеЕсли Метаданные.Последовательности.Содержит(ОбъектМетаданных) Тогда
		Возврат "Последовательности";
		
	ИначеЕсли Метаданные.РегламентныеЗадания.Содержит(ОбъектМетаданных) Тогда
		Возврат "РегламентныеЗадания";
		
	ИначеЕсли Метаданные.РегистрыРасчета.Содержит(ОбъектМетаданных.Родитель())
		И ОбъектМетаданных.Родитель().Перерасчеты.Найти(ОбъектМетаданных.Имя) = ОбъектМетаданных Тогда
		Возврат "Перерасчеты";
		
	Иначе
		
		Возврат "";
		
	КонецЕсли;
	
КонецФункции

// Функция обертка, для вызова из клиента.
//
// Возвращаемое значение:
//   СправочникСсылка   - подключение к репозиторию.
//
Функция ПолучитьЕдинственнуюНастройкуПодключенияКРепозиторию() Экспорт 
	// Функция обертка, для вызова из клиента.
	Возврат Справочники.БФТ_НастройкаПодключенияКРепозиторию.ПолучитьЕдинственнуюНастройкуПодключенияКРепозиторию(); 
КонецФункции



#Область Функции_определения_типов_объектов_метаданных

// Ссылочные типы данных

// Определяет принадлежность объекта метаданных к общему типу "Документ".
//
// Параметры:
//  ОбъектМетаданных - ОбъектМетаданных - объект, для которого необходимо определить принадлежность к документам.
// 
// Возвращаемое значение:
//   Булево - Истина, если объект является документом.
//
Функция ЭтоДокумент(ОбъектМетаданных) Экспорт
	
	Возврат Метаданные.Документы.Содержит(ОбъектМетаданных);
	
КонецФункции

// Определяет принадлежность объекта метаданных к общему типу "Справочник".
//
// Параметры:
//  ОбъектМетаданных - ОбъектМетаданных - объект, для которого необходимо определить принадлежность к заданному типу.
// 
// Возвращаемое значение:
//   Булево - Истина, если объект является справочником.
//
Функция ЭтоСправочник(ОбъектМетаданных) Экспорт
	
	Возврат Метаданные.Справочники.Содержит(ОбъектМетаданных);
	
КонецФункции

// Определяет принадлежность объекта метаданных к общему типу "Перечисление".
//
// Параметры:
//  ОбъектМетаданных - ОбъектМетаданных - объект, для которого необходимо определить принадлежность к заданному типу.
// 
// Возвращаемое значение:
//   Булево - Истина, если объект является перечислением.
//
Функция ЭтоПеречисление(ОбъектМетаданных) Экспорт
	
	Возврат Метаданные.Перечисления.Содержит(ОбъектМетаданных);
	
КонецФункции

// Определяет принадлежность объекта метаданных к общему типу "План обмена".
//
// Параметры:
//  ОбъектМетаданных - ОбъектМетаданных - объект, для которого необходимо определить принадлежность к заданному типу.
// 
// Возвращаемое значение:
//   Булево - Истина, если объект является планом обмена.
//
Функция ЭтоПланОбмена(ОбъектМетаданных) Экспорт
	
	Возврат Метаданные.ПланыОбмена.Содержит(ОбъектМетаданных);
	
КонецФункции

// Определяет принадлежность объекта метаданных к общему типу "План видов характеристик".
//
// Параметры:
//  ОбъектМетаданных - ОбъектМетаданных - объект, для которого необходимо определить принадлежность к заданному типу.
// 
// Возвращаемое значение:
//   Булево - Истина, если объект является планом видов характеристик.
//
Функция ЭтоПланВидовХарактеристик(ОбъектМетаданных) Экспорт
	
	Возврат Метаданные.ПланыВидовХарактеристик.Содержит(ОбъектМетаданных);
	
КонецФункции

// Определяет принадлежность объекта метаданных к общему типу "Бизнес-процесс".
//
// Параметры:
//  ОбъектМетаданных - ОбъектМетаданных - объект, для которого необходимо определить принадлежность к заданному типу.
// 
// Возвращаемое значение:
//   Булево - Истина, если объект является бизнес-процессом.
//
Функция ЭтоБизнесПроцесс(ОбъектМетаданных) Экспорт
	
	Возврат Метаданные.БизнесПроцессы.Содержит(ОбъектМетаданных);
	
КонецФункции

// Определяет принадлежность объекта метаданных к общему типу "Задача".
//
// Параметры:
//  ОбъектМетаданных - ОбъектМетаданных - объект, для которого необходимо определить принадлежность к заданному типу.
// 
// Возвращаемое значение:
//   Булево - Истина, если объект является задачей.
//
Функция ЭтоЗадача(ОбъектМетаданных) Экспорт
	
	Возврат Метаданные.Задачи.Содержит(ОбъектМетаданных);
	
КонецФункции

// Определяет принадлежность объекта метаданных к общему типу "План счетов".
//
// Параметры:
//  ОбъектМетаданных - ОбъектМетаданных - объект, для которого необходимо определить принадлежность к заданному типу.
// 
// Возвращаемое значение:
//   Булево - Истина, если объект является планом счетов.
//
Функция ЭтоПланСчетов(ОбъектМетаданных) Экспорт
	
	Возврат Метаданные.ПланыСчетов.Содержит(ОбъектМетаданных);
	
КонецФункции

// Определяет принадлежность объекта метаданных к общему типу "План видов расчета".
//
// Параметры:
//  ОбъектМетаданных - ОбъектМетаданных - объект, для которого необходимо определить принадлежность к заданному типу.
// 
// Возвращаемое значение:
//   Булево - Истина, если объект является планом видов расчета.
//
Функция ЭтоПланВидовРасчета(ОбъектМетаданных) Экспорт
	
	Возврат Метаданные.ПланыВидовРасчета.Содержит(ОбъектМетаданных);
	
КонецФункции

// Регистры

// Определяет принадлежность объекта метаданных к общему типу "Регистр сведений".
//
// Параметры:
//  ОбъектМетаданных - ОбъектМетаданных - объект, для которого необходимо определить принадлежность к заданному типу.
// 
// Возвращаемое значение:
//   Булево - Истина, если объект является регистром сведений.
//
Функция ЭтоРегистрСведений(ОбъектМетаданных) Экспорт
	
	Возврат Метаданные.РегистрыСведений.Содержит(ОбъектМетаданных);
	
КонецФункции

// Определяет принадлежность объекта метаданных к общему типу "Регистр накопления".
//
// Параметры:
//  ОбъектМетаданных - ОбъектМетаданных - объект, для которого необходимо определить принадлежность к заданному типу.
// 
// Возвращаемое значение:
//   Булево - Истина, если объект является регистром накопления.
//
Функция ЭтоРегистрНакопления(ОбъектМетаданных) Экспорт
	
	Возврат Метаданные.РегистрыНакопления.Содержит(ОбъектМетаданных);
	
КонецФункции

// Определяет принадлежность объекта метаданных к общему типу "Регистр бухгалтерии".
//
// Параметры:
//  ОбъектМетаданных - ОбъектМетаданных - объект, для которого необходимо определить принадлежность к заданному типу.
// 
// Возвращаемое значение:
//   Булево - Истина, если объект является регистром бухгалтерии.
//
Функция ЭтоРегистрБухгалтерии(ОбъектМетаданных) Экспорт
	
	Возврат Метаданные.РегистрыБухгалтерии.Содержит(ОбъектМетаданных);
	
КонецФункции

// Определяет принадлежность объекта метаданных к общему типу "Регистр расчета".
//
// Параметры:
//  ОбъектМетаданных - ОбъектМетаданных - объект, для которого необходимо определить принадлежность к заданному типу.
// 
// Возвращаемое значение:
//   Булево - Истина, если объект является регистром расчета.
//
Функция ЭтоРегистрРасчета(ОбъектМетаданных) Экспорт
	
	Возврат Метаданные.РегистрыРасчета.Содержит(ОбъектМетаданных);
	
КонецФункции

// Константы

// Определяет принадлежность объекта метаданных к общему типу "Константа".
//
// Параметры:
//  ОбъектМетаданных - ОбъектМетаданных - объект, для которого необходимо определить принадлежность к заданному типу.
// 
// Возвращаемое значение:
//   Булево - Истина, если объект является константой.
//
Функция ЭтоКонстанта(ОбъектМетаданных) Экспорт
	
	Возврат Метаданные.Константы.Содержит(ОбъектМетаданных);
	
КонецФункции

// Журналы документов

// Определяет принадлежность объекта метаданных к общему типу "Журнал документов".
//
// Параметры:
//  ОбъектМетаданных - ОбъектМетаданных - объект, для которого необходимо определить принадлежность к заданному типу.
// 
// Возвращаемое значение:
//   Булево - Истина, если объект является журналом документов.
//
Функция ЭтоЖурналДокументов(ОбъектМетаданных) Экспорт
	
	Возврат Метаданные.ЖурналыДокументов.Содержит(ОбъектМетаданных);
	
КонецФункции

// Последовательности

// Определяет принадлежность объекта метаданных к общему типу "Последовательности".
//
// Параметры:
//  ОбъектМетаданных - ОбъектМетаданных - объект, для которого необходимо определить принадлежность к заданному типу.
// 
// Возвращаемое значение:
//   Булево - Истина, если объект является последовательностью.
//
Функция ЭтоПоследовательность(ОбъектМетаданных) Экспорт
	
	Возврат Метаданные.Последовательности.Содержит(ОбъектМетаданных);
	
КонецФункции

// РегламентныеЗадания

// Определяет принадлежность объекта метаданных к общему типу "Регламентные задания".
//
// Параметры:
//  ОбъектМетаданных - ОбъектМетаданных - объект, для которого необходимо определить принадлежность к заданному типу.
// 
// Возвращаемое значение:
//   Булево - Истина, если объект является регламентным заданием.
//
Функция ЭтоРегламентноеЗадание(ОбъектМетаданных) Экспорт
	
	Возврат Метаданные.РегламентныеЗадания.Содержит(ОбъектМетаданных);
	
КонецФункции

// Общие

// Определяет принадлежность объекта метаданных к типу регистр.
//
// Параметры:
//  ОбъектМетаданных - ОбъектМетаданных - объект, для которого необходимо определить принадлежность к заданному типу.
// 
// Возвращаемое значение:
//   Булево - Истина, если объект является каким-либо регистром.
//
Функция ЭтоРегистр(ОбъектМетаданных) Экспорт
	
	Возврат Метаданные.РегистрыБухгалтерии.Содержит(ОбъектМетаданных)
		Или Метаданные.РегистрыНакопления.Содержит(ОбъектМетаданных)
		Или Метаданные.РегистрыРасчета.Содержит(ОбъектМетаданных)
		Или Метаданные.РегистрыСведений.Содержит(ОбъектМетаданных);
		
КонецФункции

// Определяет принадлежность объекта метаданных к ссылочному типу.
//
// Параметры:
//  ОбъектМетаданных - ОбъектМетаданных - объект, для которого необходимо определить принадлежность к заданному типу.
// 
// Возвращаемое значение:
//   Булево - Истина, если объект ссылочного типа.
//
Функция ЭтоОбъектСсылочногоТипа(ОбъектМетаданных) Экспорт
	
	ИмяОбъектаМетаданных = ОбъектМетаданных.ПолноеИмя();
	Позиция = СтрНайти(ИмяОбъектаМетаданных, ".");
	Если Позиция > 0 Тогда 
		ИмяБазовогоТипа = Лев(ИмяОбъектаМетаданных, Позиция - 1);
		Возврат ИмяБазовогоТипа = "Справочник"
			Или ИмяБазовогоТипа = "Документ"
			Или ИмяБазовогоТипа = "БизнесПроцесс"
			Или ИмяБазовогоТипа = "Задача"
			Или ИмяБазовогоТипа = "ПланСчетов"
			Или ИмяБазовогоТипа = "ПланОбмена"
			Или ИмяБазовогоТипа = "ПланВидовХарактеристик"
			Или ИмяБазовогоТипа = "ПланВидовРасчета";
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

#КонецОбласти