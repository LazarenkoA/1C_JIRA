
Функция ПроверкаЗаполненияНастроекJIRA(Пользователь = Неопределено, Пароль = Неопределено) Экспорт 
	//ИдентификаторПользователя = Строка(Константы.ПользовательНастроек.Получить());
	Пароль = ХранилищеОбщихНастроек.Загрузить("Настройки JIRA", "JIRA_Password");
	Пользователь = ХранилищеОбщихНастроек.Загрузить("Настройки JIRA", "JIRA_Login");

	Ошибки = Новый Массив();
	Если Не	ЗначениеЗаполнено(Константы.JIRA_URL.Получить()) Тогда
		Ошибки.Добавить("Не заполнен URL подключения к JIRA");	
	КонецЕсли;
	Если Не	ЗначениеЗаполнено(Пароль) Тогда
		Ошибки.Добавить("Не заполнен пароль подключения к JIRA");	
	КонецЕсли;
	Если Не	ЗначениеЗаполнено(Пользователь) Тогда
		Ошибки.Добавить("Не заполнен пользователь подключения к JIRA");	
	КонецЕсли;
	Если Не	ЗначениеЗаполнено(Константы.JIRA_JQL.Получить()) Тогда
		Ошибки.Добавить("Не заполнен базовый JQL");	
	КонецЕсли;                                    
	
	Возврат СтрСоединить(Ошибки, Символы.ПС);
КонецФункции

Функция ПолучитьЗначениеКонстанты(ИмяКонстанты) Экспорт 
	Возврат Константы[ИмяКонстанты].Получить();	
КонецФункции

Функция ПолучитьЗначениеПараметраСеанса(ИмяПараметры) Экспорт 
	Возврат ПараметрыСеанса[ИмяПараметры];
КонецФункции

Процедура УстановитьЗначениеПараметраСеанса(ИмяПараметры, Значение) Экспорт 
	ПараметрыСеанса[ИмяПараметры] = Значение;
КонецПроцедуры

Функция ПолучитьКонфликтующиеДаты() Экспорт 
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Задачи.Номер КАК Номер,
	|	Задачи.Заголовок КАК Заголовок,
	|	Задачи.Приоритет КАК Приоритет,
	|	Задачи.Автор КАК Автор,
	|	Задачи.ДатуЗавершенияУстановилАвтор КАК ДатуЗавершенияУстановилАвтор,
	|	Задачи.Исполнитель КАК Исполнитель,
	|	Задачи.ПлановаяДатаЗавершения КАК ПлановаяДатаЗавершения,
	|	(МАКСИМУМ(Задачи.Оценка) - СУММА(СписаниеВремени.Часы)) / &РабДней КАК ОценкаВРабДнях
	|ПОМЕСТИТЬ ОтборЗадач
	|ИЗ
	|	РегистрСведений.Задачи КАК Задачи
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СписаниеВремени.СрезПоследних(, ) КАК СписаниеВремени
	|		ПО Задачи.Номер = СписаниеВремени.НомерЗадачи
	|ГДЕ
	|	Задачи.НомерРодительскойЗадачи = """"
	|	И Задачи.ПлановаяДатаЗавершения >= &ТекДата
	|	И НЕ Задачи.Статус В (&СтатусыИсключения)
	|	И Задачи.Исполнитель В ИЕРАРХИИ (&Аналитики, &Разработка, &Тестирование)
	|
	|СГРУППИРОВАТЬ ПО
	|	Задачи.Исполнитель,
	|	Задачи.Номер,
	|	Задачи.Заголовок,
	|	Задачи.Приоритет,
	|	Задачи.Автор,
	|	Задачи.ДатуЗавершенияУстановилАвтор,
	|	Задачи.ПлановаяДатаЗавершения
	|
	|ИМЕЮЩИЕ
	|	МАКСИМУМ(Задачи.Оценка) - СУММА(СписаниеВремени.Часы) > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Задачи.Исполнитель КАК Исполнитель,
	|	Задачи.ПлановаяДатаЗавершения КАК ПлановаяДатаЗавершения,
	|	СУММА(Задачи.ОценкаВРабДнях) КАК ОценкаВРабДнях
	|ПОМЕСТИТЬ Группировка1
	|ИЗ
	|	ОтборЗадач КАК Задачи
	|
	|СГРУППИРОВАТЬ ПО
	|	Задачи.Исполнитель,
	|	Задачи.ПлановаяДатаЗавершения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Группировка.Исполнитель КАК Исполнитель,
	|	Группировка.ПлановаяДатаЗавершения КАК ПлановаяДатаЗавершения,
	|	МАКСИМУМ(Группировка.ОценкаВРабДнях + ЕСТЬNULL(ДанныеПрошлыхДат.ОценкаВРабДнях, 0)) КАК ОценкаВРабДнях,
	|	РАЗНОСТЬДАТ(&ТекДата, Группировка.ПлановаяДатаЗавершения, ЧАС) / 24 КАК РазностьКалендарныхДат
	|ПОМЕСТИТЬ ИтоговаяГруппировка
	|ИЗ
	|	Группировка1 КАК Группировка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Группировка1 КАК ДанныеПрошлыхДат
	|		ПО Группировка.Исполнитель = ДанныеПрошлыхДат.Исполнитель
	|			И Группировка.ПлановаяДатаЗавершения > ДанныеПрошлыхДат.ПлановаяДатаЗавершения
	|
	|СГРУППИРОВАТЬ ПО
	|	Группировка.Исполнитель,
	|	Группировка.ПлановаяДатаЗавершения
	|
	|ИМЕЮЩИЕ
	|	(ВЫРАЗИТЬ(МАКСИМУМ(Группировка.ОценкаВРабДнях + ЕСТЬNULL(ДанныеПрошлыхДат.ОценкаВРабДнях, 0)) КАК ЧИСЛО(10, 2))) > (ВЫРАЗИТЬ(РАЗНОСТЬДАТ(&ТекДата, Группировка.ПлановаяДатаЗавершения, ЧАС) / 24 КАК ЧИСЛО(10, 2)))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОтборЗадач.Номер КАК Номер,
	|	ОтборЗадач.Заголовок КАК Заголовок,
	|	ИтоговаяГруппировка.ПлановаяДатаЗавершения КАК ПлановаяДатаЗавершения,
	|	-(ОтборЗадач.Приоритет.Код - 5) КАК Картинка,
	|	ВЫРАЗИТЬ(ОтборЗадач.ОценкаВРабДнях КАК ЧИСЛО(10, 2)) КАК ОценкаВРабДнях,
	|	ВЫРАЗИТЬ(ИтоговаяГруппировка.РазностьКалендарныхДат КАК ЧИСЛО(10, 2)) КАК РазностьКалендарныхДат,
	|	ЛОЖЬ КАК ДатаИзменена,
	|	ОтборЗадач.Автор КАК Автор,
	|	ИтоговаяГруппировка.Исполнитель КАК Исполнитель,
	|	ОтборЗадач.ДатуЗавершенияУстановилАвтор КАК ДатуЗавершенияУстановилАвтор,
	|	ОтборЗадач.ПлановаяДатаЗавершения КАК ПлановаяДатаЗавершенияВходящихВПериод
	|ИЗ
	|	ИтоговаяГруппировка КАК ИтоговаяГруппировка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОтборЗадач КАК ОтборЗадач
	|		ПО ИтоговаяГруппировка.Исполнитель = ОтборЗадач.Исполнитель
	|			И ИтоговаяГруппировка.ПлановаяДатаЗавершения >= ОтборЗадач.ПлановаяДатаЗавершения
	|
	|УПОРЯДОЧИТЬ ПО
	|	ОтборЗадач.ПлановаяДатаЗавершения
	|ИТОГИ
	|	СУММА(ОценкаВРабДнях),
	|	МАКСИМУМ(РазностьКалендарныхДат)
	|ПО
	|	Исполнитель,
	|	ПлановаяДатаЗавершения";
	
	Запрос.УстановитьПараметр("ТекДата", ТекущаяДатаСеанса());
	РабочийДень = Константы.РабочийДень.Получить();
	Запрос.УстановитьПараметр("РабДней", ?(РабочийДень = 0, 8, РабочийДень));
	Запрос.УстановитьПараметр("СтатусыИсключения", СтрРазделить("Закрыт,Сделан,Предоставлено ПР", ","));
	Запрос.УстановитьПараметр("Аналитики", Справочники.Пользователи.Аналитика);
	Запрос.УстановитьПараметр("Разработка", Справочники.Пользователи.Разработка);
	Запрос.УстановитьПараметр("Тестирование", Справочники.Пользователи.Тестирование);

	Возврат Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
КонецФункции

Функция ПолучитьРасхождениеВОценках() Экспорт 
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Задачи.Номер КАК Номер,
	               |	Задачи.Оценка КАК Оценка,
	               |	Сабтаски.Номер КАК СабтаскНомер,
	               |	Сабтаски.Оценка КАК СабтаскОценка,
	               |	-(Задачи.Приоритет.Код - 5) КАК Картинка,
	               |	Сабтаски.Тип.Родитель КАК ТипСабтаскаРодитель
	               |ИЗ
	               |	РегистрСведений.Задачи КАК Задачи
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.Задачи КАК Сабтаски
	               |		ПО Задачи.Номер = Сабтаски.НомерРодительскойЗадачи
	               |			И (Задачи.Оценка > 0)
	               |			И Задачи.Оценка < Сабтаски.Оценка
	               |			И (Сабтаски.НомерРодительскойЗадачи <> """")";
	
	Возврат Запрос.Выполнить().Выбрать();
КонецФункции

Функция ПолучитьРасхождениеВОценкахКоличество() Экспорт 
	Возврат ПолучитьРасхождениеВОценках().Количество();	
КонецФункции

Функция КоличествоКонфликтующихДат() Экспорт 
	Дерево = ПолучитьКонфликтующиеДаты();
	Возврат Дерево.Строки.Количество();	
КонецФункции

Функция ПолучитьЗадачиПоСГруппировкой(НомераЗадач, ПолеИтог) Экспорт 
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Задачи.Номер КАК Номер,
		|	Задачи.Автор КАК Автор,
		|	Задачи.Заголовок КАК Заголовок,
		|	Задачи.Исполнитель КАК Исполнитель,
		|	Задачи.ПлановаяДатаЗавершения КАК ПлановаяДатаЗавершения
		|ИЗ
		|	РегистрСведений.Задачи КАК Задачи
		|ГДЕ
		|	Задачи.Номер В(&НомераЗадач)
		|	И НЕ Задачи.Статус В (&СтатусыИсключения)
		|ИТОГИ ПО
		|	" + ПолеИтог;
	
	Запрос.УстановитьПараметр("НомераЗадач", НомераЗадач);
	Запрос.УстановитьПараметр("СтатусыИсключения", СтрРазделить("Закрыт,Сделан,Предоставлено ПР", ","));
	Возврат Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
КонецФункции

Функция ПолучитьНомераНовыхЗаписей() Экспорт 
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Задачи.Номер КАК Номер
		|ИЗ
		|	РегистрСведений.Задачи КАК Задачи
		|ГДЕ
		|	Задачи.ЭтоНовая
		|	И Задачи.НомерРодительскойЗадачи = """"";
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Номер");
КонецФункции

Процедура СнятьФлагЭтоНовая() Экспорт 
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Задачи.Номер КАК Номер
		|ИЗ
		|	РегистрСведений.Задачи КАК Задачи
		|ГДЕ
		|	Задачи.ЭтоНовая";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Набор = РегистрыСведений.Задачи.СоздатьНаборЗаписей();	
		Набор.Отбор.Номер.Установить(Выборка.Номер);
		Набор.Прочитать();
		Если Набор.Количество() > 1 Тогда
			ВызватьИсключение СтрШаблон("По номеру задачи ""%1"" нашлось несколько записей", Выборка.Номер);	
		ИначеЕсли Набор.Количество() = 1 Тогда
			Набор[0].ЭтоНовая = Ложь;
		КонецЕсли;
		Набор.Записать();
	КонецЦикла;
КонецПроцедуры

Процедура Очистить_JIRA_Cookies() Экспорт
	ПараметрыСеанса.JIRA_Cookies = "";
КонецПроцедуры

Функция НайтиЗаданиеПоИдентификатору(Знач ИдентификаторЗадания)
	
	Если ТипЗнч(ИдентификаторЗадания) = Тип("Строка") Тогда
		ИдентификаторЗадания = Новый УникальныйИдентификатор(ИдентификаторЗадания);
	КонецЕсли;
	
	Задание = ФоновыеЗадания.НайтиПоУникальномуИдентификатору(ИдентификаторЗадания);
	Возврат Задание;
	
КонецФункции


// Проверяет состояние фонового задания по переданному идентификатору.
// При аварийном завершении задания вызывает исключение.
//
// Параметры:
//  ИдентификаторЗадания - УникальныйИдентификатор - идентификатор фонового задания. 
//
// Возвращаемое значение:
//  Булево - состояние выполнения задания.
// 
Функция ЗаданиеВыполнено(Знач ИдентификаторЗадания) Экспорт
	
	Задание = НайтиЗаданиеПоИдентификатору(ИдентификаторЗадания);
	
	Если Задание <> Неопределено
		И Задание.Состояние = СостояниеФоновогоЗадания.Активно Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ОперацияНеВыполнена = Истина;
	ПоказатьПолныйТекстОшибки = Ложь;
	Если Задание = Неопределено Тогда
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Длительные операции.Фоновое задание не найдено'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка, , , Строка(ИдентификаторЗадания));
	Иначе
		Если Задание.Состояние = СостояниеФоновогоЗадания.ЗавершеноАварийно Тогда
			ОшибкаЗадания = Задание.ИнформацияОбОшибке;
			Если ОшибкаЗадания <> Неопределено Тогда
				ПоказатьПолныйТекстОшибки = Истина;
			КонецЕсли;
		ИначеЕсли Задание.Состояние = СостояниеФоновогоЗадания.Отменено Тогда
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Длительные операции.Фоновое задание отменено администратором'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Ошибка,
				,
				,
				НСтр("ru = 'Задание завершилось с неизвестной ошибкой.'"));
		Иначе
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если ПоказатьПолныйТекстОшибки Тогда
		ТекстОшибки = КраткоеПредставлениеОшибки(Задание.ИнформацияОбОшибке);
		ВызватьИсключение(ТекстОшибки);
	ИначеЕсли ОперацияНеВыполнена Тогда
		ВызватьИсключение(НСтр("ru = 'Не удалось выполнить данную операцию. 
		                             |Подробности см. в Журнале регистрации.'"));
	КонецЕсли;
	
КонецФункции
