/////////////// Защита модуля ///////////////
// @protect                                //
/////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Процедура определения конфигурации БФТ.
//
// Параметры:
//  ДиректорияКорень  - Строка - дирректория корня;
//  НовыйКаталог  - Строка - новый каталог;
//  Список  - Массив - массив элементов;
//  Дерево  - ДеревоЗначений - дерефо элементов.
// 
Процедура ОтделитьКонфигурациюБФТ(ДиректорияКорень, НовыйКаталог, Список, Дерево) Экспорт
	// ЛогироватьИнформацию("Отделяем конфигурацию БФТ", СтрШаблон("Источник:
	//|%1
	//|Приемник:
	//|%2
	//|Список объектов:
	//|%3", ДиректорияКорень, НовыйКаталог, СтрСоединить(Список, Символы.ПС)));
	
	Для Каждого МетаОбъект Из Список Цикл
		// Сначала каталоги
		Отбор = Новый Структура("Имя", МетаОбъект);
		Строки = Дерево.Строки.НайтиСтроки(Отбор, Истина);
		Для Каждого Строка Из Строки Цикл
			ПолноеИмя = СтрШаблон("%1\%2", ДиректорияКорень, ПолучитьАбсолютныйПуть(Строка)); 
			НовыйПуть = СтрЗаменить(ПолноеИмя, ДиректорияКорень, НовыйКаталог); 
			ПереместитьСодержимоеКаталога(ПолноеИмя, НовыйПуть);        
		КонецЦикла;
		
		// Потом xml
		Отбор = Новый Структура("Имя", СтрШаблон("%1.xml", МетаОбъект));
		Строки = Дерево.Строки.НайтиСтроки(Отбор, Истина);
		Для Каждого Строка Из Строки Цикл                        
			ПолноеИмя = СтрШаблон("%1\%2", ДиректорияКорень, ПолучитьАбсолютныйПуть(Строка)); 
			НовыйПуть = СтрЗаменить(ПолноеИмя, ДиректорияКорень, НовыйКаталог); 
			ПереместитьФайлФайлССозданиемКаталогов(ПолноеИмя, НовыйПуть);        
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

// Процедура определения подсистемы БФТ.
//
// Параметры:
//  КаталогСКонфой  - Строка - дирректория с конфигурацией.
// 
Процедура ОтделитьПодсистемуБФТ(КаталогСКонфой) Экспорт  
  Если Не БФТ_ФайлСуществует(КаталогСКонфой) Тогда
    ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрШаблон("Директория ""%1"" не существует", КаталогСКонфой));    
    Возврат;
  КонецЕсли;
  
  ПутьКПодсистеме = СтрШаблон("%1\Subsystems\АЦК_БУ", КаталогСКонфой);
  Если Не БФТ_ФайлСуществует(ПутьКПодсистеме) Тогда
    ВызватьИсключение("Подсистема АЦК_БУ не найдена");    
  КонецЕсли;
  
  НовыйКаталог = СтрШаблон("%1_Separation", КаталогСКонфой);
  НовыйПутьКПодсистеме = СтрЗаменить(ПутьКПодсистеме, КаталогСКонфой, НовыйКаталог);
  БФТ_ДлительныеОперацииСервер.ПереместитьСодержимоеКаталога(ПутьКПодсистеме, НовыйПутьКПодсистеме);
  
  СписокОбъектовБФТ = Новый Массив();
  Для Каждого Ф Из НайтиФайлы(НовыйПутьКПодсистеме, "*.xml", Истина) Цикл
    Состав = ПолучитьСоставПодсистемы(Ф.ПолноеИмя);    
    СписокОбъектовБФТ = ОбщегоНазначенияКлиентСервер.СлитьМассивы(СписокОбъектовБФТ, Состав);                       
  КонецЦикла;
  
  // Группируем элементы массива, что бы потом распараллелить.
  ГруппировкаМассива = Новый Соответствие();  
  Для Каждого МетаОбъект Из ОбщегоНазначенияКлиентСервер.СвернутьМассив(СписокОбъектовБФТ) Цикл
    МетаОбъектРазделен = СтрРазделить(МетаОбъект, ".");
    Если МетаОбъектРазделен.Количество() <> 2 Тогда
      Продолжить;  
    КонецЕсли;
    
    Если ГруппировкаМассива[МетаОбъектРазделен[0]] = Неопределено Тогда
      ГруппировкаМассива.Вставить(МетаОбъектРазделен[0], Новый Массив());
    КонецЕсли;
    
    ГруппировкаМассива[МетаОбъектРазделен[0]].Добавить(МетаОбъектРазделен[1]);
  КонецЦикла;
  
  ОтделитьКонфуПараллельно(КаталогСКонфой, НовыйКаталог, ГруппировкаМассива);
КонецПроцедуры

// Процедура отправки ФЗ.
//
// Параметры:
//  Данные  - ТекстXML - данные для отправки.
//
Процедура ОтправитьДанныеФЗ(Данные) Экспорт 
  // Если Не ПараметрыСеанса.БФТ_ПреобразованиеXSTВыполняетсяВФоне Тогда.
  //  Возврат;    
  // КонецЕсли;
  
  Если ТипЗнч(Данные) = Тип("ДокументDOM") Тогда
    ПередаваемыйТекст = УтилитыDOM.ПолучитьТекстИзДокументDOM(Данные);        
  Иначе
    ПередаваемыйТекст = Данные;
  КонецЕсли;
  
  ПередаваемыйТекст = ОбщегоНазначенияСервер.ЗначениеВСтрокуXML(ПередаваемыйТекст);
  
  Текст = СтрШаблон("{{%1}}", ПередаваемыйТекст);
  ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст);
КонецПроцедуры

// Процедура перемещения содержимого каталога.
//
// Параметры:
//  КореньИсточник  - Строка - каталог источника данных;
//  КореньНазначения  - Строка - каталог назначения перемещения.
//
Процедура ПереместитьСодержимоеКаталога(КореньИсточник, КореньНазначения) Экспорт 
  Для Каждого Ф Из НайтиФайлы(КореньИсточник, "*.*", Истина) Цикл
    Если Не ф.Существует() Тогда
      Продолжить;  
    КонецЕсли;
      
    НовыйПуть = СтрЗаменить(ф.ПолноеИмя, КореньИсточник, КореньНазначения);
    Если Не ф.ЭтоКаталог() Тогда
      ПереместитьФайлФайлССозданиемКаталогов(ф.ПолноеИмя, НовыйПуть);
    Иначе
      ПереместитьСодержимоеКаталога(ф.ПолноеИмя, НовыйПуть);
    КонецЕсли;
  КонецЦикла;
КонецПроцедуры

// Процедура подготовки табличного документа.
//
// Параметры:
//  АдресХранилища  - Строка - адрес хранилища;
//  СхемаКомпоновкиДанных  - СхемаКомпоновкиДанных - схема, для которой требуется построить макет;
//  Настройки  - НастройкиКомпоновкиДанных - настройки, для которых необходимо создать макет.
//
Процедура ПодготовитьТабличныйДокумент(АдресХранилища, СхемаКомпоновкиДанных, Настройки) Экспорт 
  Результат = Новый ТабличныйДокумент();
  
  ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных; // Создаем данные расшифровки 
  КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных; // Создаем компоновщик макета 
  МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, Настройки, ДанныеРасшифровки);
  
  // Скомпонуем результат
  ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
  ПроцессорКомпоновки.Инициализировать(МакетКомпоновки,
  Новый Структура("ДанныеИзФайлов", РегистрыСведений.БФТ_РегистрацияОшибокВОбъектах.ПолучитьТаблицу()));
  
  ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
  ПроцессорВывода.УстановитьДокумент(Результат);	
  ПроцессорВывода.Вывести(ПроцессорКомпоновки);
  
  ПоместитьВоВременноеХранилище(Результат, АдресХранилища);
КонецПроцедуры

// <Описание функции>
//
// Параметры:
//  ИдентификаторФЗ  - УникальныйИдентификатор - идентификатор ФЗ;
//  УдалятьСообщения  - Булево - Истина, если необходимо удалять сообщения.
//
// Возвращаемое значение:
//   Массив   - массив данных.
//
Функция ПолучитьДанныеФЗ(ИдентификаторФЗ, УдалятьСообщения = Истина) Экспорт 
  Перем Данные, Результат, ФЗ, Сообщения;
  
  ФЗ = ФоновыеЗадания.НайтиПоУникальномуИдентификатору(ИдентификаторФЗ);
  Обертка = СтрРазделить("{{|}}", "|", Ложь);
  
  Сообщения = ФЗ.ПолучитьСообщенияПользователю(УдалятьСообщения);
  Если Сообщения.Количество() = 0 Тогда
    Возврат Неопределено;
  КонецЕсли;
  
  Результат = Новый Массив();                                  
  Для Каждого Сообщение Из Сообщения Цикл
    ТекстСообщение = Сообщение.Текст;
    Если СтрНачинаетсяС(ТекстСообщение, Обертка[0]) Тогда
      НачПозиция = СтрНайти(ТекстСообщение, Обертка[0])+ СтрДлина(Обертка[0]);
      КонПозиция = СтрНайти(ТекстСообщение, Обертка[1],, НачПозиция);
      ДанныеСтрокой = Сред(ТекстСообщение, НачПозиция, КонПозиция - НачПозиция); 
      
      Данные = ОбщегоНазначенияСервер.ЗначениеИзСтрокиXML(ДанныеСтрокой);
      Результат.Добавить(Данные);
    КонецЕсли;
  КонецЦикла;
  
  Если Результат.Количество() = 0 Тогда
    Возврат Неопределено;
  КонецЕсли;
  
  Возврат Результат;
КонецФункции  

// <Описание процедуры>
//
// Параметры:
//  АдресХранилища  - Строка - адрес временного хранилища.
//
Процедура СоздатьВременнуюБД(АдресХранилища) Экспорт 
  СтрокаЗапускаПлатформы = КаталогПрограммы() + "1cv8.exe";
  ФайлЛога = ПолучитьИмяВременногоФайла();
  КаталогБД = КаталогВременныхФайлов() + Строка(Новый УникальныйИдентификатор());
  СоздатьКаталог(КаталогБД);
  
  СтрокаЗапуска = """%1"" CREATEINFOBASE File=""%2"" /OUT ""%3""";
                  
  СтрокаЗапуска = СтрШаблон(СтрокаЗапуска, СтрокаЗапускаПлатформы, КаталогБД, ФайлЛога);                                  
  
  КодВозврата = Неопределено;
  ЗапуститьПриложение(СтрокаЗапуска,, Истина, КодВозврата);
  
  Если КодВозврата = 0 Тогда 
  	ОбщегоНазначенияКлиентСервер.УдалитьФайлыКлиентСервер(ФайлЛога); 
    ПоместитьВоВременноеХранилище(КаталогБД, АдресХранилища);
  Иначе
    ВызватьИсключение СтрШаблон("Произошла ошибка:
    |%1", ПолучитьЛогВыгрузкиФайловКонфигурации(ФайлЛога));
  КонецЕсли;
КонецПроцедуры


#КонецОбласти

#Область СлужебныеПроцедурыИФункции


Функция ВыгрузитьКонфуВФайлы(СтрокаПодключенияКВременнойБД, НомерРевизии, КаталогСохраненияФайлов) 
  СтрокаЗапускаПлатформы = КаталогПрограммы() + "1cv8.exe";
  ФайлЛога = ПолучитьИмяВременногоФайла();
  // КаталогСохраненияФайлов = СтрШаблон("%1FilesConfig_%2", КаталогВременныхФайлов(), Формат(НомерРевизии, "ЧГ="));
  СоздатьКаталог(КаталогСохраненияФайлов);
  
  СтрокаЗапуска = """%1"" DESIGNER /F ""%2"" /DumpConfigToFiles ""%3"" -Format Hierarchical /OUT ""%4""";
    
  СтрокаЗапуска = СтрШаблон(СтрокаЗапуска, СтрокаЗапускаПлатформы, 
  СтрокаПодключенияКВременнойБД,
  КаталогСохраненияФайлов, ФайлЛога);
  
  КодВозврата = Неопределено;
  ЗапуститьПриложение(СтрокаЗапуска,, Истина, КодВозврата);
                                               
  Если КодВозврата = 0 Тогда 
  	ОбщегоНазначенияКлиентСервер.УдалитьФайлыКлиентСервер(ФайлЛога);                                           
  Иначе
    ВызватьИсключение СтрШаблон("Произошла ошибка:
    |%1", ПолучитьЛогВыгрузкиФайловКонфигурации(ФайлЛога));
  КонецЕсли;
  
  Возврат КаталогСохраненияФайлов;
КонецФункции


Процедура ВыполнитьПроцессПереноса(АдресХранилищаРезультата, НомерРевизии, 
  ПутьКХранилищу,
  ПользовательХранилищаАдмин,
  ВременныйПользовательХранилища,
  ПарольХранилища,
  ФайлНастроекМержа,
  КаталогСохраненияФайлов,
	СохранятьВФайлы,
	ВыгружатьЗащищеннуюКонфигурацию, 
	ПутьКОбфускатору) Экспорт
	
  Перем ПутьКВременнойБД, АдресХранилища;
  
  ДанныеДляОсновногоПотока = Новый Структура("ТекущийШаг, ВыполненныеШаги", "", Новый Массив());
	
	Попытка
		////////////////////////////////////////////////////////////////////////////////////////
		ДанныеДляОсновногоПотока.ТекущийШаг = "СоздатьВременнуюБД";
		ОтправитьДанныеФЗ(ДанныеДляОсновногоПотока);    
		АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, Новый УникальныйИдентификатор());
		СоздатьВременнуюБД(АдресХранилища);
		ПутьКВременнойБД = ПолучитьИзВременногоХранилища(АдресХранилища);
		ПутьК_CF = ПолучитьИмяВременногоФайла("cf");
		
		ДанныеДляОсновногоПотока.ВыполненныеШаги.Добавить(ДанныеДляОсновногоПотока.ТекущийШаг);
		ОтправитьДанныеФЗ(ДанныеДляОсновногоПотока);    
		
		////////////////////////////////////////////////////////////////////////////////////////
		Если ЗначениеЗаполнено(ВременныйПользовательХранилища) Тогда
			// Если уже такой пользователь существует будет ошибка.
			Попытка
				ДанныеДляОсновногоПотока.ТекущийШаг = "СозданиеВременногоПользователя";
				ОтправитьДанныеФЗ(ДанныеДляОсновногоПотока); 
				СозданиеВременногоПользователяХранилища(ПутьКВременнойБД, ПутьКХранилищу, ПользовательХранилищаАдмин, ПарольХранилища, ВременныйПользовательХранилища);
				ДанныеДляОсновногоПотока.ВыполненныеШаги.Добавить(ДанныеДляОсновногоПотока.ТекущийШаг);
				ОтправитьДанныеФЗ(ДанныеДляОсновногоПотока);   
			Исключение
			КонецПопытки;
		КонецЕсли;
		ПользовательХранилища = ?(ЗначениеЗаполнено(ВременныйПользовательХранилища), ВременныйПользовательХранилища, ПользовательХранилищаАдмин);
		
		////////////////////////////////////////////////////////////////////////////////////////
		ДанныеДляОсновногоПотока.ТекущийШаг = "ПолучитьКонфуИзХранилища";
		ОтправитьДанныеФЗ(ДанныеДляОсновногоПотока); 
		АдресХранилищаРезультата = ?(Не ЗначениеЗаполнено(АдресХранилищаРезультата), ПоместитьВоВременноеХранилище(Неопределено, Новый УникальныйИдентификатор()), АдресХранилищаРезультата);
		ПолучитьКонфигурациюИзХранилища(АдресХранилищаРезультата, ПутьКВременнойБД, ПутьКХранилищу, ПользовательХранилища, ПарольХранилища, НомерРевизии, ДанныеДляОсновногоПотока, ВыгружатьЗащищеннуюКонфигурацию, ПутьКОбфускатору);
		// ПолучитьФайл(АдресХранилищаРезультата, ПутьК_CF, Ложь);
		ДанныеДляОсновногоПотока.ТекущийШаг = "ПолучитьКонфуИзХранилища";
		ДанныеДляОсновногоПотока.ВыполненныеШаги.Добавить(ДанныеДляОсновногоПотока.ТекущийШаг);
		ОтправитьДанныеФЗ(ДанныеДляОсновногоПотока);
		
		Если СохранятьВФайлы Тогда
			////////////////////////////////////////////////////////////////////////////////////////
			ДанныеДляОсновногоПотока.ТекущийШаг = "ОтделениеКонфигурацииБФТ";
			ОтправитьДанныеФЗ(ДанныеДляОсновногоПотока);    
			ЗагрузитьКонфу(ПутьКВременнойБД, ПутьК_CF, ФайлНастроекМержа);
			ДанныеДляОсновногоПотока.ВыполненныеШаги.Добавить(ДанныеДляОсновногоПотока.ТекущийШаг);
			ОтправитьДанныеФЗ(ДанныеДляОсновногоПотока);  
			
			////////////////////////////////////////////////////////////////////////////////////////
			ДанныеДляОсновногоПотока.ТекущийШаг = "ВыгрузитьКонфуВФайлы";
			ОтправитьДанныеФЗ(ДанныеДляОсновногоПотока);    
			КаталогСКонфой = ВыгрузитьКонфуВФайлы(ПутьКВременнойБД, НомерРевизии, КаталогСохраненияФайлов);
			ДанныеДляОсновногоПотока.ВыполненныеШаги.Добавить(ДанныеДляОсновногоПотока.ТекущийШаг);
			ОтправитьДанныеФЗ(ДанныеДляОсновногоПотока);    
			
			////////////////////////////////////////////////////////////////////////////////////////
			/// Многие наши объекты переплетены с БГУшными,и получается, что в конфе могут быть БГУшные.  
// / запускать мерж конфигурации с параметром ClearUnresolvedRefs было бы не верно,.
// Т.к. это приведет к очистки ссылок и дальнейшим проблемам.
			/// по этому мы мержим так, что бы подтягивались некоторые БГУшные, а потом отделяем уже файлы.. 
			/// Так конфа хотя бы не 2 гига весит, быстрей отделение проходит.
			////////////////////////////////////////////////////////////////////////////////////////
			ДанныеДляОсновногоПотока.ТекущийШаг = "ОтделитьПодсистемуБФТ";
			ОтправитьДанныеФЗ(ДанныеДляОсновногоПотока);    
			ОтделитьПодсистемуБФТ(КаталогСКонфой);
			ДанныеДляОсновногоПотока.ВыполненныеШаги.Добавить(ДанныеДляОсновногоПотока.ТекущийШаг);
			ОтправитьДанныеФЗ(ДанныеДляОсновногоПотока); 
		КонецЕсли;
		
		Если БФТ_ФайлСуществует(ПутьКВременнойБД) Тогда
			ОбщегоНазначенияКлиентСервер.УдалитьФайлыКлиентСервер(ПутьКВременнойБД);
		КонецЕсли;
		Если БФТ_ФайлСуществует(КаталогСКонфой) Тогда
			ОбщегоНазначенияКлиентСервер.УдалитьФайлыКлиентСервер(КаталогСКонфой);
		КонецЕсли;
		Если БФТ_ФайлСуществует(ПутьК_CF) Тогда
			ОбщегоНазначенияКлиентСервер.УдалитьФайлыКлиентСервер(ПутьК_CF);
		КонецЕсли;
	Исключение				
		Если БФТ_ФайлСуществует(ПутьКВременнойБД) Тогда
			ОбщегоНазначенияКлиентСервер.УдалитьФайлыКлиентСервер(ПутьКВременнойБД);
		КонецЕсли;
		Если БФТ_ФайлСуществует(КаталогСКонфой) Тогда
			ОбщегоНазначенияКлиентСервер.УдалитьФайлыКлиентСервер(КаталогСКонфой);
		КонецЕсли;
		Если БФТ_ФайлСуществует(ПутьК_CF) Тогда
			ОбщегоНазначенияКлиентСервер.УдалитьФайлыКлиентСервер(ПутьК_CF);
		КонецЕсли;
		                           
		ВызватьИсключение;
	КонецПопытки;
КонецПроцедуры


Процедура ЗагрузитьКонфу(СтрокаПодключенияКВременнойБД,
  ПутьКСохраненнойКонфигурации,
  ФайлНастроекМержа) Экспорт
  
  СтрокаЗапускаПлатформы = КаталогПрограммы() + "1cv8.exe";
  ФайлЛога = ПолучитьИмяВременногоФайла();
// СтрокаЗапуска = """%1"" DESIGNER /S ""%2"" /N ""Администратор"".
// /P"""" /LoadConfigFromFiles ""%3"" -Format Plain /OUT ""%4""";
  СтрокаЗапуска = """%1"" DESIGNER /DisableStartupDialogs /DisableStartupMessages /F ""%2"" "+
  "/MergeCfg ""%3"" -Settings ""%4"" -force -IncludeObjectsByUnresolvedRefs /OUT ""%5"""; // -ClearUnresolvedRefs
                  
  СтрокаЗапуска = СтрШаблон(СтрокаЗапуска, СтрокаЗапускаПлатформы, 
  СтрокаПодключенияКВременнойБД, 
  ПутьКСохраненнойКонфигурации,
  ФайлНастроекМержа,
  ФайлЛога);
  
  КодВозврата = Неопределено;
  ЗапуститьПриложение(СтрокаЗапуска,, Истина, КодВозврата);
  
  ОбщегоНазначенияКлиентСервер.УдалитьФайлыКлиентСервер(ФайлНастроекМержа);
  Если КодВозврата = 0 Тогда 
  	ОбщегоНазначенияКлиентСервер.УдалитьФайлыКлиентСервер(ФайлЛога);                                           
  Иначе
    ВызватьИсключение СтрШаблон("Произошла ошибка:
    |%1", ПолучитьЛогВыгрузкиФайловКонфигурации(ФайлЛога));
  КонецЕсли;
КонецПроцедуры


Процедура ЗаполнитьДерево(ДеревоФС, ДиректорияКорень)
  Для Каждого Ф Из НайтиФайлы(ДиректорияКорень, "*.*", Ложь) Цикл
    Если Не ф.Существует() Тогда
      Продолжить;
    КонецЕсли;
    
    ЭтоКаталог = ф.ЭтоКаталог();
    НовСтрока = ДеревоФС.Строки.Добавить();
    НовСтрока.ЭтоКаталог = ЭтоКаталог;
    НовСтрока.Имя = Ф.Имя;
    
    Если ЭтоКаталог Тогда
      ЗаполнитьДерево(НовСтрока, ф.ПолноеИмя);
    КонецЕсли;
  КонецЦикла;
КонецПроцедуры


Процедура ЗахватитьОбъекты(СтрокаПодключенияКВременнойБД,
  ПутьКХранилищуПриемник,
  ПользовательХранилищаПриемник,
  ПарольХранилищаПриемник) Экспорт
  
  СтрокаЗапускаПлатформы = КаталогПрограммы() + "1cv8.exe";
  ФайлЛога = ПолучитьИмяВременногоФайла();
  
  СтрокаЗапуска = """%1"" DESIGNER /DisableStartupDialogs /DisableStartupMessages /F ""%2"" " +
  "/ConfigurationRepositoryF ""%3"" " +
  "/ConfigurationRepositoryN ""%4"" " +
  "/ConfigurationRepositoryP ""%5"" " +
  "/ConfigurationRepositoryLock -revised /OUT ""%6"""; 
                  
  СтрокаЗапуска = СтрШаблон(СтрокаЗапуска, СтрокаЗапускаПлатформы, 
  СтрокаПодключенияКВременнойБД,
  ПутьКХранилищуПриемник,               
  ПользовательХранилищаПриемник,
  ПарольХранилищаПриемник, ФайлЛога);
  
  КодВозврата = Неопределено;
  ЗапуститьПриложение(СтрокаЗапуска,, Истина, КодВозврата);
  
  Если КодВозврата = 0 Тогда 
  	ОбщегоНазначенияКлиентСервер.УдалитьФайлыКлиентСервер(ФайлЛога);                                           
  Иначе
    ВызватьИсключение СтрШаблон("Произошла ошибка:
    |%1", ПолучитьЛогВыгрузкиФайловКонфигурации(ФайлЛога));
  КонецЕсли;
КонецПроцедуры


Функция НайтиОрганизацию(ИНН, КПП)
  Запрос = Новый Запрос;
  Запрос.Текст = 
    "ВЫБРАТЬ
    | Организации.Ссылка
    |ИЗ
    | Справочник.Организации КАК Организации
    |ГДЕ
    | Организации.ИНН = &ИНН
    | И Организации.КПП = &КПП";
  
  Запрос.УстановитьПараметр("ИНН", ИНН);
  Запрос.УстановитьПараметр("КПП", КПП);
  
  Выборка = Запрос.Выполнить().Выбрать();
  Если Выборка.Количество() > 1 Тогда
    ВызватьИсключение СтрШаблон("В обдасти ""%1"" найдено несколько организаций по ИНН = ""%2"", КПП = ""%3""", ПараметрыСеанса.ОбластьДанныхЗначение, ИНН, КПП);
  ИначеЕсли Выборка.Следующий() Тогда
    Возврат Выборка.Ссылка;
  КонецЕсли;
КонецФункции


Процедура ОтделитьКонфуПараллельно(Директория, НовыйКаталог, ГруппировкаМассива)
  
  // Структуру файлов переносим в дерево значений, что бы не использовать НайтиФайлы, т.к. очень убивает производительность.
  Дерево = Новый ДеревоЗначений();
  Дерево.Колонки.Добавить("Имя");
  Дерево.Колонки.Добавить("ЭтоКаталог", Новый ОписаниеТипов("Булево"));
  ЗаполнитьДерево(Дерево, Директория);
  
  МассивФЗ = Новый Массив();
  Для Каждого ЭлементГруппы Из ГруппировкаМассива Цикл
    Парам = Новый Массив();
    Парам.Добавить(Директория);
    Парам.Добавить(НовыйКаталог);
    Парам.Добавить(ЭлементГруппы.Значение);                         
    Парам.Добавить(Дерево);
    ФЗ = ФоновыеЗадания.Выполнить("БФТ_ДлительныеОперацииСервер.ОтделитьКонфигурациюБФТ", Парам, "", СтрШаблон("ОтделитьКонфигурациюБФТ_%1", ЭлементГруппы.Ключ));
    МассивФЗ.Добавить(ФЗ);
  КонецЦикла;
  
  ФоновыеЗадания.ОжидатьЗавершения(МассивФЗ);
КонецПроцедуры


Процедура ОчиститьКешХранилища(СтрокаПодключенияКВременнойБД,
  ПутьКХранилищуПриемник,
  ПользовательХранилищаПриемник,
  ПарольХранилищаПриемник) Экспорт 
  
  СтрокаЗапускаПлатформы = КаталогПрограммы() + "1cv8.exe";
  ФайлЛога = ПолучитьИмяВременногоФайла();
  
  СтрокаЗапуска = """%1"" DESIGNER /DisableStartupDialogs /DisableStartupMessages /F ""%2""" +
  "/ConfigurationRepositoryF ""%3""" +
  "/ConfigurationRepositoryN ""%4""" +
  "/ConfigurationRepositoryP ""%5""" +
  "/ConfigurationRepositoryClearCache  /OUT ""%6"""; 
                  
  СтрокаЗапуска = СтрШаблон(СтрокаЗапуска, СтрокаЗапускаПлатформы, 
  СтрокаПодключенияКВременнойБД,
  ПутьКХранилищуПриемник,               
  ПользовательХранилищаПриемник,
  ПарольХранилищаПриемник, ФайлЛога);
  
  КодВозврата = Неопределено;
  ЗапуститьПриложение(СтрокаЗапуска,, Истина, КодВозврата);
  
  Если КодВозврата = 0 Тогда 
  	ОбщегоНазначенияКлиентСервер.УдалитьФайлыКлиентСервер(ФайлЛога);                                           
  Иначе
    ВызватьИсключение СтрШаблон("Произошла ошибка:
    |%1", ПолучитьЛогВыгрузкиФайловКонфигурации(ФайлЛога));
  КонецЕсли;
КонецПроцедуры

Процедура ПереместитьФайлФайлССозданиемКаталогов(Источник, Назначения)
  Если Не БФТ_ФайлСуществует(Источник) Тогда
    Возврат;  
  КонецЕсли;
           
  СоздатьДеревоКаталогов(Назначения);
  ПереместитьФайл(Источник, Назначения);    
КонецПроцедуры

Процедура ПодключитьсяКХранилищу(СтрокаПодключенияКВременнойБД,
  ПутьКХранилищуПриемник,
  ПользовательХранилищаПриемник,
  ПарольХранилищаПриемник) Экспорт
  
  СтрокаЗапускаПлатформы = КаталогПрограммы() + "1cv8.exe";
  ФайлЛога = ПолучитьИмяВременногоФайла();
  
  СтрокаЗапуска = """%1"" DESIGNER /DisableStartupDialogs /DisableStartupMessages /F ""%2"" " +
  "/ConfigurationRepositoryF ""%3"" " +
  "/ConfigurationRepositoryN ""%4"" " +
  "/ConfigurationRepositoryP ""%5"" " +
  "/ConfigurationRepositoryBindCfg -forceBindAlreadyBindedUser -forceReplaceCfg /OUT ""%6"""; 
                  
  СтрокаЗапуска = СтрШаблон(СтрокаЗапуска, СтрокаЗапускаПлатформы, 
  СтрокаПодключенияКВременнойБД,
  ПутьКХранилищуПриемник,               
  ПользовательХранилищаПриемник,
  ПарольХранилищаПриемник, ФайлЛога);
  
  КодВозврата = Неопределено;
  ЗапуститьПриложение(СтрокаЗапуска,, Истина, КодВозврата);
  
  Если КодВозврата = 0 Тогда 
  	ОбщегоНазначенияКлиентСервер.УдалитьФайлыКлиентСервер(ФайлЛога);                                           
  Иначе
    ВызватьИсключение СтрШаблон("Произошла ошибка:
    |%1", ПолучитьЛогВыгрузкиФайловКонфигурации(ФайлЛога));
  КонецЕсли;
КонецПроцедуры

Функция ПолучитьАбсолютныйПуть(СтрокаДерева)
  Если СтрокаДерева.Родитель <> Неопределено Тогда
    Возврат СтрШаблон("%1\%2", ПолучитьАбсолютныйПуть(СтрокаДерева.Родитель), СтрокаДерева.Имя); 
  Иначе
    Возврат СтрокаДерева.Имя;
  КонецЕсли;
КонецФункции

Процедура ПолучитьКонфигурациюИзХранилища(АдресХранилища, 
  СтрокаПодключенияКВременнойБД,
  ПутьКХранилищуИсточник,
  ПользовательХранилищаИсточник,
  ПарольХранилищаИсточник,
  НомерРевизии,
  ДанныеДляОсновногоПотока = Неопределено,
  ВыгружатьЗащищеннуюКонфигурацию = Ложь, 
  ПутьКОбфускатору = "") Экспорт 
  
  СтрокаЗапускаПлатформы = КаталогПрограммы() + "1cv8.exe";
  ФайлЛога = ПолучитьИмяВременногоФайла();                 
  ПутьКСохраняемойКонфигурации = ПолучитьИмяВременногоФайла("cf");
  
  СтрокаЗапуска = """%1"" DESIGNER /DisableStartupDialogs /DisableStartupMessages /F ""%2"" /ConfigurationRepositoryF ""%3""" +
                  " /ConfigurationRepositoryN ""%4""" +
                  " /ConfigurationRepositoryP ""%5""" +
                  " /ConfigurationRepositoryDumpCfg ""%6"" -v %7 /OUT ""%8""";
    
	СтрокаЗапуска = СтрШаблон(СтрокаЗапуска, СтрокаЗапускаПлатформы,
                            СтрокаПодключенияКВременнойБД,
                            ПутьКХранилищуИсточник, 
                            ПользовательХранилищаИсточник,
                            ПарольХранилищаИсточник,
                            ПутьКСохраняемойКонфигурации,
                            Формат(НомерРевизии, "ЧГ="),
                            ФайлЛога);
	
	КодВозврата = Неопределено;
	ЗапуститьПриложение(СтрокаЗапуска,, Истина, КодВозврата);
	
	Если КодВозврата = 0 Тогда 
		ОбщегоНазначенияКлиентСервер.УдалитьФайлыКлиентСервер(ФайлЛога);   

		Если БФТ_ФайлСуществует(ПутьКСохраняемойКонфигурации) Тогда
			
			Если ВыгружатьЗащищеннуюКонфигурацию Тогда
				// ДанныеДляОсновногоПотока.ТекущийШаг = "ЗащититьКонфигурацию";
				// ОтправитьДанныеФЗ(ДанныеДляОсновногоПотока);. 
				
				#region Шифруем_конфигурацию
				
				Если НЕ ЗначениеЗаполнено(ПутьКОбфускатору) Тогда
					ВызватьИсключение("В форме выгрузки конфигурации не заполнен путь к обфускатору");
				КонецЕсли;
				
				Попытка
					ДиректорияОбфускатора = Лев(ПутьКОбфускатору, СтрНайти(ПутьКОбфускатору, "\", НаправлениеПоиска.СКонца) - 1);
				Исключение
					ВызватьИсключение("Не удалось определить путь к обфускатору");
				КонецПопытки;
				
				Попытка
					ВыгруженнаяКонфигурация_ИмяФайла = Прав(ПутьКСохраняемойКонфигурации, СтрДлина(ПутьКСохраняемойКонфигурации) - СтрНайти(ПутьКСохраняемойКонфигурации, "\", НаправлениеПоиска.СКонца));
					ВыгруженнаяКонфигурация_Директория = Лев(ПутьКСохраняемойКонфигурации, СтрНайти(ПутьКСохраняемойКонфигурации, "\", НаправлениеПоиска.СКонца) - 1);
				Исключение
					ВызватьИсключение("Не удалось определить путь к выгруженной конфигурации");
				КонецПопытки;
				
				СтрокаЗапускаОбфускатора = СтрШаблон("%1 --mode prof --source ""%2""", ПутьКОбфускатору, ПутьКСохраняемойКонфигурации);
				WshShell = Новый COMОбъект("Wscript.Shell");
				Result = WshShell.Run(СтрокаЗапускаОбфускатора, 0, Истина);
				
				Если Result = 0 Тогда
					ОбщегоНазначенияКлиентСервер.УдалитьФайлыКлиентСервер(ПутьКСохраняемойКонфигурации);
					ПутьКСохраняемойКонфигурации = СтрШаблон("%1\Protected\%2", ВыгруженнаяКонфигурация_Директория, ВыгруженнаяКонфигурация_ИмяФайла);
				Иначе
					ВызватьИсключение("Не удалось защитить конфигурацию");
				КонецЕсли;
				
				#endregion
				
				// ДанныеДляОсновногоПотока.ВыполненныеШаги.Добавить(ДанныеДляОсновногоПотока.ТекущийШаг);
				// ОтправитьДанныеФЗ(ДанныеДляОсновногоПотока);.
			КонецЕсли;
			
			ДвоичныеДанные = Новый ДвоичныеДанные(ПутьКСохраняемойКонфигурации);
			ПоместитьВоВременноеХранилище(ДвоичныеДанные, АдресХранилища);
			ОбщегоНазначенияКлиентСервер.УдалитьФайлыКлиентСервер(ПутьКСохраняемойКонфигурации);
		КонецЕсли;
  Иначе
    ВызватьИсключение СтрШаблон("Произошла ошибка:
    |%1", ПолучитьЛогВыгрузкиФайловКонфигурации(ФайлЛога));
	КонецЕсли;
КонецПроцедуры

Функция ПолучитьЛогВыгрузкиФайловКонфигурации(ФайлЛога)
  Если Не БФТ_ФайлСуществует(ФайлЛога) Тогда
    Возврат "";  
  КонецЕсли;
  
	ЧтениеТекста = Новый ЧтениеТекста(ФайлЛога);
	Текст = ЧтениеТекста.Прочитать();
	ЧтениеТекста.Закрыть();
	
	ОбщегоНазначенияКлиентСервер.УдалитьФайлыКлиентСервер(ФайлЛога);
	
	Возврат Текст;
КонецФункции

Функция ПолучитьСоставПодсистемы(ПутьКФайлу)
  Состав = Новый Массив();
  
  ЧтениеXML = УтилитыЧтенияXML.СоздатьИзФайла(ПутьКФайлу); 
  DOM = Новый ПостроительDOM;                      
  XML = DOM.Прочитать(ЧтениеXML);  
  
  Пространства = Новый Соответствие();
  Пространства.Вставить("xr", "http://v8.1c.ru/8.3/xcf/readable");
  Пространства.Вставить("xmlns", "http://v8.1c.ru/8.3/MDClasses"); 
  
  Узлы = XML.ВычислитьВыражениеXPath("//xmlns:Content/xr:Item", XML, Новый РазыменовательПространствИменDOM(Пространства)); 
	Узел = Узлы.ПолучитьСледующий();
	Пока Узел <> Неопределено Цикл
    Состав.Добавить(Узел.ТекстовоеСодержимое);
    Узел = Узлы.ПолучитьСледующий();
	КонецЦикла;  
  
  Возврат Состав;
КонецФункции


Процедура ПолучитьФайлОтчетаПоХранилищу(АдресХранилища, 
  СтрокаПодключенияКВременнойБД,
  ПутьКХранилищуИсточник,
  ПользовательХранилищаИсточник,
  ПарольХранилищаИсточник,
  НачальнаяВерсия) Экспорт 
  
  СтрокаЗапускаПлатформы = КаталогПрограммы() + "1cv8.exe";
  ФайлЛога = ПолучитьИмяВременногоФайла();
  ФайлОтчета = ПолучитьИмяВременногоФайла("mxl");
  
  СтрокаЗапуска = """%1"" DESIGNER /DisableStartupDialogs /DisableStartupMessages /F ""%2""" +
  " /ConfigurationRepositoryF ""%3""" +
  " /ConfigurationRepositoryN ""%4""" +
  " /ConfigurationRepositoryP ""%5""" +
  " /ConfigurationRepositoryReport ""%6"" -NBegin %7 /OUT ""%8""";
                  
  СтрокаЗапуска = СтрШаблон(СтрокаЗапуска, СтрокаЗапускаПлатформы, 
  СтрокаПодключенияКВременнойБД,
  ПутьКХранилищуИсточник,
  ПользовательХранилищаИсточник,                              
  ПарольХранилищаИсточник, 
  ФайлОтчета,                                                                                   
	Формат(НачальнаяВерсия, "ЧГ="),
  ФайлЛога);                                  
  
  КодВозврата = Неопределено;
  ЗапуститьПриложение(СтрокаЗапуска,, Истина, КодВозврата);
  
  Если КодВозврата = 0 Тогда 
  	ОбщегоНазначенияКлиентСервер.УдалитьФайлыКлиентСервер(ФайлЛога);                                           
    ПоместитьВоВременноеХранилище(ФайлОтчета, АдресХранилища);
  Иначе
    ВызватьИсключение СтрШаблон("Произошла ошибка:
    |%1", ПолучитьЛогВыгрузкиФайловКонфигурации(ФайлЛога));
  КонецЕсли;
КонецПроцедуры


Процедура ПоместитьВХранилище(СтрокаПодключенияКВременнойБД,
  ПутьКХранилищуПриемник,
  ПользовательХранилищаПриемник,
  ПарольХранилищаПриемник,
  ПутьКХранилищуИсточник,
  НомерРевизии) Экспорт 
  
  СтрокаЗапускаПлатформы = КаталогПрограммы() + "1cv8.exe";
  ФайлЛога = ПолучитьИмяВременногоФайла();
  
  // СтрокаЗапуска = """%1"" DESIGNER /S ""%2"" /N ""Администратор"". /P""""" +
  // "/ConfigurationRepositoryF ""%3""" +.
  // "/ConfigurationRepositoryN ""%4""" +.
  // "/ConfigurationRepositoryP ""%5""" +.
  // "/ConfigurationRepositoryCommit -comment ""%6"" /OUT ""%7""";

  
  СтрокаЗапуска = """%1"" DESIGNER /DisableStartupDialogs /DisableStartupMessages /F ""%2"" " +
  "/ConfigurationRepositoryF ""%3"" " +
  "/ConfigurationRepositoryN ""%4"" " +
  "/ConfigurationRepositoryP ""%5"" " +
  "/ConfigurationRepositoryCommit -comment ""%6"" -force /OUT ""%7"""; 
                  
  СтрокаЗапуска = СтрШаблон(СтрокаЗапуска, СтрокаЗапускаПлатформы, 
  СтрокаПодключенияКВременнойБД,
  ПутьКХранилищуПриемник,               
  ПользовательХранилищаПриемник,
  ПарольХранилищаПриемник, 
  СтрШаблон("Автоматический перенос конфигурации из хранилища %1 (версия - %2)", ПутьКХранилищуИсточник, ?(НомерРевизии = -1, СтрШаблон("Актуальная на дату %1", ТекущаяДата()), Формат(НомерРевизии, "ЧГ="))),
  ФайлЛога);

  
  КодВозврата = Неопределено;
  ЗапуститьПриложение(СтрокаЗапуска,, Истина, КодВозврата);
  
  Если КодВозврата = 0 Тогда 
  	ОбщегоНазначенияКлиентСервер.УдалитьФайлыКлиентСервер(ФайлЛога);                                           
  Иначе
    ВызватьИсключение СтрШаблон("Произошла ошибка:
    |%1", ПолучитьЛогВыгрузкиФайловКонфигурации(ФайлЛога));
  КонецЕсли;
КонецПроцедуры


Процедура СозданиеВременногоПользователяХранилища(СтрокаПодключенияКВременнойБД,
  ПутьКХранилищуПриемник,
  ПользовательХранилищаАдмин,
  ПарольХранилища,
  ВременныйПользовательХранилища) Экспорт 
  
  СтрокаЗапускаПлатформы = КаталогПрограммы() + "1cv8.exe";
  ФайлЛога = ПолучитьИмяВременногоФайла();
  
  СтрокаЗапуска = """%1"" DESIGNER /DisableStartupDialogs /DisableStartupMessages /F ""%2""" +
  "/ConfigurationRepositoryF ""%3""" +
  "/ConfigurationRepositoryN ""%4""" +
  "/ConfigurationRepositoryP ""%5""" +
  "/ConfigurationRepositoryAddUser -User ""%6"" -Pwd """" -Rights ReadOnly /OUT ""%7"""; 
                  
  СтрокаЗапуска = СтрШаблон(СтрокаЗапуска, СтрокаЗапускаПлатформы, 
  СтрокаПодключенияКВременнойБД,
  ПутьКХранилищуПриемник,               
  ПользовательХранилищаАдмин,
  ПарольХранилища,
  ВременныйПользовательХранилища,
  ФайлЛога);
  
  КодВозврата = Неопределено;
  ЗапуститьПриложение(СтрокаЗапуска,, Истина, КодВозврата);
  
  Если КодВозврата = 0 Тогда 
  	ОбщегоНазначенияКлиентСервер.УдалитьФайлыКлиентСервер(ФайлЛога);                                           
  Иначе
    ВызватьИсключение СтрШаблон("Произошла ошибка:
    |%1", ПолучитьЛогВыгрузкиФайловКонфигурации(ФайлЛога));
  КонецЕсли;
КонецПроцедуры


Процедура СоздатьДеревоКаталогов(Путь)
	// Какая-То неувязка.
	// Иногда происходит такая ошибка:
	// ".... Невозможно создать файл, так как он уже существует ...." в строке СоздатьКаталог().
	// Хотя в справки написано "Существование каталога <ИмяКаталога> не приводит к ошибке".
	// Т.к. эта процедура выполняется параллельно, возможно причина ошибки из-за этого (причем ошибка плавающая).
	// По этому делаем так, что бы эта функция не выполнялась параллельно, делаем это через управляемые блокировки.
	// Т.к. другого способа в 1С сделать критические секции нет.
	
	// НачатьТранзакцию();  транзакция нужна для блокировок.
	// Попытка
	//	Блокировка = Новый БлокировкаДанных;
	//	ЭлементБлокировки = Блокировка.Добавить("Константа.БФТ_Семафор");
	//	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	//	Блокировка.Заблокировать(); 
	//	
	//	
	//	РазбитыйПуть = СтрРазделить(Путь, "\");
	//	РазбитыйПуть.Удалить(РазбитыйПуть.Количество()-1);
	//	ПутьККаталогу = СтрСоединить(РазбитыйПуть, "\");
	//	СоздатьКаталог(ПутьККаталогу);
	//	
	//	ЗафиксироватьТранзакцию();
	// Исключение
	//	ОтменитьТранзакцию();
	//	ВызватьИсключение;
	// КонецПопытки;
	
	
		РазбитыйПуть = СтрРазделить(Путь, "\");
		РазбитыйПуть.Удалить(РазбитыйПуть.Количество()-1);
		ПутьККаталогу = СтрСоединить(РазбитыйПуть, "\");
		СоздатьКаталог(ПутьККаталогу);
КонецПроцедуры


#КонецОбласти

