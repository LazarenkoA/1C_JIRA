/////////////// Защита модуля ///////////////
// @protect                                //
/////////////////////////////////////////////

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	ПроверитьВерсиюИРежимСовместимостиПлатформы();
	
	РежимРаботыНаКлиенте = (РежимРаботыНаКлиентеИлиНаСервере = 0);
	
	Элементы.ИмяФайлаВыгрузки.Доступность = Не РежимРаботыНаКлиенте;
	Элементы.ИмяФайлаЗагрузки.Доступность = Не РежимРаботыНаКлиенте;
	
	ОбъектНаСервере = РеквизитФормыВЗначение("Объект");
	ОбъектНаСервере.Инициализация();
	ЗначениеВРеквизитФормы(ОбъектНаСервере.ДеревоМетаданных, "Объект.ДеревоМетаданных");
	
	Файл = Новый Файл(ИмяФайлаВыгрузки);
	Объект.ИспользоватьФорматFastInfoSet = (Файл.Расширение = ".fi");
	
	РежимВыгрузки = (Элементы.ГруппаРежим.ТекущаяСтраница = Элементы.ГруппаРежим.ПодчиненныеЭлементы.ГруппаВыгрузка);
	
	
	// +БФТ
	ДеревоПодсистем.ПолучитьЭлементы().Очистить();
	ОбновитьДеревоПодсистем(ДеревоПодсистем.ПолучитьЭлементы(), Метаданные.Подсистемы);
	ПолучитьСписокМакетовВосстановления();
	// -БФТ
	
КонецПроцедуры

// +БФТ
&НаСервере
Процедура ОбновитьДеревоПодсистем(Строки, Подсистемы)
	Для Каждого Подсистема Из Подсистемы Цикл
		НовСтр = Строки.Добавить();	
		НовСтр.Наименование = Подсистема.Имя;
		НовСтр.Картинка = 6;
		
		Если Подсистема.Подсистемы.Количество() > 0 Тогда
			ОбновитьДеревоПодсистем(НовСтр.ПолучитьЭлементы(), Подсистема.Подсистемы);	
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ПолучитьСписокМакетовВосстановления()
	Для Каждого СтрМакет Из РеквизитФормыВЗначение("Объект").Метаданные().Макеты Цикл
		СписокМакетов.Добавить().ИмяМакета = СтрМакет.Имя;
	КонецЦикла;
КонецПроцедуры

// -БФТ


&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	РежимРаботыНаКлиенте = (РежимРаботыНаКлиентеИлиНаСервере = 0);
	
	Элементы.ИмяФайлаВыгрузки.Доступность = Не РежимРаботыНаКлиенте;
	Элементы.ИмяФайлаЗагрузки.Доступность = Не РежимРаботыНаКлиенте;
	
	Файл = Новый Файл(ИмяФайлаВыгрузки);
	Объект.ИспользоватьФорматFastInfoSet = (Файл.Расширение = ".fi");
	
	РежимВыгрузки = (Элементы.ГруппаРежим.ТекущаяСтраница = Элементы.ГруппаРежим.ПодчиненныеЭлементы.ГруппаВыгрузка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	ОбработкаВыбораНаСервере(ВыбранноеЗначение);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ЗакрытаФормаНастройкиКонсолиЗапросов" Тогда
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, Параметр);
	ИначеЕсли ИмяСобытия = "ПродолжитьВыгрузку" И Параметр = Истина Тогда
    ВыгрузитьДанныеНаКлиенте();  
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ИмяФайлаВыгрузкиПриИзменении(Элемент)
	
	Файл = Новый Файл(ИмяФайлаВыгрузки);
	Объект.ИспользоватьФорматFastInfoSet = (Файл.Расширение = ".fi");
	
КонецПроцедуры

&НаКлиенте
Процедура ИмяФайлаВыгрузкиОткрытие(Элемент, СтандартнаяОбработка)
	
	ОткрытьВПриложении(Элемент, "ИмяФайлаВыгрузки", СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ИмяФайлаВыгрузкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбработатьНачалоВыбораФайла(СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьФорматFastInfoSetПриИзменении(Элемент)
	
	Если Объект.ИспользоватьФорматFastInfoSet Тогда
		ИмяФайлаВыгрузки = СтрЗаменить(ИмяФайлаВыгрузки, ".xml", ".fi");
	Иначе
		ИмяФайлаВыгрузки = СтрЗаменить(ИмяФайлаВыгрузки, ".fi", ".xml");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппаРежимПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	РежимВыгрузки = (Элементы.ГруппаРежим.ТекущаяСтраница = Элементы.ГруппаРежим.ПодчиненныеЭлементы.ГруппаВыгрузка);
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнительныеОбъектыДляВыгрузкиПриИзменении(Элемент)
	
	Если Элемент.ТекущиеДанные <> Неопределено И ЗначениеЗаполнено(Элемент.ТекущиеДанные.Объект) Тогда
		
		Элемент.ТекущиеДанные.ИмяОбъектаДляЗапроса = ИмяОбъектаПоТипуДляЗапроса(Элемент.ТекущиеДанные.Объект);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИмяФайлаЗагрузкиОткрытие(Элемент, СтандартнаяОбработка)
	
	ОткрытьВПриложении(Элемент, "ИмяФайлаЗагрузки", СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ИмяФайлаЗагрузкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбработатьНачалоВыбораФайла(СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДеревоМетаданных

&НаКлиенте
Процедура ДеревоМетаданныхВыгружатьПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ДеревоМетаданных.ТекущиеДанные;
	
	Если ТекущиеДанные.Выгружать = 2 Тогда
		ТекущиеДанные.Выгружать = 0;
	КонецЕсли;
	
	УстановитьПометкиПодчиненных(ТекущиеДанные, "Выгружать");
	УстановитьПометкиРодителей(ТекущиеДанные, "Выгружать");
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоМетаданныхВыгружатьПриНеобходимостиПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ДеревоМетаданных.ТекущиеДанные;
	
	Если ТекущиеДанные.ВыгружатьПриНеобходимости = 2 Тогда
		ТекущиеДанные.ВыгружатьПриНеобходимости = 0;
	КонецЕсли;
	
	УстановитьПометкиПодчиненных(ТекущиеДанные, "ВыгружатьПриНеобходимости");
	УстановитьПометкиРодителей(ТекущиеДанные, "ВыгружатьПриНеобходимости");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДополнительныеОбъектыДляВыгрузки

&НаКлиенте
Процедура ДополнительныеОбъектыДляВыгрузкиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Элемент.ТекущийЭлемент.ОграничениеТипа = ТипОбъектовДляВыгрузки;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ДобавитьИзЗапроса(Команда)
	
	ОткрытьФорму(ИмяФормыКонсолиЗапросов(),ПараметрыКонсолиЗапросов(),ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьДополнительныеОбъектыВыгрузки(Команда)
	
	Объект.ДополнительныеОбъектыДляВыгрузки.Очистить();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьДанные(Команда)
	// Не нужно вопрос показывать каждый раз, т.к. может быть выбрана подсистема не содержащая шаблоны.
	ВыбранныеПодсистемы = ВыбранныеПодсистемы();
	ВыгрузитьДанныеНаКлиенте(); 
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьДанныеНаКлиенте()
  Объект.ДатаНачала = ПериодВыгрузки.ДатаНачала;
	Объект.ДатаОкончания = ПериодВыгрузки.ДатаОкончания;
	
	ОчиститьСообщения();
	
	Если Не РежимРаботыНаКлиенте Тогда
		
		Если ПустаяСтрока(ИмяФайлаВыгрузки) Тогда
			
			ТекстСообщения = НСтр("ru = 'Поле ""Имя файла"" не заполнено'");
			СообщитьПользователю(ТекстСообщения, "ИмяФайлаВыгрузки");
			Возврат;
			
		КонецЕсли;
		
	ИначеЕсли ПомещатьМакетВSVN И Не ЗначениеЗаполнено(НастройкиПодключенияКSVN) Тогда
		СообщитьПользователю("Заполните настройки подключения к SVN", "НастройкиПодключенияКSVN");
		Возврат;
	КонецЕсли;
	
	Состояние(НСтр("ru = 'Выполняется выгрузка данных. Пожалуйста, подождите...'"));
	
	АдресФайлаВоВременномХранилище = "";
	ВыгрузитьДанныеНаСервере(АдресФайлаВоВременномХранилище);
	
	Если РежимРаботыНаКлиенте И Не ПустаяСтрока(АдресФайлаВоВременномХранилище) Тогда
		
		ИмяФайлаДляСохранения = ПолучитьИмяФайлаДляСохранения();
		
		ИмяФайла = ?(Объект.ИспользоватьФорматFastInfoSet, НСтр(СтрШаблон("ru = '%1.fi'", ИмяФайлаДляСохранения)), НСтр(СтрШаблон("ru = '%1.xml'", ИмяФайлаДляСохранения)));
		ПолучитьФайл(АдресФайлаВоВременномХранилище, ИмяФайла);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьИмяФайлаДляСохранения()
	ИмяФайлаПоУмолчанию = "Файл выгрузки";
	ВыбранныеПодсистемы = ВыбранныеПодсистемы();
	
	Если ВыбранныеПодсистемы.Количество() <> 1 Тогда
		Возврат ИмяФайлаПоУмолчанию;	
	Иначе
		Возврат ВыбранныеПодсистемы[0];
	КонецЕсли;
КонецФункции

&НаСервере
Функция ВыбранныеПодсистемы()
	Дерево = РеквизитФормыВЗначение("ДеревоПодсистем", Тип("ДеревоЗначений"));
	Строки = Дерево.Строки.НайтиСтроки(Новый Структура("Выбор", 1), Истина);
	
	Ответ = Новый Массив();
	Для Каждого Стр Из Строки Цикл
		Ответ.Добавить(Стр.Наименование);	
	КонецЦикла;
	
	Возврат Ответ;
КонецФункции

&НаКлиенте
Процедура ЗагрузитьДанные(Команда)
	
	ОчиститьСообщения();
	АдресФайлаВоВременномХранилище = "";
	
	Если РежимРаботыНаКлиенте Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузитьДанныеЗавершение", ЭтотОбъект);
		НачатьПомещениеФайла(ОписаниеОповещения, АдресФайлаВоВременномХранилище,НСтр("ru = 'Файл выгрузки'"),, УникальныйИдентификатор);
		
	Иначе
		
		Если ПустаяСтрока(ИмяФайлаЗагрузки) Тогда
			
			ТекстСообщения = НСтр("ru = 'Поле ""Имя файла"" не заполнено'");
			СообщитьПользователю(ТекстСообщения, "ИмяФайлаЗагрузки");
			Возврат;
			
		КонецЕсли;
		
		Файл = Новый Файл(ИмяФайлаЗагрузки);
		Если Не Файл.Существует() Тогда
			
			ТекстСообщения = НСтр("ru = 'Файл не существует'");
			СообщитьПользователю(ТекстСообщения, "ИмяФайлаЗагрузки");
			Возврат;
			
		КонецЕсли;
		
		ЗагрузитьДанныеЗавершение(Истина, АдресФайлаВоВременномХранилище, ИмяФайлаЗагрузки, Неопределено);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиКонсолиЗапросов(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ВариантИспользованияКонсолиЗапросов", ВариантИспользованияКонсолиЗапросов);
	ПараметрыФормы.Вставить("ПутьКВнешнейКонсолиЗапросов", ПутьКВнешнейКонсолиЗапросов);
	
	ОткрытьФорму(ИмяФормыНастроекКонсолиЗапросов(), ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьВыгружаемыеПоСсылке(Команда)
	
	Состояние(НСтр("ru = 'Выполняется поиск объектов метаданных, которые могут быть выгружены по ссылкам...'"));
	СохранитьОтображениеДерева(Объект.ДеревоМетаданных.ПолучитьЭлементы());
	ПересчитатьВыгружаемыеПоСсылкеНаСервере();
	ВосстановитьОтображениеДерева(Объект.ДеревоМетаданных.ПолучитьЭлементы());
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Функция ИмяФормыКонсолиЗапросов()
	
	Если ВариантИспользованияКонсолиЗапросов = 0 Тогда
		
		Обработка = РеквизитФормыВЗначение("Объект");
		ИдентификаторФормы = ".Форма.ВыборИзЗапроса";
		
	ИначеЕсли ВариантИспользованияКонсолиЗапросов = 1 Тогда
		
		Обработка = Обработки["КонсольЗапросов"].Создать();
		ИдентификаторФормы = ".Форма";
		
	Иначе //ВариантИспользованияКонсолиЗапросов = 2
		
		Обработка = ВнешниеОбработки.Создать(ПутьКВнешнейКонсолиЗапросов);
		ИдентификаторФормы = ".ФормаОбъекта";
		
	КонецЕсли;
	
	Возврат Обработка.Метаданные().ПолноеИмя() + ИдентификаторФормы;
	
КонецФункции

&НаСервере
Функция ИмяФормыНастроекКонсолиЗапросов()
	
	Обработка = РеквизитФормыВЗначение("Объект");
	ИмяФормыНастроек = Обработка.Метаданные().ПолноеИмя() + ".Форма.НастройкиКонсолиЗапросов";
	
	Возврат ИмяФормыНастроек;
	
КонецФункции

&НаКлиенте
Функция ПараметрыКонсолиЗапросов()
	
	ПараметрыФормы = Новый Структура;
	
	Если ВариантИспользованияКонсолиЗапросов = 0 Тогда
		
		ПараметрыФормы.Вставить("ВариантИспользованияКонсолиЗапросов", ВариантИспользованияКонсолиЗапросов);
		ПараметрыФормы.Вставить("ПутьКВнешнейКонсолиЗапросов", ПутьКВнешнейКонсолиЗапросов);
		
	Иначе
		
		ПараметрыФормы.Вставить("Заголовок", НСтр("ru='Выбор данных для выгрузки'"));
		ПараметрыФормы.Вставить("РежимВыбора", Истина);
		ПараметрыФормы.Вставить("ЗакрыватьПриВыборе", Ложь);
		
	КонецЕсли;
	
	Возврат ПараметрыФормы;
	
КонецФункции

&НаКлиенте
Процедура ОткрытьВПриложении(Элемент, ПутьКДанным, СтандартнаяОбработка)

	Файл = Новый Файл(Элемент.ТекстРедактирования);
	
	Если Файл.Существует() Тогда
		
		ЗапуститьПриложение(Элемент.ТекстРедактирования);
		
	Иначе
		
		СообщитьПользователю(НСтр("ru = 'Файл не найден'"), ПутьКДанным);
		
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииРежимаРаботы()
	
	РежимРаботыНаКлиенте = (РежимРаботыНаКлиентеИлиНаСервере = 0);
	
	Элементы.ИмяФайлаВыгрузки.Доступность = Не РежимРаботыНаКлиенте;
	Элементы.ИмяФайлаЗагрузки.Доступность = Не РежимРаботыНаКлиенте;
	
	ОбновитьДоступностьПоля();
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СообщитьПользователю(Текст, ПутьКДанным = "")
	
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = Текст;
	Сообщение.ПутьКДанным = ПутьКДанным;
	Сообщение.Сообщить();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьНачалоВыбораФайла(СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	РежимДиалога = ?(РежимВыгрузки, РежимДиалогаВыбораФайла.Сохранение, РежимДиалогаВыбораФайла.Открытие);
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалога);
	ДиалогВыбораФайла.ПроверятьСуществованиеФайла = Не РежимВыгрузки;
	ДиалогВыбораФайла.МножественныйВыбор = Ложь;
	ДиалогВыбораФайла.Заголовок = НСтр("ru = 'Задайте имя файла выгрузки'");
	ДиалогВыбораФайла.ПолноеИмяФайла = ?(РежимВыгрузки, ИмяФайлаВыгрузки, ИмяФайлаЗагрузки);
	
	ДиалогВыбораФайла.Фильтр = "Формат выгрузки(*.xml)|*.xml|FastInfoSet (*.fi)|*.fi|Все файлы (*.*)|*.*";
	Если ДиалогВыбораФайла.Выбрать() Тогда
		Если РежимВыгрузки Тогда
			ИмяФайлаВыгрузки = ДиалогВыбораФайла.ПолноеИмяФайла;
		Иначе
			ИмяФайлаЗагрузки = ДиалогВыбораФайла.ПолноеИмяФайла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПометкиПодчиненных(ТекСтрока, ИмяФлажка)
	
	Подчиненные = ТекСтрока.ПолучитьЭлементы();
	
	Если Подчиненные.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Строка из Подчиненные Цикл
		
		Строка[ИмяФлажка] = ТекСтрока[ИмяФлажка];
		
		УстановитьПометкиПодчиненных(Строка, ИмяФлажка);
		
	КонецЦикла;
		
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПометкиРодителей(ТекСтрока, ИмяФлажка)
	
	Родитель = ТекСтрока.ПолучитьРодителя();
	Если Родитель = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	ТекСостояние = Родитель[ИмяФлажка];
	
	НайденыВключенные  = Ложь;
	НайденыВыключенные = Ложь;
	
	Для Каждого Строка из Родитель.ПолучитьЭлементы() Цикл
		Если Строка[ИмяФлажка] = 0 Тогда
			НайденыВыключенные = Истина;
		ИначеЕсли Строка[ИмяФлажка] = 1
			ИЛИ Строка[ИмяФлажка] = 2 Тогда
			НайденыВключенные  = Истина;
		КонецЕсли; 
		Если НайденыВключенные И НайденыВыключенные Тогда
			Прервать;
		КонецЕсли; 
	КонецЦикла;
	
	Если НайденыВключенные И НайденыВыключенные Тогда
		Включить = 2;
	ИначеЕсли НайденыВключенные И (Не НайденыВыключенные) Тогда
		Включить = 1;
	ИначеЕсли (Не НайденыВключенные) И НайденыВыключенные Тогда
		Включить = 0;
	ИначеЕсли (Не НайденыВключенные) И (Не НайденыВыключенные) Тогда
		Включить = 2;
	КонецЕсли;
	
	Если Включить = ТекСостояние Тогда
		Возврат;
	Иначе
		Родитель[ИмяФлажка] = Включить;
		УстановитьПометкиРодителей(Родитель, ИмяФлажка);
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ВыгрузитьДанныеНаСервере(АдресФайлаВоВременномХранилище)
	
	// +БФТ
	УжеОчищено = Ложь;
	ДеревоМетаданных = РеквизитФормыВЗначение("Объект.ДеревоМетаданных");
	Отбор = Новый Структура("Выгружать", 1);
	Строки = ДеревоМетаданных.Строки.НайтиСтроки(Отбор, Истина);
	Для Каждого Стр Из Строки Цикл
		Если Стр.Родитель <> Неопределено Тогда
			МетаОбъект = Метаданные[Стр.Родитель.ПолноеИмяМетаданных][Стр.ПолноеИмяМетаданных];
			
			МенеджерОбъекта = ОбщегоНазначенияСервер.МенеджерОбъектаПоПолномуИмени(МетаОбъект.ПолноеИмя());
			// В попытке т.к. нет правильного способа проверить есть ли метод в форме менеджера или нет.
			Попытка
				ЗапросОтбораДляВыгрузки = МенеджерОбъекта.ЗапросОтбораДляВыгрузки();
			Исключение
				ЗапросОтбораДляВыгрузки = "";
			КонецПопытки;
			
			Если ЗначениеЗаполнено(ЗапросОтбораДляВыгрузки) Тогда
				Если Не УжеОчищено Тогда
					УжеОчищено = Истина;
					Объект.ДополнительныеОбъектыДляВыгрузки.Очистить(); // должно быть именно тут
				КонецЕсли;
				
				ЗаполнитьДопДанныеВыгрузки(ЗапросОтбораДляВыгрузки);	
				Стр.Выгружать = 0;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	ЗначениеВРеквизитФормы(ДеревоМетаданных, "Объект.ДеревоМетаданных");
	// -БФТ
	
	Если РежимРаботыНаКлиенте Тогда
		
		Расширение = ?(Объект.ИспользоватьФорматFastInfoSet, ".fi", ".xml");
		ИмяВременногоФайла = ПолучитьИмяВременногоФайла(Расширение);
		
	Иначе
		
		ИмяВременногоФайла = ИмяФайлаВыгрузки;
		
	КонецЕсли;
	
	ОбъектНаСервере = РеквизитФормыВЗначение("Объект");
	ЗаполнитьДеревоМетаданныхНаСервере(ОбъектНаСервере);
	
	ОбъектНаСервере.ВыполнитьВыгрузку(ИмяВременногоФайла);
	
	Если РежимРаботыНаКлиенте Тогда
		
		Файл = Новый Файл(ИмяВременногоФайла);
		
		Если Файл.Существует() Тогда
			
			ДвоичныеДанные = Новый ДвоичныеДанные(ИмяВременногоФайла);
			АдресФайлаВоВременномХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанные, УникальныйИдентификатор);
			ОбщегоНазначенияКлиентСервер.УдалитьФайлыКлиентСервер(ИмяВременногоФайла);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// +БФТ
&НаСервере
Процедура ЗаполнитьДопДанныеВыгрузки(ТекстЗапросаОтбораДляВыгрузки);
	Если Не ЗначениеЗаполнено(ТекстЗапросаОтбораДляВыгрузки) Тогда
		Возврат;	
	КонецЕсли;
	
	Запрос = Новый Запрос(ТекстЗапросаОтбораДляВыгрузки);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НовСтр = Объект.ДополнительныеОбъектыДляВыгрузки.Добавить();
		НовСтр.Объект = Выборка.Ссылка;
		НовСтр.ИмяОбъектаДляЗапроса = Выборка.Ссылка.Метаданные().ПолноеИмя();
	КонецЦикла;
КонецПроцедуры
// -БФТ


&НаСервере
Процедура ПроставитьПометкиВыгружаемыхДанных(СтрокиИсходногоДерева, СтрокиЗаменяемогоДерева)
	
	КолонкаВыгружать = СтрокиЗаменяемогоДерева.ВыгрузитьКолонку("Выгружать");
	СтрокиИсходногоДерева.ЗагрузитьКолонку(КолонкаВыгружать, "Выгружать");
	
	КолонкаВыгружатьПриНеобходимости = СтрокиЗаменяемогоДерева.ВыгрузитьКолонку("ВыгружатьПриНеобходимости");
	СтрокиИсходногоДерева.ЗагрузитьКолонку(КолонкаВыгружатьПриНеобходимости, "ВыгружатьПриНеобходимости");
	
	КолонкаРазвернут = СтрокиЗаменяемогоДерева.ВыгрузитьКолонку("Развернут");
	СтрокиИсходногоДерева.ЗагрузитьКолонку(КолонкаРазвернут, "Развернут");
	
	Для Каждого СтрокаИсходногоДерева Из СтрокиИсходногоДерева Цикл
		
		ИндексСтроки = СтрокиИсходногоДерева.Индекс(СтрокаИсходногоДерева);
		СтрокаИзменяемогоДерева = СтрокиЗаменяемогоДерева.Получить(ИндексСтроки);
		
		ПроставитьПометкиВыгружаемыхДанных(СтрокаИсходногоДерева.Строки, СтрокаИзменяемогоДерева.Строки);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьДанныеЗавершение(Результат, Адрес, ВыбранноеИмяФайла, ДополнительныеПараметры) Экспорт
	
	Если Результат Тогда
		
		Состояние(НСтр("ru = 'Выполняется загрузка данных. Пожалуйста, подождите...'"));
		
		Файл = Новый Файл(ВыбранноеИмяФайла);
		Если Не Файл.Существует() Тогда
			
			ТекстСообщения = НСтр("ru = 'Указанный файл не существует'");
			ПутьКДанным = ?(РежимРаботыНаКлиенте, "", "ИмяФайлаЗагрузки");
			СообщитьПользователю(ТекстСообщения, ПутьКДанным);
			Возврат;
			
		КонецЕсли;
		
		ЗагрузитьДанныеНаСервере(Адрес, Файл.Расширение);
	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьДанныеНаСервере(АдресФайлаВоВременномХранилище, Расширение)
	
	Если РежимРаботыНаКлиенте Тогда
		
		ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресФайлаВоВременномХранилище);
		ИмяВременногоФайла = ПолучитьИмяВременногоФайла(Расширение);
		ДвоичныеДанные.Записать(ИмяВременногоФайла);
		
	Иначе
		
		ИмяВременногоФайла = ИмяФайлаЗагрузки;
		
	КонецЕсли;
	
	РеквизитФормыВЗначение("Объект").ВыполнитьЗагрузку(ИмяВременногоФайла);
	
	Если РежимРаботыНаКлиенте Тогда
		
		Файл = Новый Файл(ИмяВременногоФайла);
		
		Если Файл.Существует() Тогда
			
			ОбщегоНазначенияКлиентСервер.УдалитьФайлыКлиентСервер(ИмяВременногоФайла);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПересчитатьВыгружаемыеПоСсылкеНаСервере()
	
	ОбъектНаСервере = РеквизитФормыВЗначение("Объект");
	ЗаполнитьДеревоМетаданныхНаСервере(ОбъектНаСервере);
	ОбъектНаСервере.СоставВыгрузки(Истина);
	ЗначениеВРеквизитФормы(ОбъектНаСервере.ДеревоМетаданных, "Объект.ДеревоМетаданных");
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДеревоМетаданныхНаСервере(ОбъектНаСервере)
	
	ДеревоМетаданных = РеквизитФормыВЗначение("Объект.ДеревоМетаданных");
	
	ОбъектНаСервере.Инициализация();
	
	ПроставитьПометкиВыгружаемыхДанных(ОбъектНаСервере.ДеревоМетаданных.Строки, ДеревоМетаданных.Строки);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьОтображениеДерева(СтрокиДерева)
	
	Для Каждого Строка Из СтрокиДерева Цикл
		
		ИдентификаторСтроки=Строка.ПолучитьИдентификатор();
		Строка.Развернут = Элементы.ДеревоМетаданных.Развернут(ИдентификаторСтроки);
		
		СохранитьОтображениеДерева(Строка.ПолучитьЭлементы());
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ВосстановитьОтображениеДерева(СтрокиДерева)
	
	Для Каждого Строка Из СтрокиДерева Цикл
		
		ИдентификаторСтроки=Строка.ПолучитьИдентификатор();
		Если Строка.Развернут Тогда
			Элементы.ДеревоМетаданных.Развернуть(ИдентификаторСтроки);
		КонецЕсли;
		
		ВосстановитьОтображениеДерева(Строка.ПолучитьЭлементы());
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ИмяОбъектаПоТипуДляЗапроса(Ссылка)
	
	МетаданныеОбъекта = Ссылка.Метаданные();
	ИмяМетаданных = МетаданныеОбъекта.Имя;
	
	ИмяДляЗапроса = "";
	
	Если Метаданные.Справочники.Содержит(МетаданныеОбъекта) Тогда
		ИмяДляЗапроса = "Справочник";
	ИначеЕсли Метаданные.Документы.Содержит(МетаданныеОбъекта) Тогда
		ИмяДляЗапроса = "Документ";
	ИначеЕсли Метаданные.ПланыВидовХарактеристик.Содержит(МетаданныеОбъекта) Тогда
		ИмяДляЗапроса = "ПланВидовХарактеристик";
	ИначеЕсли Метаданные.ПланыСчетов.Содержит(МетаданныеОбъекта) Тогда
		ИмяДляЗапроса = "ПланСчетов";
	ИначеЕсли Метаданные.ПланыВидовРасчета.Содержит(МетаданныеОбъекта) Тогда
		ИмяДляЗапроса = "ПланВидовРасчета";
	ИначеЕсли Метаданные.ПланыОбмена.Содержит(МетаданныеОбъекта) Тогда
		ИмяДляЗапроса = "ПланОбмена";
	ИначеЕсли Метаданные.БизнесПроцессы.Содержит(МетаданныеОбъекта) Тогда
		ИмяДляЗапроса = "БизнесПроцесс";
	ИначеЕсли Метаданные.Задачи.Содержит(МетаданныеОбъекта) Тогда
		ИмяДляЗапроса = "Задача";
	КонецЕсли;
	
	Если ПустаяСтрока(ИмяДляЗапроса) Тогда
		Возврат "";
	Иначе
		Возврат ИмяДляЗапроса + "." + ИмяМетаданных;
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ОбработкаВыбораНаСервере(ВыбранныеЗначения)
	
	Если ТипЗнч(ВыбранныеЗначения) = Тип("Структура") Тогда
		
		РезультатЗапроса = ПолучитьИзВременногоХранилища(ВыбранныеЗначения.ДанныеВыбора);
		
		Если ТипЗнч(РезультатЗапроса)=Тип("Массив") Тогда
			
			РезультатЗапроса = РезультатЗапроса[РезультатЗапроса.ВГраница()];
			
			Если РезультатЗапроса.Колонки.Найти("Ссылка") <> Неопределено Тогда
				ВыбранныеСсылки = РезультатЗапроса.Выгрузить();
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		ВыбранныеСсылки = ВыбранныеЗначения;
		
	КонецЕсли;
	
	Для Каждого Значение Из ВыбранныеСсылки Цикл
		
		НоваяСтрока = Объект.ДополнительныеОбъектыДляВыгрузки.Добавить();
		НоваяСтрока.Объект = Значение.Ссылка;
		НоваяСтрока.ИмяОбъектаДляЗапроса = ИмяОбъектаПоТипуДляЗапроса(Значение.Ссылка);
		
	КонецЦикла
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузкаНаКлиентеИлиНаСервереПриИзменении(Элемент)
	
	ПриИзмененииРежимаРаботы();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузкаНаКлиентеИлиНаСервереПриИзменении(Элемент)
	
	ПриИзмененииРежимаРаботы();
	
КонецПроцедуры

&НаСервере
Функция ПроверитьВерсиюИРежимСовместимостиПлатформы()
	
	Информация = Новый СистемнаяИнформация;
	Если Не (Лев(Информация.ВерсияПриложения, 3) = "8.3"
		И (Метаданные.РежимСовместимости = Метаданные.СвойстваОбъектов.РежимСовместимости.НеИспользовать
		Или (Метаданные.РежимСовместимости <> Метаданные.СвойстваОбъектов.РежимСовместимости.Версия8_1
		И Метаданные.РежимСовместимости <> Метаданные.СвойстваОбъектов.РежимСовместимости.Версия8_2_13
		И Метаданные.РежимСовместимости <> Метаданные.СвойстваОбъектов.РежимСовместимости["Версия8_2_16"]
		И Метаданные.РежимСовместимости <> Метаданные.СвойстваОбъектов.РежимСовместимости["Версия8_3_1"]
		И Метаданные.РежимСовместимости <> Метаданные.СвойстваОбъектов.РежимСовместимости["Версия8_3_2"]))) Тогда
		
		ВызватьИсключение НСтр("ru = 'Обработка предназначена для запуска на версии платформы
			|1С:Предприятие 8.3 с отключенным режимом совместимости или выше'");
		
	КонецЕсли;
	
КонецФункции


#КонецОбласти

#Область БФТ

&НаКлиенте
Процедура ДеревоПодсистемВыборПриИзменении(Элемент)
	ТекДанные = Элементы.ДеревоПодсистем.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;	
	КонецЕсли;
	
	УстановитьГалкиНаКлиенте(ТекДанные);	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьГалкиНаКлиенте(ДанныеСтроки)
	Если ДанныеСтроки.Выбор = 2 Тогда
		ДанныеСтроки.Выбор = 0;
	КонецЕсли;
	
	УстановитьПометкиПодчиненных(ДанныеСтроки, "Выбор");
	УстановитьПометкиРодителей(ДанныеСтроки, "Выбор");

	СписокОбъектовМетаданных = ОбщегоНазначенияСервер.ПолучитьСписокМетаданныхПодсистемы(ПолучитьРодительскуюПодсистему(ДанныеСтроки), ДанныеСтроки.Наименование);
	СохранитьОтображениеДерева(Объект.ДеревоМетаданных.ПолучитьЭлементы());
	УстановитьГалки(СписокОбъектовМетаданных, ДанныеСтроки.Выбор); 
	ВосстановитьОтображениеДерева(Объект.ДеревоМетаданных.ПолучитьЭлементы());
КонецПроцедуры

&НаКлиенте
Функция ПолучитьРодительскуюПодсистему(ТекДанные)
	Родитель = ТекДанные.ПолучитьРодителя();
	Если Родитель = Неопределено Тогда
		Возврат ТекДанные.Наименование;	
	Иначе
		Возврат ПолучитьРодительскуюПодсистему(Родитель);
	КонецЕсли;
КонецФункции

&НаСервере
Процедура УстановитьГалки(СписокОбъектовМетаданных, Установить)
	Дерево = РеквизитФормыВЗначение("Объект.ДеревоМетаданных");
	
	Для Каждого ИмяОбъекта Из СписокОбъектовМетаданных Цикл      
		Разбивка = СтрРазделить(ИмяОбъекта, "."); 
		БазовыйТипПоОбъекта = ОбщегоНазначенияСервер.ИмяБазовогоТипаПоОбъектуМетаданных(Метаданные.НайтиПоПолномуИмени(ИмяОбъекта));
		
		Отбор = Новый Структура("ПолноеИмяМетаданных", Разбивка[1]);
		Строки = Дерево.Строки.НайтиСтроки(Отбор, Истина);
		Для Каждого Стр Из Строки Цикл
			Если Стр.Родитель = Неопределено ИЛИ Стр.Родитель.ПолноеИмяМетаданных <> БазовыйТипПоОбъекта Тогда
				Продолжить;
			КонецЕсли;                                          
			
			Стр.Выгружать = Установить;
			Стр.Родитель.Выгружать = ?(Установить, 2, 0);
		КонецЦикла;
	КонецЦикла;                                       
	
	ЗначениеВРеквизитФормы(Дерево, "Объект.ДеревоМетаданных");
КонецПроцедуры


&НаКлиенте
Процедура НайтиИУстановитьГалку(Строки, ИскомаяПодсистема)
	
	Для Каждого Стр Из Строки Цикл
		Если Стр.ПолучитьЭлементы().Количество() > 0 Тогда
			НайтиИУстановитьГалку(Стр.ПолучитьЭлементы(), ИскомаяПодсистема);
		КонецЕсли;
		
		Если ВРег(Стр.Наименование) = ВРег(ИскомаяПодсистема) Тогда
			Стр.Выбор = Истина;
			УстановитьГалкиНаКлиенте(Стр);	
			
			УстановитьПометкиПодчиненных(Стр, "Выбор");
			УстановитьПометкиРодителей(Стр, "Выбор");
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура УдалятьЗаписиПередЗагрузкойПриИзменении(Элемент)
	Объект.ПродолжитьЗагрузкуВСлучаеВозникновенияОшибки = Ложь;
  Объект.ПриЗагрузкеИспользоватьРежимОбменаДанными = Истина;
  Элементы.ПродолжитьЗагрузкуВСлучаеВозникновенияОшибки.ТолькоПросмотр = Объект.УдалятьЗаписиПередЗагрузкой;
  Элементы.ПриЗагрузкеИспользоватьРежимОбменаДанными.ТолькоПросмотр = Объект.УдалятьЗаписиПередЗагрузкой;
КонецПроцедуры

&НаСервере
Процедура ВосстановитьИзМакетовНаСервере()
	
	Для Каждого СтрТЧ Из СписокМакетов Цикл
		Если Не СтрТЧ.ФлагОбработки Тогда
			Продолжить;
		КонецЕсли;
		
		Сообщение = Новый СообщениеПользователю();
		Сообщение.Текст = СтрШаблон("Загрузка макета ""%1""", СтрТЧ.ИмяМакета);
		Сообщение.Сообщить();
		
		ОбъектМакета = РеквизитФормыВЗначение("Объект");
		Макет = ОбъектМакета.ПолучитьМакет(СтрТЧ.ИмяМакета);
		
		ИмяФайла = ПолучитьИмяВременногоФайла("xml");
		ФайлМакета = Новый ЗаписьТекста(ИмяФайла);
		ФайлМакета.Записать(Макет.ПолучитьТекст());
		ФайлМакета.Закрыть();
		
		ФайлДанных = Новый ДвоичныеДанные(ИмяФайла);

		Адрес = "";
		Адрес = ПоместитьВоВременноеХранилище(ФайлДанных, Адрес);
		
		ЗагрузитьДанныеНаСервере(Адрес, "xml");
		
		Сообщение = Новый СообщениеПользователю();
		Сообщение.Текст = "-----------------";
		Сообщение.Сообщить();
	КонецЦикла;
		
КонецПроцедуры

&НаКлиенте
Процедура ВосстановитьИзМакетов(Команда)
	ОчиститьСообщения();
	ВосстановитьИзМакетовНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьВсеМакеты(Команда)
	УстановитьСнятьФлажкиМакетов(Истина);
КонецПроцедуры

&НаКлиенте
Процедура СнятьВыборМакетов(Команда)
	УстановитьСнятьФлажкиМакетов(Ложь);
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСнятьФлажкиМакетов(Значение)
	Для Каждого СтрТЧ Из СписокМакетов Цикл
		СтрТЧ.ФлагОбработки = Значение;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ПомещатьМакетВSVNПриИзменении(Элемент)
	ОбновитьДоступностьПоля();
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДоступностьПоля()
	Если ПомещатьМакетВSVN И РежимРаботыНаКлиентеИлиНаСервере <> 0 Тогда
		ПомещатьМакетВSVN = Ложь; // сбрасываем флаг, если он был установлен и переключили выгрузку в режим "на сервере"
	КонецЕсли;
	
	Элементы.ПомещатьМакетВSVN.Доступность = РежимРаботыНаКлиентеИлиНаСервере = 0;
	Элементы.НастройкиПодключенияКSVN.Доступность = ПомещатьМакетВSVN;
	Элементы.НастройкиПодключенияКSVN.ОтметкаНезаполненного = ПомещатьМакетВSVN И Не ЗначениеЗаполнено(НастройкиПодключенияКSVN);
	
	Если Не ЗначениеЗаполнено(НастройкиПодключенияКSVN) Тогда
		НастройкиПодключенияКSVN = ОбщегоНазначенияСервер.ПолучитьЕдинственнуюНастройкуПодключенияКРепозиторию();
	КонецЕсли;
КонецПроцедуры

#КонецОбласти