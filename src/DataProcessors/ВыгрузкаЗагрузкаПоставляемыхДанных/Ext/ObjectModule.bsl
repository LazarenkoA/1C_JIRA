/////////////// Защита модуля ///////////////
// @protect                                //
/////////////////////////////////////////////

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
	#Область ОписаниеПеременных
	Перем МетаданныеОписание Экспорт; // МетаданныеОписание
	Перем СсылочныеТипы Экспорт; // СсылочныеТипы
	Перем СоответствиеОбъектовМетаданныхИСсылочныхТипов; // СоответствиеОбъектовМетаданныхИСсылочныхТипов
	Перем ОбработанныхКонстант Экспорт; // ОбработанныхКонстант
	Перем ОбработанныхНаборовЗаписей Экспорт; // ОбработанныхНаборовЗаписей
	Перем мСоответствиеКолонокДвижений; // мСоответствиеКолонокДвижений
	
	Перем СоставПолнойВыгрузки Экспорт; // Массив строк дерева метаданных, имеющих признак Выгружать.
	
	
	// Массив строк дерева метаданных, имеющих признак выгрузки по ссылке.
	Перем СоставВспомогательнойВыгрузки;
	
	// Массив регистров, использующих итоги.
	Перем ИспользующиеИтоги;
	
	Перем мТипРезультатЗапроса; 
	Перем мТипДанныхУдаления;
	
	Перем мВыгруженныеОбъекты;
	Перем мКоличествоСохраненныхПоследнихВыгрузок;
	
	Перем мНаличиеВыгрузкиПодчиненныхОбъектов;
	Перем ТаблицаПредопределенных;
	Перем СоответствиеЗаменыСсылок;
	Перем Сериализатор;
	#КонецОбласти
	
	#Область ПрограммныйИнтерфейс
	
	// Процедура - Выполнить выгрузку
	//
	// Параметры:
	//  ИмяФайла													 - 	 - Имя файла выгрузки.
	//  ТолькоПроверкаНедопустимыхСимволов - 	 - Проверять только недопустимые символы.
	//
	Процедура ВыполнитьВыгрузку(Знач ИмяФайла, ТолькоПроверкаНедопустимыхСимволов = Ложь) Экспорт
		
		ОбъектыВыгруженныеСОшибками = Новый Соответствие;
		
		СоставВыгрузки();
				
		Если СоставПолнойВыгрузки.Количество() = 0
			И ДополнительныеОбъектыДляВыгрузки.Количество() = 0 Тогда
			
			СообщитьПользователю(НСтр("ru = 'Не задан состав выгрузки'"));
			Возврат;
			
		КонецЕсли;
		
		Если ТолькоПроверкаНедопустимыхСимволов Тогда
			
			ЗаписьXML = СоздатьОбъектЗаписиXMLДляПроверки();
			
			ВыгрузкаДанных(ЗаписьXML, ТолькоПроверкаНедопустимыхСимволов, ОбъектыВыгруженныеСОшибками);
			
		Иначе
			
			Если ИспользоватьФорматFastInfoSet Тогда
				
				ЗаписьXML = Новый ЗаписьFastInfoset;
				ЗаписьXML.ОткрытьФайл(ИмяФайла);
				
			Иначе
				
				ЗаписьXML = Новый ЗаписьXML;
				ЗаписьXML.ОткрытьФайл(ИмяФайла, "UTF-8");
				
			КонецЕсли;
			
			ЗаписьXML.ЗаписатьОбъявлениеXML();
			ЗаписьXML.ЗаписатьНачалоЭлемента("_1CV8DtUD", "http://www.1c.ru/V8/1CV8DtUD/");
			ЗаписьXML.ЗаписатьСоответствиеПространстваИмен("V8Exch", "http://www.1c.ru/V8/1CV8DtUD/");
			ЗаписьXML.ЗаписатьСоответствиеПространстваИмен("xsi", "http://www.w3.org/2001/XMLSchema-instance");
			ЗаписьXML.ЗаписатьСоответствиеПространстваИмен("core", "http://v8.1c.ru/data");
			
			ЗаписьXML.ЗаписатьСоответствиеПространстваИмен("v8", "http://v8.1c.ru/8.1/data/enterprise/current-config");
			ЗаписьXML.ЗаписатьСоответствиеПространстваИмен("xs", "http://www.w3.org/2001/XMLSchema");
			
			ЗаписьXML.ЗаписатьНачалоЭлемента("V8Exch:Data");
			
			Если ТолькоПроверкаНедопустимыхСимволов Тогда
				
				ШаблонНачалоПроверки = НСтр("ru = 'Начало проверки: %Дата'");
				СообщениеНачалоПроверки = СтрЗаменить(ШаблонНачалоПроверки, "%Дата", ТекущаяДатаСеанса());
				СообщитьПользователю(СообщениеНачалоПроверки);
				
			Иначе
				
				ШаблонНачалоВыгрузки = НСтр("ru = 'Начало выгрузки: %Дата'");
				СообщениеНачалоВыгрузки = СтрЗаменить(ШаблонНачалоВыгрузки, "%Дата", ТекущаяДатаСеанса());
				СообщитьПользователю(СообщениеНачалоВыгрузки);
				
			КонецЕсли;
			
			ИнициализироватьСериализаторXDTOСАннотациейТипов();
			
			ВыгрузкаДанных(ЗаписьXML);
			
			ЗаписьXML.ЗаписатьКонецЭлемента(); // V8Exc:Data
			ВыгрузитьТаблицуПредопределенных(ЗаписьXML);
			ЗаписьXML.ЗаписатьКонецЭлемента(); // V8Exc:_1CV8DtUD
			
		КонецЕсли;
		
		Если ТолькоПроверкаНедопустимыхСимволов Тогда
			
			ШаблонПроверено = НСтр("ru = 'Проверено объектов: %Проверено'");
			СообщениеПроверено = СтрЗаменить(ШаблонПроверено, "%Проверено", ВсегоОбработанныхЗаписей());
			СообщитьПользователю(СообщениеПроверено);
			
			ШаблонОкончание = НСтр("ru = 'Окончание проверки: %Дата'");
			СообщениеОкончание = СтрЗаменить(ШаблонОкончание, "%Дата", ТекущаяДатаСеанса());
			СообщитьПользователю(СообщениеОкончание);
			
		Иначе
			
			ШаблонВыгружено = НСтр("ru = 'Выгружено объектов: %Выгружено'");
			СообщениеВыгружено = СтрЗаменить(ШаблонВыгружено, "%Выгружено", ВсегоОбработанныхЗаписей());
			СообщитьПользователю(СообщениеВыгружено);
			
			ШаблонОкончание = НСтр("ru = 'Окончание выгрузки: %Дата'");
			СообщениеОкончание = СтрЗаменить(ШаблонОкончание, "%Дата", ТекущаяДатаСеанса());
			СообщитьПользователю(СообщениеОкончание);
			
			СообщитьПользователю(НСтр("ru = 'Выгрузка данных успешно завершена'"));
			
		КонецЕсли;
		
	КонецПроцедуры
	
	// Процедура разбирает файл выгрузки и осуществляет запись в ИБ сохраненных
	// там объектов.
	//
	// Параметры:
	//   ИмяФайла - Строка - имя файла выгрузки.
	//
	Процедура ВыполнитьЗагрузку(Знач ИмяФайла) Экспорт
		
		Файл = Новый Файл(ИмяФайла);
		
		Если Файл.Расширение = ".fi" Тогда
			
			ЧтениеXML = Новый ЧтениеFastInfoset;
			ЧтениеXML.Прочитать();
			ЧтениеXML.ОткрытьФайл(ИмяФайла);
			
			ЗаписьXML = Новый ЗаписьXML;
			ИмяВременногоФайла = ПолучитьИмяВременногоФайла("xml");
			ЗаписьXML.ОткрытьФайл(ИмяВременногоФайла, "UTF-8");
			
			Пока ЧтениеXML.Прочитать() Цикл
				
				ЗаписьXML.ЗаписатьТекущий(ЧтениеXML);
				
			КонецЦикла;
			
			ЗаписьXML.Закрыть();
			
			ИмяФайла = ИмяВременногоФайла;
			
		КонецЕсли;
		
		ЧтениеXML = Новый ЧтениеXML;
		ЧтениеXML.ОткрытьФайл(ИмяФайла);
		// Проверка формата файла обмена.
		Если Не ЧтениеXML.Прочитать()
			Или ЧтениеXML.ТипУзла <> ТипУзлаXML.НачалоЭлемента
			Или ЧтениеXML.ЛокальноеИмя <> "_1CV8DtUD"
			Или ЧтениеXML.URIПространстваИмен <> "http://www.1c.ru/V8/1CV8DtUD/" Тогда
			
			СообщитьПользователю(НСтр("ru = 'Неверный формат файла выгрузки'"));
			Возврат;
			
		КонецЕсли;
		
		Если Не ЧтениеXML.Прочитать()
			Или ЧтениеXML.ТипУзла <> ТипУзлаXML.НачалоЭлемента
			Или ЧтениеXML.ЛокальноеИмя <> "Data" Тогда
			
			СообщитьПользователю(НСтр("ru = 'Неверный формат файла выгрузки'"));
			Возврат;
			
		КонецЕсли;
		
		ЗагрузитьТаблицуПредопределенных(ЧтениеXML);
		ЗаменитьСсылкиНаПредопределенные(ИмяФайла);
		
		ЧтениеXML.ОткрытьФайл(ИмяФайла);
		ЧтениеXML.Прочитать();
		ЧтениеXML.Прочитать();
		
		// Чтение и запись в ИБ записанных в выгрузке объектов.
		Если Не ЧтениеXML.Прочитать() Тогда 
			
			СообщитьПользователю(НСтр("ru = 'Неверный формат файла выгрузки'"));
			Возврат;
			
		КонецЕсли;
		
		Загружено = 0;
		УбратьИспользованиеИтогов();
		
		ШаблонСообщения = НСтр("ru = 'Начало загрузки: %Дата'");
		ТекстСообщения = СтрЗаменить(ШаблонСообщения, "%Дата", ТекущаяДатаСеанса());
		
		СообщитьПользователю(ТекстСообщения);
		
		ИнициализироватьСериализаторXDTOСАннотациейТипов();
		
		// +БФТ
		Если ЭтотОбъект.УдалятьЗаписиПередЗагрузкой Тогда
			НачатьТранзакцию();  
		КонецЕсли;
		// -БФТ
		
		Попытка
			ОбработанныеТипы = Новый Массив(); 
			Пока Сериализатор.ВозможностьЧтенияXML(ЧтениеXML) Цикл
				#region ТелоЦикла
				Попытка
					ЗаписанноеЗначение = Сериализатор.ПрочитатьXML(ЧтениеXML);
				Исключение
					ВосстановитьИспользованиеИтогов();
					ВызватьИсключение;
				КонецПопытки;
				
				Если ПриЗагрузкеИспользоватьРежимОбменаДанными Тогда
					
					Попытка // Планы обмена свойства ОбменДанными не имеют.
						ЗаписанноеЗначение.ОбменДанными.Загрузка = Истина;
					Исключение
					КонецПопытки;
					
				КонецЕсли;
				
				Попытка
					// БФТ Лазаренко
					Если ЭтотОбъект.УдалятьЗаписиПередЗагрузкой Тогда
						УдалитьВсеЗаписиТипа(ЗаписанноеЗначение, ОбработанныеТипы);
					КонецЕсли;
					
					ЗаписанноеЗначение.Записать();
				Исключение
					
					ТекстОшибки = ОписаниеОшибки();
					
					Если НЕ ПродолжитьЗагрузкуВСлучаеВозникновенияОшибки Тогда
						
						ВосстановитьИспользованиеИтогов();
						ВызватьИсключение;
						
					Иначе
						
						Попытка
							ТекстСообщения = НСтр("ru = 'При загрузке объекта %1(%2) возникла ошибка:
							|%3'");
							ТекстСообщения = ПодставитьПараметрыВСтроку(ТекстСообщения, ЗаписанноеЗначение, ТипЗнч(ЗаписанноеЗначение), ТекстОшибки);
						Исключение
							ТекстСообщения = НСтр("ru = 'При загрузке данных возникла ошибка:
							|%1'");
							ТекстСообщения = ПодставитьПараметрыВСтроку(ТекстСообщения, ТекстОшибки);
						КонецПопытки;
						
						СообщитьПользователю(ТекстСообщения);
						
					КонецЕсли;
					
					Загружено = Загружено - 1;
					
				КонецПопытки;	
				
				Загружено = Загружено + 1;
				#endregion
			КонецЦикла;
			
			Если ЭтотОбъект.УдалятьЗаписиПередЗагрузкой Тогда
				ЗафиксироватьТранзакцию();
			КонецЕсли;
			ВосстановитьИспользованиеИтогов();
		Исключение
			Если ЭтотОбъект.УдалятьЗаписиПередЗагрузкой Тогда
				ОтменитьТранзакцию();
			КонецЕсли;
			
			ВосстановитьИспользованиеИтогов();
			ВызватьИсключение;
		КонецПопытки;
		
		// Проверка формата файла обмена.
		Если ЧтениеXML.ТипУзла <> ТипУзлаXML.КонецЭлемента
			Или ЧтениеXML.ЛокальноеИмя <> "Data" Тогда
			
			СообщитьПользователю(НСтр("ru = 'Неверный формат файла выгрузки'"));
			Возврат;
			
		КонецЕсли;
		
		Если Не ЧтениеXML.Прочитать()
			Или ЧтениеXML.ТипУзла <> ТипУзлаXML.НачалоЭлемента
			Или ЧтениеXML.ЛокальноеИмя <> "PredefinedData" Тогда
			
			СообщитьПользователю(НСтр("ru = 'Неверный формат файла выгрузки'"));
			Возврат;
			
		КонецЕсли;
		
		ЧтениеXML.Пропустить();
		
		Если Не ЧтениеXML.Прочитать()
			Или ЧтениеXML.ТипУзла <> ТипУзлаXML.КонецЭлемента
			Или ЧтениеXML.ЛокальноеИмя <> "_1CV8DtUD"
			Или ЧтениеXML.URIПространстваИмен <> "http://www.1c.ru/V8/1CV8DtUD/" Тогда
			
			СообщитьПользователю(НСтр("ru = 'Неверный формат файла выгрузки'"));
			Возврат;
			
		КонецЕсли;
		
		ЧтениеXML.Закрыть();
		
		ШаблонЗагружено = НСтр("ru = 'Загружено объектов: %Количество'");
		СообщениеЗагружено = СтрЗаменить(ШаблонЗагружено, "%Количество", Загружено);
		
		ШаблонОкончание = НСтр("ru = 'Окончание загрузки: %Дата'");
		СообщениеОкончание = СтрЗаменить(ШаблонОкончание, "%Дата", ТекущаяДатаСеанса());
		
		СообщитьПользователю(СообщениеЗагружено);
		СообщитьПользователю(СообщениеОкончание);
		СообщитьПользователю(НСтр("ru = 'Загрузка данных успешно завершена'"));
		
	КонецПроцедуры
	
	// Процедура производит начальную инициализацию - заполнение дерева описания
	// классов объектов метаданных, дерево метаданных, список ссылочных типов.
	Процедура Инициализация() Экспорт
		
		ВключитьВозможностьРедактированияИспользованияИтогов = Ложь;
		
		// Создаем объект, описывающий процессы построения дерева и выгрузку.
		ЗаполнитьОписаниеМетаданных();
		
		МетаданныеОписание = МетаданныеОписание.Строки[0];
		
		СсылочныеТипы = Новый Соответствие;
		СоответствиеОбъектовМетаданныхИСсылочныхТипов = Новый Соответствие;
		
		ДеревоМетаданных.Колонки.Очистить();
		// Создание необходимых колонок.
		ДеревоМетаданных.Колонки.Добавить("Выгружать", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(1, 0, ДопустимыйЗнак.Неотрицательный)));
		ДеревоМетаданных.Колонки.Добавить("ВыгружатьПриНеобходимости", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(1, 0, ДопустимыйЗнак.Неотрицательный)));
		ДеревоМетаданных.Колонки.Добавить("Метаданные");
		ДеревоМетаданных.Колонки.Добавить("ЭлементОписания");
		ДеревоМетаданных.Колонки.Добавить("ОбъектМД");
		ДеревоМетаданных.Колонки.Добавить("ПолноеИмяМетаданных");
		ДеревоМетаданных.Колонки.Добавить("НастройкиПостроителя");
		ДеревоМетаданных.Колонки.Добавить("ИспользоватьОтбор");
		ДеревоМетаданных.Колонки.Добавить("ИндексКартинки");
		ДеревоМетаданных.Колонки.Добавить("Развернут");
		
		ИспользующиеИтоги = Новый Массив;
		Корень = ДеревоМетаданных.Строки.Добавить();
		ПостроениеПоддереваОбъекта(Метаданные, Корень, МетаданныеОписание);
		СверткаПоддереваОбъекта(Корень);
		
		Для Каждого Эл Из СсылочныеТипы Цикл
			СоответствиеОбъектовМетаданныхИСсылочныхТипов.Вставить(Эл.Значение, Эл.Ключ);
		КонецЦикла;
	КонецПроцедуры	
	
	// Процедура рекурсивно обрабатывает дерево метаданных, образуя списки полной и вспомогательной выгрузки.
	//
	// Параметры:
	//		ПересчитатьВыгружаемыеПоСсылке - Булево - ПересчитатьВыгружаемыеПоСсылке.
	Процедура СоставВыгрузки(ПересчитатьВыгружаемыеПоСсылке = Ложь) Экспорт
		
		СоставПолнойВыгрузки = Новый ТаблицаЗначений;
		СоставПолнойВыгрузки.Колонки.Добавить("ОбъектМД");
		СоставПолнойВыгрузки.Колонки.Добавить("СтрокаДерева");	
		СоставПолнойВыгрузки.Индексы.Добавить("ОбъектМД");
		
		СоставВспомогательнойВыгрузки = Новый ТаблицаЗначений;
		СоставВспомогательнойВыгрузки.Колонки.Добавить("ОбъектМД");
		СоставВспомогательнойВыгрузки.Колонки.Добавить("СтрокаДерева");	
		СоставВспомогательнойВыгрузки.Индексы.Добавить("ОбъектМД");
		
		Для Каждого СтрокаДЗ Из ДеревоМетаданных.Строки Цикл
			ДобавитьВыгружаемыеОбъекты(СоставПолнойВыгрузки, СоставВспомогательнойВыгрузки, СтрокаДЗ);
		КонецЦикла;
		
		мНаличиеВыгрузкиПодчиненныхОбъектов = СоставВспомогательнойВыгрузки.Количество() > 0;
		
		Если ПересчитатьВыгружаемыеПоСсылке Тогда
			
			ПересчитатьВыгружаемыеПоСсылке(СоставПолнойВыгрузки);
			
		КонецЕсли;
		
	КонецПроцедуры
	
	// Процедура обрабатывает состояние признака Выгрузка, проставляя признаки Выгрузка и ВыгружатьПриНеобходимости
	// связанным ветвям дерева.
	//
	// Параметры:
	//   ЭлементДЗ - - строка дерева метаданных.
	//
	Процедура ОбработкаИзмененияСостоянияВыгружать(ЭлементДЗ) Экспорт
		Если ЭлементДЗ.Выгружать = 2 Тогда
			ЭлементДЗ.Выгружать = 0;
		КонецЕсли;
		// Изменяем состояние "вниз"
		УстановитьВыгружатьПодчиненным(ЭлементДЗ);
		// Изменяем состояние "вверх"
		ОбновитьСостояниеВыгружать(ЭлементДЗ.Родитель);
	КонецПроцедуры
	
	// Процедура обрабатывает состояние признака Выгрузка, проставляя признаки Выгрузка и ВыгружатьПриНеобходимости
	// связанным ветвям дерева.
	//
	// Параметры:
	//   ЭлементДЗ - - строка дерева метаданных.
	//
	Процедура ОбработкаИзмененияСостоянияВыгружатьПриНеобходимости(ЭлементДЗ) Экспорт
		
		Если ЭлементДЗ.ВыгружатьПриНеобходимости = 2 Тогда
			ЭлементДЗ.ВыгружатьПриНеобходимости = 0;
		КонецЕсли;
		
		// Изменяем состояние "вниз"
		УстановитьВыгружатьПриНеобходимостиПодчиненным(ЭлементДЗ);
		// Изменяем состояние "вверх"
		ОбновитьСостояниеВыгружатьПриНеобходимости(ЭлементДЗ.Родитель);
		
	КонецПроцедуры
	
	// Функция - Объект образует ссылочный тип
	//
	// Параметры:
	//  ОбъектМД - 	 - объект метаданных.
	// 
	// Возвращаемое значение:
	// Булево  -  Истина, если переданный объект метаданных имеет ссылочный тип, Ложь - противном случае.
	//
	Функция ОбъектОбразуетСсылочныйТип(ОбъектМД) Экспорт
		
		Если ОбъектМД = Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;
		
		Если Метаданные.Справочники.Содержит(ОбъектМД)
			ИЛИ Метаданные.Документы.Содержит(ОбъектМД)
			ИЛИ Метаданные.ПланыВидовХарактеристик.Содержит(ОбъектМД)
			ИЛИ Метаданные.ПланыСчетов.Содержит(ОбъектМД)
			ИЛИ Метаданные.ПланыВидовРасчета.Содержит(ОбъектМД)
			ИЛИ Метаданные.ПланыОбмена.Содержит(ОбъектМД)
			ИЛИ Метаданные.БизнесПроцессы.Содержит(ОбъектМД)
			ИЛИ Метаданные.Задачи.Содержит(ОбъектМД) Тогда
			Возврат Истина;
		КонецЕсли;
		
		Возврат Ложь;
	КонецФункции
	
	
	// Процедура - Убрать использование итогов
	// Процедура, при необходимости, устанавливает отсутствие необходимости использования итогов.
	Процедура УбратьИспользованиеИтогов() Экспорт
		
		Если ВключитьВозможностьРедактированияИспользованияИтогов Тогда
			
			Для Каждого Регистр_СДЗ Из ИспользующиеИтоги Цикл
				
				Регистр_СДЗ.ЭлементОписания.Менеджер[Регистр_СДЗ.ОбъектМД.Имя].УстановитьИспользованиеИтогов(Ложь);
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецПроцедуры
	
	
	// Процедура - Восстановить использование итогов
	// Процедура, при необходимости, устанавливает необходимость использования итогов.
	Процедура ВосстановитьИспользованиеИтогов() Экспорт
		
		Если ВключитьВозможностьРедактированияИспользованияИтогов Тогда
			
			Для Каждого Регистр_СДЗ Из ИспользующиеИтоги Цикл
				
				Регистр_СДЗ.ЭлементОписания.Менеджер[Регистр_СДЗ.ОбъектМД.Имя].УстановитьИспользованиеИтогов(Истина);
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецПроцедуры
	
	// Возвращает текущее значение версии обработки.
	// 
	// Возвращаемое значение:
	//  Строка - Текущее значение версии обработки.
	//
	Функция ВерсияОбъекта() Экспорт
		
		Возврат "2.1.8";
		
	КонецФункции
	
	#КонецОбласти
	
	#Область СлужебныеПроцедурыИФункции	
	
	Функция СоздатьОбъектЗаписиXMLДляПроверки()
		
		ЗаписьXML = Новый ЗаписьXML;
		ЗаписьXML.УстановитьСтроку("UTF-16");
		ЗаписьXML.ЗаписатьНачалоЭлемента("Проверка");
		
		Возврат ЗаписьXML;
		
	КонецФункции
	
	//Функция СформироватьТаблицуОшибок(ОбъектыВыгруженныеСОшибками)
	//	
	//	Если ОбъектыВыгруженныеСОшибками.Количество() = 0 Тогда
	//		СообщитьПользователю(НСтр("ru = 'Проверка объектов на наличие недопустимых символов завершена. Ошибок не обнаружено.'"));
	//	Иначе
	//		
	//		СтрокаПоискаОшибки = "ЗаписатьXML):";
	//		ДлинаСтрокиПоиска = СтрДлина(СтрокаПоискаОшибки);
	//		
	//		ТаблицаДанных = Новый ТаблицаЗначений;
	//		ТаблицаДанных.Колонки.Добавить("Объект");
	//		ТаблицаДанных.Колонки.Добавить("ТекстОшибки");
	//		
	//		Для Каждого СтрокаСоответствия Из ОбъектыВыгруженныеСОшибками Цикл
	//			
	//			СтрокаТаблицы = ТаблицаДанных.Добавить();
	//			СтрокаТаблицы.Объект = Строка(СтрокаСоответствия.Ключ);
	//			
	//			// Служебные символы удалим из ошибки.
	//			ТекстСообщения = СформироватьТекстСообщенияБезСлужебныхСимволов(СтрокаСоответствия.Значение);
	//			
	//			ПозицияНачалаОшибки = Найти(ТекстСообщения, "ЗаписатьXML):");
	//			Если ПозицияНачалаОшибки > 0 Тогда
	//				
	//				ТекстСообщения = Сред(ТекстСообщения, ПозицияНачалаОшибки + ДлинаСтрокиПоиска);
	//				
	//			КонецЕсли;
	//			
	//			СтрокаТаблицы.ТекстОшибки = СокрЛП(ТекстСообщения);
	//			
	//		КонецЦикла;
	//		
	//	КонецЕсли;
	//	
	//КонецФункции
	
	
	//Функция СформироватьТекстСообщенияБезСлужебныхСимволов(Знач ТекстСообщения)
	//	
	//	НачалоСлужебногоСообщения    = Найти(ТекстСообщения, "{");
	//	ОкончаниеСлужебногоСообщения = Найти(ТекстСообщения, "}:");
	//	
	//	Если ОкончаниеСлужебногоСообщения > 0 
	//		И НачалоСлужебногоСообщения > 0 
	//		И НачалоСлужебногоСообщения < ОкончаниеСлужебногоСообщения Тогда
	//		
	//		ТекстСообщения = Лев(ТекстСообщения, (НачалоСлужебногоСообщения - 1)) +
	//		Сред(ТекстСообщения, (ОкончаниеСлужебногоСообщения + 2));
	//		
	//	КонецЕсли;
	//	
	//	Возврат СокрЛП(ТекстСообщения);
	//	
	//КонецФункции
	
	Процедура ВыгрузитьДанныеМассиваСсылок(МассивСсылок, СтрокаИмяДляЗапроса, ЗаписьXML, ТолькоПроверкаНедопустимыхСимволов = Ложь, ОбъектыВыгруженныеСОшибками = Неопределено)
		
		Если МассивСсылок.Количество() = 0
			ИЛИ НЕ ЗначениеЗаполнено(СтрокаИмяДляЗапроса) Тогда
			
			Возврат;
			
		КонецЕсли;
		
		Запрос = Новый Запрос();
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ _.*
		|	
		|ИЗ
		|	" + СтрокаИмяДляЗапроса + " КАК _
		|ГДЕ
		|	_.Ссылка В(&МассивСсылок)";
		
		Запрос.УстановитьПараметр("МассивСсылок", МассивСсылок);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ЗапросИЗапись(РезультатЗапроса, ЗаписьXML, Истина, ОбъектыВыгруженныеСОшибками, ТолькоПроверкаНедопустимыхСимволов);
		
	КонецПроцедуры
	
	// Процедура записывает наборы записей регистра (накопления, бухгалтерии...).
	//
	// Параметры:
	//   ЗаписьXML - объект, через которых происходит запись объектов ИБ.
	//
	Процедура ВыгрузкаДанных(ЗаписьXML, ТолькоПроверкаНедопустимыхСимволов = Ложь, ОбъектыВыгруженныеСОшибками = Неопределено)
		
		мВыгруженныеОбъекты = Новый ТаблицаЗначений;
		мВыгруженныеОбъекты.Колонки.Добавить("Ссылка");
		мВыгруженныеОбъекты.Индексы.Добавить("Ссылка");
		
		ИнициализироватьТаблицуПредопределенных();
		
		Если ОбъектыВыгруженныеСОшибками = Неопределено Тогда
			ОбъектыВыгруженныеСОшибками = Новый Соответствие;
		КонецЕсли;
		
		Попытка
			
			Для Каждого СтрокаТаблицыВыгрузки Из СоставПолнойВыгрузки Цикл
				
				СтрокаДереваМетаданных = СтрокаТаблицыВыгрузки.СтрокаДерева;
				
				Если СтрокаДереваМетаданных.ЭлементОписания.Менеджер = Неопределено Тогда
					ВызватьИсключение(НСтр("ru = 'Выгрузка данных. Внутренняя ошибка'"));
				КонецЕсли;
				
				Если Метаданные.Константы.Содержит(СтрокаДереваМетаданных.ОбъектМД) Тогда
					
					ЗаписьКонстанты(ЗаписьXML, СтрокаДереваМетаданных.ОбъектМД, ОбъектыВыгруженныеСОшибками, ТолькоПроверкаНедопустимыхСимволов);
					
				ИначеЕсли Метаданные.РегистрыСведений.Содержит(СтрокаДереваМетаданных.ОбъектМД) Или
					Метаданные.РегистрыНакопления.Содержит(СтрокаДереваМетаданных.ОбъектМД) Или
					Метаданные.РегистрыРасчета.Содержит(СтрокаДереваМетаданных.ОбъектМД) Тогда
					
					ЗаписьРегистра(ЗаписьXML, СтрокаДереваМетаданных, ОбъектыВыгруженныеСОшибками, ТолькоПроверкаНедопустимыхСимволов);
					
				ИначеЕсли Метаданные.РегистрыБухгалтерии.Содержит(СтрокаДереваМетаданных.ОбъектМД) Тогда
					
					ЗаписьРегистра(ЗаписьXML, СтрокаДереваМетаданных, ОбъектыВыгруженныеСОшибками, ТолькоПроверкаНедопустимыхСимволов, Истина);
					
				ИначеЕсли ТипЗнч(СтрокаДереваМетаданных.ЭлементОписания.Менеджер) = Тип("Строка") Тогда
					// Специальный случай для перерасчетов.
					ЗаписьПерерасчета(ЗаписьXML, СтрокаДереваМетаданных, ОбъектыВыгруженныеСОшибками, ТолькоПроверкаНедопустимыхСимволов);
					
				ИначеЕсли Метаданные.Последовательности.Содержит(СтрокаДереваМетаданных.ОбъектМД) Тогда
					
					ЗаписьПоследовательности(ЗаписьXML, СтрокаДереваМетаданных, ОбъектыВыгруженныеСОшибками, ТолькоПроверкаНедопустимыхСимволов);
					
				Иначе
					
					ЗаписьДанныхОбъектногоТипа(СтрокаДереваМетаданных, ЗаписьXML, ОбъектыВыгруженныеСОшибками, ТолькоПроверкаНедопустимыхСимволов);
					
				КонецЕсли;
				
			КонецЦикла;
			
			ДополнительныеОбъектыДляВыгрузки.Сортировать("ИмяОбъектаДляЗапроса");
			ТекущийМассивСсылок = Новый Массив();
			ТекущееИмяЗапроса = "";
			
			Для Каждого СтрокаТаблицыВыгрузки Из ДополнительныеОбъектыДляВыгрузки Цикл
				
				Если НЕ ЗначениеЗаполнено(СтрокаТаблицыВыгрузки.Объект)
					ИЛИ НЕ ЗначениеЗаполнено(СтрокаТаблицыВыгрузки.ИмяОбъектаДляЗапроса) Тогда
					
					Продолжить;
					
				КонецЕсли;
				
				Если ТекущееИмяЗапроса <> СтрокаТаблицыВыгрузки.ИмяОбъектаДляЗапроса Тогда
					
					ВыгрузитьДанныеМассиваСсылок(ТекущийМассивСсылок, ТекущееИмяЗапроса, ЗаписьXML, ТолькоПроверкаНедопустимыхСимволов, ОбъектыВыгруженныеСОшибками);
					
					ТекущийМассивСсылок = Новый массив();
					ТекущееИмяЗапроса = СтрокаТаблицыВыгрузки.ИмяОбъектаДляЗапроса;
					
				КонецЕсли;
				
				ТекущийМассивСсылок.Добавить(СтрокаТаблицыВыгрузки.Объект);
				
			КонецЦикла;
			
			ВыгрузитьДанныеМассиваСсылок(ТекущийМассивСсылок, ТекущееИмяЗапроса, ЗаписьXML, ТолькоПроверкаНедопустимыхСимволов, ОбъектыВыгруженныеСОшибками);
			
		Исключение
			ВызватьИсключение;
		КонецПопытки;
		
	КонецПроцедуры
	
	Функция ПолучитьСтрокуОграниченияПоДатеДляЗапроса(Свойства, ИмяТипа)
		
		ИтоговоеОграничениеПоДате = "";
		ИмяТаблицы = "_";
		
		Если НЕ (ИмяТипа = "Документ" ИЛИ ИмяТипа = "РегистрСведений" ИЛИ ИмяТипа = "Регистр") Тогда
			Возврат ИтоговоеОграничениеПоДате;
		КонецЕсли;
		
		ИмяПоляОграничения = ИмяТаблицы + "." + ?(ИмяТипа = "Документ", "Дата", "Период");	
		
		Если ЗначениеЗаполнено(ДатаНачала) Тогда
			
			ИтоговоеОграничениеПоДате = "
			|	ГДЕ
			|		" + ИмяПоляОграничения + " >= &ДатаНачала";
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДатаОкончания) Тогда
			
			Если ПустаяСтрока(ИтоговоеОграничениеПоДате) Тогда
				
				ИтоговоеОграничениеПоДате = "
				|	ГДЕ
				|		" + ИмяПоляОграничения + " <= &ДатаОкончания";
				
			Иначе
				
				ИтоговоеОграничениеПоДате = ИтоговоеОграничениеПоДате + "
				|	И
				|		" + ИмяПоляОграничения + " <= &ДатаОкончания";
				
			КонецЕсли;
			
		КонецЕсли;
		
		Возврат ИтоговоеОграничениеПоДате;
		
	КонецФункции
	
	// Для внутреннего использования.
	//
	Функция ПолучитьТекстЗапросаДляРегистраСведений(ИмяМетаданных, ОбъектМетаданных, ЕстьДопОтборы, СтрокаПолейДляВыборки = "")
		
		ЕстьОграничениеПоДатам = ЗначениеЗаполнено(ДатаНачала) Или ЗначениеЗаполнено(ДатаОкончания);
		
		Если НЕ ЗначениеЗаполнено(СтрокаПолейДляВыборки) Тогда
			СтрокаПолейДляВыборки = "_.*";
		Иначе
			СтрокаПолейДляВыборки = " Различные " +  СтрокаПолейДляВыборки;	
		КонецЕсли;
		
		ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ " + СтрокаПолейДляВыборки + " ИЗ " + ИмяМетаданных + " КАК _ ";
		
		Если ОбъектМетаданных.ПериодичностьРегистраСведений = Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Непериодический Тогда
			Возврат ТекстЗапроса;
		КонецЕсли;
		
		// 0 - отбор за период.
		// 1 - срез последних на дату окончания.
		// 2 - срез первых на дату начала.
		// 3 - срез последних на дату начала + отбор за период.
		
		Если ТипВыгрузкиПериодическихРегистров = 0 Тогда
			
			Если ЕстьДопОтборы И 
				НЕ ИспользоватьОтборПоДатеДляВсехОбъектов Тогда
				
				Возврат ТекстЗапроса;
				
			КонецЕсли;
			
			ДопОграничениеПоДате = ПолучитьСтрокуОграниченияПоДатеДляЗапроса(ОбъектМетаданных, "РегистрСведений");
			
			ТекстЗапроса = ТекстЗапроса + Символы.ПС + ДопОграничениеПоДате;
			
		ИначеЕсли ТипВыгрузкиПериодическихРегистров = 1 Тогда
			
			ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ " + СтрокаПолейДляВыборки + " ИЗ " + ИмяМетаданных + ".СрезПоследних(&ДатаОкончания) КАК _ ";	
			
		ИначеЕсли ТипВыгрузкиПериодическихРегистров = 2 Тогда
			
			ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ " + СтрокаПолейДляВыборки + " ИЗ " + ИмяМетаданных + ".СрезПервых(&ДатаНачала) КАК _ ";
			
		ИначеЕсли ТипВыгрузкиПериодическихРегистров = 3 Тогда
			
			ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ " + СтрокаПолейДляВыборки + " ИЗ " + ИмяМетаданных + ".СрезПоследних(&ДатаНачала) КАК _ 
			|
			|Объединить все
			|
			|ВЫБРАТЬ " + СтрокаПолейДляВыборки + " ИЗ " + ИмяМетаданных + " КАК _ ";
			
			ДопОграничениеПоДате = ПолучитьСтрокуОграниченияПоДатеДляЗапроса(ОбъектМетаданных, "РегистрСведений");
			
			ТекстЗапроса = ТекстЗапроса + Символы.ПС + ДопОграничениеПоДате;
			
		КонецЕсли;
		
		Возврат ТекстЗапроса;
		
	КонецФункции
	
	Функция ПолучитьТекстЗапросаДляРегистра(ИмяМетаданных, ОбъектМетаданных, ЕстьДопОтборы, СтрокаПолейДляВыборки = "")
		
		ЕстьОграничениеПоДатам = ЗначениеЗаполнено(ДатаНачала) Или ЗначениеЗаполнено(ДатаОкончания);
		
		Если НЕ ЗначениеЗаполнено(СтрокаПолейДляВыборки) Тогда
			СтрокаПолейДляВыборки = "_.*";
		Иначе
			СтрокаПолейДляВыборки = " РАЗЛИЧНЫЕ " +  СтрокаПолейДляВыборки;
		КонецЕсли;
		
		ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ " + СтрокаПолейДляВыборки + " ИЗ " + ИмяМетаданных + " КАК _ ";
		
		// Возможно нужно ограничение по датам установить.
		Если ЕстьОграничениеПоДатам Тогда
			
			Если ЕстьДопОтборы И 
				НЕ ИспользоватьОтборПоДатеДляВсехОбъектов Тогда
				
				Возврат ТекстЗапроса;
				
			КонецЕсли;
			
			ДопОграничениеПоДате = ПолучитьСтрокуОграниченияПоДатеДляЗапроса(ОбъектМетаданных, "Регистр");
			
			ТекстЗапроса = ТекстЗапроса + Символы.ПС + ДопОграничениеПоДате;
			
		КонецЕсли;
		
		Возврат ТекстЗапроса;
		
	КонецФункции
	
	// Для внутреннего использования.
	//
	Функция ПолучитьТекстЗапросаПоСтроке(СтрокаДереваМетаданных, ЕстьДопОтборы, СтрокаПолейДляВыборки = "")
		
		ОбъектМетаданных  = СтрокаДереваМетаданных.Метаданные;
		ИмяМетаданных     = ОбъектМетаданных.ПолноеИмя();
		
		Если Метаданные.РегистрыСведений.Содержит(ОбъектМетаданных) Тогда
			
			ТекстЗапроса = ПолучитьТекстЗапросаДляРегистраСведений(ИмяМетаданных, ОбъектМетаданных, ЕстьДопОтборы, СтрокаПолейДляВыборки);
			Возврат ТекстЗапроса;
			
		ИначеЕсли   Метаданные.РегистрыНакопления.Содержит(ОбъектМетаданных)
			ИЛИ Метаданные.РегистрыБухгалтерии.Содержит(ОбъектМетаданных) Тогда
			
			ТекстЗапроса = ПолучитьТекстЗапросаДляРегистра(ИмяМетаданных, ОбъектМетаданных, ЕстьДопОтборы, СтрокаПолейДляВыборки);
			Возврат ТекстЗапроса;
			
		КонецЕсли;
		
		ЕстьОграничениеПоДатам = ЗначениеЗаполнено(ДатаНачала) Или ЗначениеЗаполнено(ДатаОкончания);
		
		Если НЕ ЗначениеЗаполнено(СтрокаПолейДляВыборки) Тогда
			СтрокаПолейДляВыборки = "_.*";
		КонецЕсли;
		
		ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ " + СтрокаПолейДляВыборки + " ИЗ " + ИмяМетаданных + " КАК _ ";
		
		// Возможно нужно ограничение по датам установить.
		Если ЕстьОграничениеПоДатам Тогда
			
			Если ЕстьДопОтборы И 
				НЕ ИспользоватьОтборПоДатеДляВсехОбъектов Тогда
				
				Возврат ТекстЗапроса;
				
			КонецЕсли;
			
			ДопОграничениеПоДате = "";
			
			// Можно ли для данного объекта МД строить ограничения по датам.
			Если Метаданные.Документы.Содержит(ОбъектМетаданных) Тогда
				
				ДопОграничениеПоДате = ПолучитьСтрокуОграниченияПоДатеДляЗапроса(ОбъектМетаданных, "Документ");
				
			ИначеЕсли Метаданные.РегистрыБухгалтерии.Содержит(ОбъектМетаданных)
				ИЛИ Метаданные.РегистрыНакопления.Содержит(ОбъектМетаданных) Тогда
				
				ДопОграничениеПоДате = ПолучитьСтрокуОграниченияПоДатеДляЗапроса(ОбъектМетаданных, "Регистр");
				
			КонецЕсли;
			
			ТекстЗапроса = ТекстЗапроса + Символы.ПС + ДопОграничениеПоДате;
			
		КонецЕсли;
		
		Возврат  ТекстЗапроса;
		
	КонецФункции
	
	// Для внутреннего использования.
	//
	Функция ПодготовитьПостроительДляВыгрузки(СтрокаДереваМетаданных, СтрокаПолейДляВыборки = "")
		
		ЕстьДопОтборы = (СтрокаДереваМетаданных.НастройкиПостроителя <> Неопределено); 
		
		ИтоговыйТекстЗапроса = ПолучитьТекстЗапросаПоСтроке(СтрокаДереваМетаданных, ЕстьДопОтборы, СтрокаПолейДляВыборки);
		
		ПостроительОтчета = Новый ПостроительОтчета;
		
		ПостроительОтчета.Текст = ИтоговыйТекстЗапроса;
		
		ПостроительОтчета.ЗаполнитьНастройки();
		
		ПостроительОтчета.Отбор.Сбросить();
		Если ЕстьДопОтборы Тогда
			
			ПостроительОтчета.УстановитьНастройки(СтрокаДереваМетаданных.НастройкиПостроителя);
			
		КонецЕсли;
		
		ПостроительОтчета.Параметры.Вставить("ДатаНачала", ДатаНачала);
		ПостроительОтчета.Параметры.Вставить("ДатаОкончания", ДатаОкончания);
		
		Возврат ПостроительОтчета;
		
	КонецФункции
	
	Функция ПолучитьРезультатЗапросаСОграничениями(СтрокаДереваМетаданных)
		
		ПостроительОтчета = ПодготовитьПостроительДляВыгрузки(СтрокаДереваМетаданных);
		
		ПостроительОтчета.Выполнить();
		РезультатЗапроса = ПостроительОтчета.Результат;
		
		Возврат РезультатЗапроса;
		
	КонецФункции
	
	Процедура ЗаписьДанныхОбъектногоТипа(СтрокаДереваМетаданных, ЗаписьXML, ОбъектыВыгруженныеСОшибками, ТолькоПроверкаНедопустимыхСимволов = Ложь)
		
		РезультатЗапроса = ПолучитьРезультатЗапросаСОграничениями(СтрокаДереваМетаданных);
		
		ЗапросИЗапись(РезультатЗапроса, ЗаписьXML, Истина, ОбъектыВыгруженныеСОшибками, ТолькоПроверкаНедопустимыхСимволов);
		
	КонецПроцедуры
	
	// Процедура исполняет переданный запрос и записывает полученные через запрос объекты.
	//
	// Параметры:
	//   Запрос - запрос для исполнения, результат содержит выборку объектов для записи.
	//   ЗаписьXML - объект, через которых происходит запись объектов ИБ.
	//   ЗапросВерхнегоУровня - признак необходимости анимации процесса.
	//
	Процедура ЗапросИЗапись(РезультатЗапроса, ЗаписьXML, ЗапросВерхнегоУровня = Ложь, 
		ОбъектыВыгруженныеСОшибками, ТолькоПроверкаНедопустимыхСимволов)
		
		// Универсальная процедура выгрузки ссылочных объектов процедура.
		ОбработкаРезультатаЗапроса(РезультатЗапроса, ЗаписьXML, Истина, ЗапросВерхнегоУровня, 
		ОбъектыВыгруженныеСОшибками, ТолькоПроверкаНедопустимыхСимволов);
		
	КонецПроцедуры
	
	Процедура ВыполнитьВспомогательныеДействияДляЗаписиXML(ВсегоОбработаноОбъектов, ЗаписьXML, ТолькоПроверкаНедопустимыхСимволов)
		
		Если Не ТолькоПроверкаНедопустимыхСимволов Тогда
			Возврат;
		КонецЕсли;
		
		Если ВсегоОбработаноОбъектов > 1000 Тогда
			
			СтрокаРезультата = ЗаписьXML.Закрыть();
			СтрокаРезультата = Неопределено;
			ЗаписьXML = Неопределено;
			
			ЗаписьXML = СоздатьОбъектЗаписиXMLДляПроверки();
			
		КонецЕсли;
		
	КонецПроцедуры
	
	Функция СсылкаВыгружена(Ссылка)
		
		Возврат мВыгруженныеОбъекты.Найти(Ссылка, "Ссылка") <> Неопределено;
		
	КонецФункции
	
	Процедура ДобавитьСсылкуКВыгруженным(Ссылка)
		
		СтрокаДобавления = мВыгруженныеОбъекты.Добавить();
		СтрокаДобавления.Ссылка = Ссылка;
		
	КонецПроцедуры
	
	// Процедура записывает содержащиеся в выборке результата запроса объекты и необходимые "по ссылке" объекты ИБ.
	//
	// Параметры:
	//   РезультатЗапроса - результат запроса.
	//   ЗаписьXML - объект, через которых происходит запись объектов ИБ.
	//   ЭтоЗапросПоОбъекту - если Истина, выборка должна содержать объекты, на которые может быть ссылка,
	//             если Ложь, выгружать, как объект не нужно, только обработать возможные ссылки на др. объекты ИБ.
	//
	Процедура ОбработкаРезультатаЗапроса(РезультатЗапроса, ЗаписьXML, ЭтоЗапросПоОбъекту = Ложь, 
		ЗапросВерхнегоУровня = Ложь, ОбъектыВыгруженныеСОшибками = Неопределено, ТолькоПроверкаНедопустимыхСимволов = Ложь)
		
		ВыборкаИзРезультатовЗапроса = РезультатЗапроса.Выбрать();
		
		ВсегоОбработаноОбъектов = 0;
		ОбработаноОбъектов = 0;
		
		Пока ВыборкаИзРезультатовЗапроса.Следующий() Цикл
			
			Если ЭтоЗапросПоОбъекту Тогда
				
				// Выгрузка ссылочных объектов.
				Ссылка = ВыборкаИзРезультатовЗапроса.Ссылка;
				Если СсылкаВыгружена(Ссылка) Тогда
					
					Продолжить;
					
				КонецЕсли;
				
				ДобавитьСсылкуКВыгруженным(Ссылка);
				
				ВсегоОбработаноОбъектов = ВсегоОбработанныхЗаписей();
				
			КонецЕсли;
			
			Если мНаличиеВыгрузкиПодчиненныхОбъектов Тогда
				
				// Перебираем колонки запроса в поисках ссылочных значений, которые, возможно, нужно выгрузить.
				Для Каждого КолонкаЗапроса Из РезультатЗапроса.Колонки Цикл
					
					ЗначениеКолонки = ВыборкаИзРезультатовЗапроса[КолонкаЗапроса.Имя];
					
					Если ТипЗнч(ЗначениеКолонки) = мТипРезультатЗапроса Тогда
						
						ОбработкаРезультатаЗапроса(ЗначениеКолонки, ЗаписьXML, , , ОбъектыВыгруженныеСОшибками, ТолькоПроверкаНедопустимыхСимволов);
						
					Иначе
						
						ЗаписатьЗначениеПриНеобходимости(ЗначениеКолонки, ЗаписьXML, ОбъектыВыгруженныеСОшибками, ТолькоПроверкаНедопустимыхСимволов);
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
			Если ЭтоЗапросПоОбъекту Тогда
				
				Объект = Ссылка.ПолучитьОбъект();
				
				Попытка
					
					ВыполнитьВспомогательныеДействияДляЗаписиXML(ВсегоОбработаноОбъектов, ЗаписьXML, ТолькоПроверкаНедопустимыхСимволов);
					
					// БФТ
					ПочиститьРеквизиты(Объект); // Удаляем значение реквизитов - исключения.
					Сериализатор.ЗаписатьXML(ЗаписьXML, Объект);
					
					МетаданныеОбъекта = Объект.Метаданные();
					
					Если ЭтоМетаданныеСПредопределеннымиЭлементами(МетаданныеОбъекта) И Объект.Предопределенный Тогда
						
						НоваяСтрока = ТаблицаПредопределенных.Добавить();
						НоваяСтрока.ИмяТаблицы = МетаданныеОбъекта.ПолноеИмя();
						НоваяСтрока.Ссылка = XMLСтрока(Ссылка);
						НоваяСтрока.ИмяПредопределенныхДанных = Объект.ИмяПредопределенныхДанных;
						
					КонецЕсли;
					
					Если ВыгружатьСДокументомЕгоДвижения И Метаданные.Документы.Содержит(МетаданныеОбъекта) Тогда
						
						// Выгрузка движений документа.
						Для Каждого Движение Из Объект.Движения Цикл
							
							Движение.Прочитать();
							
							Если мНаличиеВыгрузкиПодчиненныхОбъектов
								И Движение.Количество() > 0 Тогда
								
								ТипРегистра = Тип(Движение);
								
								МассивКолонок = мСоответствиеКолонокДвижений.Получить(ТипРегистра);
								
								Если МассивКолонок = Неопределено Тогда
									
									ТаблицаДвижений = Движение.Выгрузить();
									РегистрБухгалтерии = Метаданные.РегистрыБухгалтерии.Содержит(Движение.Метаданные());
									МассивКолонок = ПолучитьМассивКолонокДвижения(ТаблицаДвижений, РегистрБухгалтерии);
									мСоответствиеКолонокДвижений.Вставить(ТипРегистра, МассивКолонок);	
									
								КонецЕсли;
								
								ВыгрузитьПодчиненныеЗначенияНабора(ЗаписьXML, Движение, МассивКолонок, ОбъектыВыгруженныеСОшибками, ТолькоПроверкаНедопустимыхСимволов);
								
							КонецЕсли;
							
							Сериализатор.ЗаписатьXML(ЗаписьXML, Движение);
							
						КонецЦикла;
						
					КонецЕсли;
					
				Исключение
					
					СтрокаОписанияОшибки = ОписаниеОшибки();
					// Не смогли записать в XML.
					// Возможно проблема с недопустимыми символами в XML.
					Если ТолькоПроверкаНедопустимыхСимволов Тогда
						
						Если ОбъектыВыгруженныеСОшибками.Получить(Ссылка) = Неопределено Тогда
							ОбъектыВыгруженныеСОшибками.Вставить(Ссылка, СтрокаОписанияОшибки);
						КонецЕсли;					
						
					Иначе
						
						ИтоговаяСтрокаСообщения = НСтр("ru = 'При выгрузке объекта %1(%2) возникла ошибка:
						|%3'");
						ИтоговаяСтрокаСообщения = ПодставитьПараметрыВСтроку(ИтоговаяСтрокаСообщения, Объект, ТипЗнч(Объект), СтрокаОписанияОшибки);
						СообщитьПользователю(ИтоговаяСтрокаСообщения);
						
						ВызватьИсключение ИтоговаяСтрокаСообщения;
						
					КонецЕсли;
					
				КонецПопытки;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецПроцедуры
	
	Процедура ВыгрузитьПодчиненныеЗначенияНабора(ЗаписьXML, Движение, МассивКолонок, ОбъектыВыгруженныеСОшибками, ТолькоПроверкаНедопустимыхСимволов)
		
		Для Каждого ЗаписьИзНабора Из Движение Цикл
			
			Для Каждого Колонка Из МассивКолонок Цикл
				
				Если Колонка = "СубконтоДт"
					ИЛИ Колонка = "СубконтоКт" Тогда
					
					Значение = ЗаписьИзНабора[Колонка];
					Для Каждого КлючИЗначение Из Значение Цикл
						
						Если ЗначениеЗаполнено(КлючИЗначение.Значение) Тогда
							ЗаписатьЗначениеПриНеобходимости(КлючИЗначение.Значение, ЗаписьXML, ОбъектыВыгруженныеСОшибками, ТолькоПроверкаНедопустимыхСимволов);	
						КонецЕсли;
						
					КонецЦикла;
					
				Иначе
					
					СохраненноеЗначение = ЗаписьИзНабора[Колонка];
					ЗаписатьЗначениеПриНеобходимости(СохраненноеЗначение, ЗаписьXML, ОбъектыВыгруженныеСОшибками, ТолькоПроверкаНедопустимыхСимволов);
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецПроцедуры
	
	Функция ПолучитьМассивКолонокДвижения(ТаблицаДвижений, РегистрБухгалтерии = Ложь)
		
		МассивКолонок = Новый Массив();
		Для Каждого КолонкаТаблицы Из ТаблицаДвижений.Колонки Цикл
			
			Если КолонкаТаблицы.Имя = "МоментВремени"
				ИЛИ Найти(КолонкаТаблицы.Имя, "ВидСубконтоДт") = 1
				ИЛИ Найти(КолонкаТаблицы.Имя, "ВидСубконтоКт") = 1 Тогда
				
				Продолжить;
				
			КонецЕсли;
			
			Если Найти(КолонкаТаблицы.Имя, "СубконтоДт") = 1 И РегистрБухгалтерии Тогда
				
				Если МассивКолонок.Найти("СубконтоДт") = Неопределено Тогда
					МассивКолонок.Добавить("СубконтоДт");	
				КонецЕсли;
				
				Продолжить;
				
			КонецЕсли;
			
			Если Найти(КолонкаТаблицы.Имя, "СубконтоКт") = 1 И РегистрБухгалтерии Тогда
				
				Если МассивКолонок.Найти("СубконтоКт") = Неопределено Тогда
					МассивКолонок.Добавить("СубконтоКт");	
				КонецЕсли;
				
				Продолжить;
				
			КонецЕсли;
			
			МассивКолонок.Добавить(КолонкаТаблицы.Имя);
			
		КонецЦикла;
		
		Возврат МассивКолонок;
		
	КонецФункции
	
	// Процедура анализирует необходимость записи объекта "по ссылке" и осуществляет запись.
	//
	// Параметры:
	//   АнализируемоеЗначение - анализируемое значение.
	//   ЗаписьXML - объект, через которых происходит запись объектов ИБ.
	//
	Процедура ЗаписатьЗначениеПриНеобходимости(АнализируемоеЗначение, ЗаписьXML, 
		ОбъектыВыгруженныеСОшибками, ТолькоПроверкаНедопустимыхСимволов )
		
		Если Не ЗначениеЗаполнено(АнализируемоеЗначение) Тогда
			Возврат;
		КонецЕсли;
		
		ОбъектМД = СсылочныеТипы.Получить(ТипЗнч(АнализируемоеЗначение));
		
		Если ОбъектМД = Неопределено Тогда
			Возврат; // Это не ссылка.
		КонецЕсли;
		
		Если СсылкаВыгружена(АнализируемоеЗначение) Тогда
			Возврат; // Объект уже был выгружен.
		КонецЕсли;
		
		// Проверка того, что данный тип входит в список выгружаемых дополнительно.
		СтрокаТаблицы = СоставПолнойВыгрузки.Найти(ОбъектМД, "ОбъектМД");
		Если СтрокаТаблицы <> Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		СтрокаТаблицы = СоставВспомогательнойВыгрузки.Найти(ОбъектМД, "ОбъектМД");
		Если СтрокаТаблицы <> Неопределено Тогда
			
			ДопЗапрос = Новый Запрос("ВЫБРАТЬ * ИЗ " + СтрокаТаблицы.СтрокаДерева.ЭлементОписания.ДляЗапроса + ОбъектМД.Имя +
			" КАК ТаблицаОбъекта_" + " ГДЕ Ссылка = &Ссылка");				
			ДопЗапрос.УстановитьПараметр("Ссылка", АнализируемоеЗначение);
			РезультатЗапроса = ДопЗапрос.Выполнить();
			ЗапросИЗапись(РезультатЗапроса, ЗаписьXML, , ОбъектыВыгруженныеСОшибками, ТолькоПроверкаНедопустимыхСимволов);
			
		КонецЕсли;
		
	КонецПроцедуры
	
	// Процедура записывает значение константы.
	//
	// Параметры:
	//   ЗаписьXML - объект, через которых происходит запись объектов ИБ.
	//   МД_Константа - описание метаданного - выгружаемой константы.
	//
	Процедура ЗаписьКонстанты(ЗаписьXML, МД_Константа, ОбъектыВыгруженныеСОшибками, ТолькоПроверкаНедопустимыхСимволов)
		
		МенеджерЗначения = Константы[МД_Константа.Имя].СоздатьМенеджерЗначения();
		МенеджерЗначения.Прочитать();
		ЗаписатьЗначениеПриНеобходимости(МенеджерЗначения.Значение, ЗаписьXML, ОбъектыВыгруженныеСОшибками, ТолькоПроверкаНедопустимыхСимволов);
		// Собственно выгрузка.
		
		ВсегоОбработаноОбъектов = ВсегоОбработанныхЗаписей();
		Попытка
			
			ВыполнитьВспомогательныеДействияДляЗаписиXML(ВсегоОбработаноОбъектов, ЗаписьXML, ТолькоПроверкаНедопустимыхСимволов);
			
			Сериализатор.ЗаписатьXML(ЗаписьXML, МенеджерЗначения);
			
		Исключение
			
			СтрокаОписанияОшибки = ОписаниеОшибки();
			// Не смогли записать в XML.
			// Возможно проблема с недопустимыми символами в XML.
			Если ТолькоПроверкаНедопустимыхСимволов Тогда
				
				ОбъектыВыгруженныеСОшибками.Вставить(МенеджерЗначения, СтрокаОписанияОшибки);
				
			Иначе
				
				ИтоговаяСтрокаСообщения = НСтр("ru = 'При выгрузке константы %1 возникла ошибка:
				|%2'");
				ИтоговаяСтрокаСообщения = ПодставитьПараметрыВСтроку(ИтоговаяСтрокаСообщения, МД_Константа.Имя, СтрокаОписанияОшибки);
				
				СообщитьПользователю(ИтоговаяСтрокаСообщения);
				
				ВызватьИсключение ИтоговаяСтрокаСообщения;
				
			КонецЕсли;
			
		КонецПопытки;	
		
		ОбработанныхКонстант = ОбработанныхКонстант + 1;
		
	КонецПроцедуры
	
	// Процедура записывает наборы записей регистра (накопления, бухгалтерии...).
	//
	// Параметры:
	//   ЗаписьXML - объект, через которых происходит запись объектов ИБ.
	//   СтрокаДереваМетаданных - строка дерева метаданных, соответствующая регистру.
	//
	Процедура ЗаписьРегистра(ЗаписьXML, СтрокаДереваМетаданных, ОбъектыВыгруженныеСОшибками, ТолькоПроверкаНедопустимыхСимволов, РегистрБухгалтерии = Ложь)
		
		МенеджерНабораЗаписей = СтрокаДереваМетаданных.ЭлементОписания.Менеджер[СтрокаДереваМетаданных.ОбъектМД.Имя];
		
		ИмяТаблицыДляЗапроса = СтрокаДереваМетаданных.ЭлементОписания.ДляЗапроса;
		
		ЗаписьЧерезНаборЗаписей(ЗаписьXML, МенеджерНабораЗаписей, ИмяТаблицыДляЗапроса, 
		СтрокаДереваМетаданных.ОбъектМД.Имя, СтрокаДереваМетаданных, ОбъектыВыгруженныеСОшибками, ТолькоПроверкаНедопустимыхСимволов, РегистрБухгалтерии);
		
	КонецПроцедуры
	
	// Процедура записывает наборы записей регистра (накопления, бухгалтерии...).
	//
	// Параметры:
	//   ЗаписьXML - объект, через которых происходит запись объектов ИБ.
	//   СтрокаДереваМетаданных - строка дерева метаданных, соответствующая регистру.
	//
	Процедура ЗаписьПерерасчета(ЗаписьXML, СтрокаДереваМетаданных, ОбъектыВыгруженныеСОшибками, ТолькоПроверкаНедопустимыхСимволов)
		
		ИмяРегистраРасчета = СтрокаДереваМетаданных.Родитель.Родитель.ОбъектМД.Имя;
		МенеджерСтрокой = СтрЗаменить(СтрокаДереваМетаданных.ЭлементОписания.Менеджер, "%i", ИмяРегистраРасчета);
		МенеджерПерерасчета = Вычислить(МенеджерСтрокой);
		МенеджерПерерасчета = МенеджерПерерасчета[СтрокаДереваМетаданных.ОбъектМД.Имя];
		СтрокаДляЗапроса = СтрЗаменить(СтрокаДереваМетаданных.ЭлементОписания.ДляЗапроса, "%i", ИмяРегистраРасчета);
		
		ЗаписьЧерезНаборЗаписей(ЗаписьXML, МенеджерПерерасчета, СтрокаДляЗапроса, СтрокаДереваМетаданных.ОбъектМД.Имя, 
		СтрокаДереваМетаданных, ОбъектыВыгруженныеСОшибками, ТолькоПроверкаНедопустимыхСимволов);
		
	КонецПроцедуры
	
	// Процедура записывает последовательности документов.
	//
	// Параметры:
	//   ЗаписьXML - объект, через которых происходит запись объектов ИБ.
	//   СтрокаДереваМетаданных - строка дерева метаданных, соответствующая регистру.
	//
	Процедура ЗаписьПоследовательности(ЗаписьXML, СтрокаДереваМетаданных, ОбъектыВыгруженныеСОшибками, ТолькоПроверкаНедопустимыхСимволов)
		
		МенеджерНабораЗаписей = СтрокаДереваМетаданных.ЭлементОписания.Менеджер[СтрокаДереваМетаданных.ОбъектМД.Имя];
		ЗаписьЧерезНаборЗаписей(ЗаписьXML, МенеджерНабораЗаписей, СтрокаДереваМетаданных.ЭлементОписания.ДляЗапроса, 
		СтрокаДереваМетаданных.ОбъектМД.Имя, СтрокаДереваМетаданных, ОбъектыВыгруженныеСОшибками, ТолькоПроверкаНедопустимыхСимволов);		
		
	КонецПроцедуры
	
	// Процедура записывает данные, доступ к которым осуществляется через набор записей.
	//
	// Параметры:
	//   ЗаписьXML - объект, через которых происходит запись объектов ИБ.
	//   СтрокаДереваМетаданных - строка дерева метаданных, соответствующая регистру.
	//
	Процедура ЗаписьЧерезНаборЗаписей(ЗаписьXML, МенеджерНабораЗаписей, ДляЗапроса, ИмяОбъекта, 
		СтрокаДереваМетаданных = Неопределено, ОбъектыВыгруженныеСОшибками, ТолькоПроверкаНедопустимыхСимволов, РегистрБухгалтерии = Ложь)
		
		// Получить состав колонок записи регистра и проверить наличие хотя бы одной записи.
		Если ДляЗапроса = "РегистрБухгалтерии." Тогда
			ИмяТаблицыДляЗапроса = ДляЗапроса + ИмяОбъекта + ".ДвиженияССубконто";	
		Иначе
			ИмяТаблицыДляЗапроса = ДляЗапроса + ИмяОбъекта;	
		КонецЕсли;
		
		Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1 * ИЗ " + ИмяТаблицыДляЗапроса + " КАК ТаблицаОбъекта_" + ИмяОбъекта);
		РезультатЗапросаПоСоставу = Запрос.Выполнить();
		Если РезультатЗапросаПоСоставу.Пустой() Тогда
			Возврат;
		КонецЕсли;
		
		ТаблицаДвижений = РезультатЗапросаПоСоставу.Выгрузить();
		МассивКолонок = ПолучитьМассивКолонокДвижения(ТаблицаДвижений, РегистрБухгалтерии);
		
		// Выгрузка регистров осуществляется через его набор записей.
		НаборЗаписей = МенеджерНабораЗаписей.СоздатьНаборЗаписей();
		
		Отбор = НаборЗаписей.Отбор;
		СтрокаПолейОтбора = "";
		Для Каждого ЭлементОтбора Из Отбор Цикл 
			Если Не ПустаяСтрока(СтрокаПолейОтбора) Тогда 
				СтрокаПолейОтбора = СтрокаПолейОтбора + ",";
			КонецЕсли;
			СтрокаПолейОтбора = СтрокаПолейОтбора + ЭлементОтбора.Имя;
		КонецЦикла;
		
		ПостроительОтчета = ПодготовитьПостроительДляВыгрузки(СтрокаДереваМетаданных, СтрокаПолейОтбора); 
		ПостроительОтчета.Выполнить();
		РезультатЗапросаПоЗначениямОтбора = ПостроительОтчета.Результат;	
		ВыборкаИзРезультата = РезультатЗапросаПоЗначениямОтбора.Выбрать();
		
		///// + БФТ - ЦПК
		МенеджерОбъекта = ОбщегоНазначенияСервер.МенеджерОбъектаПоПолномуИмени(ИмяТаблицыДляЗапроса);
		// В попытке т.к. нет правильного способа проверить есть ли метод в форме менеджера или нет.
		Попытка
			ОтборДляВыгрузкиДанных = МенеджерОбъекта.ОтборДляВыгрузкиДанных();
		Исключение
			ОтборДляВыгрузкиДанных = Новый Массив();
		КонецПопытки;
		///// - БФТ - ЦПК
		
		КоличествоПолейОтбора = НаборЗаписей.Отбор.Количество();
		
		// Читаем наборы записей с различным составом отбора и записываем их.
		Пока ВыборкаИзРезультата.Следующий() Цикл
			
			// Отбор устанавливаем для регистров, у которых есть хотя бы один отбор (измерение).
			Если КоличествоПолейОтбора <> 0 Тогда
				
				Для Каждого Колонка Из РезультатЗапросаПоЗначениямОтбора.Колонки Цикл 
					///// + БФТ - ЦПК
					Если ОтборДляВыгрузкиДанных <> Неопределено И ОтборДляВыгрузкиДанных.Количество() > 0 
						И ОтборДляВыгрузкиДанных.Найти(Колонка.Имя) = Неопределено Тогда
						Продолжить;
					КонецЕсли;
					///// - БФТ - ЦПК
					
					Отбор[Колонка.Имя].Значение = ВыборкаИзРезультата[Колонка.Имя];
					Отбор[Колонка.Имя].ВидСравнения = ВидСравнения.Равно;
					Отбор[Колонка.Имя].Использование = Истина;
				КонецЦикла;
				
			КонецЕсли;
			
			НаборЗаписей.Прочитать();
			
			Если мНаличиеВыгрузкиПодчиненныхОбъектов Тогда
				
				// Проверяем все записанные в наборе значения на необходимость записи "по ссылке".
				ВыгрузитьПодчиненныеЗначенияНабора(ЗаписьXML, НаборЗаписей, МассивКолонок, ОбъектыВыгруженныеСОшибками, ТолькоПроверкаНедопустимыхСимволов);
				
			КонецЕсли;
			
			ВсегоОбработаноОбъектов = ВсегоОбработанныхЗаписей();
			Попытка
				
				ВыполнитьВспомогательныеДействияДляЗаписиXML(ВсегоОбработаноОбъектов, ЗаписьXML, ТолькоПроверкаНедопустимыхСимволов);
				
				Сериализатор.ЗаписатьXML(ЗаписьXML, НаборЗаписей);
				
			Исключение
				
				СтрокаОписанияОшибки = ОписаниеОшибки();
				// Не смогли записать в XML.
				// Возможно проблема с недопустимыми символами в XML.
				Если ТолькоПроверкаНедопустимыхСимволов Тогда
					
					НовыйНабор = МенеджерНабораЗаписей.СоздатьНаборЗаписей();
					
					Для Каждого СтрокаОтбора Из НаборЗаписей.Отбор Цикл
						
						СтрокаОтбораФормы = НовыйНабор.Отбор.Найти(СтрокаОтбора.Имя);
						
						Если СтрокаОтбораФормы = Неопределено Тогда
							Продолжить;
						КонецЕсли;
						
						СтрокаОтбораФормы.Использование = СтрокаОтбора.Использование;
						СтрокаОтбораФормы.ВидСравнения = СтрокаОтбора.ВидСравнения;
						СтрокаОтбораФормы.Значение = СтрокаОтбора.Значение;
						
					КонецЦикла;
					
					ОбъектыВыгруженныеСОшибками.Вставить(НовыйНабор, СтрокаОписанияОшибки);
					
				Иначе
					
					ИтоговаяСтрокаСообщения = НСтр("ru = 'При выгрузке регистра %1%2 возникла ошибка:
					|%3'");
					ИтоговаяСтрокаСообщения = ПодставитьПараметрыВСтроку(ИтоговаяСтрокаСообщения, ДляЗапроса, ИмяОбъекта, СтрокаОписанияОшибки);
					
					СообщитьПользователю(ИтоговаяСтрокаСообщения);
					
					ВызватьИсключение ИтоговаяСтрокаСообщения;
					
				КонецЕсли;
				
			КонецПопытки;
			
			ОбработанныхНаборовЗаписей = ОбработанныхНаборовЗаписей + 1;
			
		КонецЦикла;
		
	КонецПроцедуры
	
	// Процедура рекурсивно обрабатывает строку дерева метаданных, образуя списки полной и вспомогательной выгрузки.
	//
	// Параметры:
	//   СоставПолнойВыгрузки - список полной выгрузки.
	//   СоставВспомогательнойВыгрузки - список вспомогательной выгрузки.
	//   СтрокаДЗ - обрабатываемая строка дерева метаданных.
	//
	Процедура ДобавитьВыгружаемыеОбъекты(СоставПолнойВыгрузки, СоставВспомогательнойВыгрузки, СтрокаДЗ)
		
		Если (СтрокаДЗ.ЭлементОписания <> Неопределено) 
			И СтрокаДЗ.ЭлементОписания.Выгружаемый Тогда
			
			СтрокаДобавления = Неопределено;
			
			Если СтрокаДЗ.Выгружать Тогда
				
				СтрокаДобавления = СоставПолнойВыгрузки.Добавить();
				
			ИначеЕсли СтрокаДЗ.ВыгружатьПриНеобходимости Тогда
				
				СтрокаДобавления = СоставВспомогательнойВыгрузки.Добавить();
				
			КонецЕсли;
			
			Если СтрокаДобавления <> Неопределено Тогда
				
				СтрокаДобавления.ОбъектМД = СтрокаДЗ.ОбъектМД;	
				СтрокаДобавления.СтрокаДерева = СтрокаДЗ;			
				
			КонецЕсли;
			
		КонецЕсли;
		
		Для Каждого ПодчиненнаяСтрокаДЗ Из СтрокаДЗ.Строки Цикл
			ДобавитьВыгружаемыеОбъекты(СоставПолнойВыгрузки, СоставВспомогательнойВыгрузки, ПодчиненнаяСтрокаДЗ);
		КонецЦикла;
		
	КонецПроцедуры
	
	// Процедура заполняет строку дерева метаданных, попутно заполняя соответствие ссылочных типов объектам метаданных.
	//
	// Параметры:
	//   ОбъектМД - описание объекта метаданных.
	//   ЭлементДЗ - заполняемая строка дерева метаданных.
	//   ЭлементОписания - описание класса, к которому принадлежит объект метаданных (свойства, подчиненные классы).
	//
	Процедура ПостроениеПоддереваОбъекта(ОбъектМД, ЭлементДЗ, ЭлементОписания)
		
		ЭлементДЗ.Метаданные = ОбъектМД;
		ЭлементДЗ.ОбъектМД   = ОбъектМД;
		ЭлементДЗ.ПолноеИмяМетаданных = ОбъектМД.Имя;
		ЭлементДЗ.ЭлементОписания = ЭлементОписания;
		ЭлементДЗ.Выгружать = Ложь;
		ЭлементДЗ.ВыгружатьПриНеобходимости = Истина;
		ЭлементДЗ.ИндексКартинки = ЭлементОписания.ИндексКартинки;
		
		Если ЭлементОписания.Менеджер <> Неопределено Тогда
			
			// Заполнение соответствия ссылочных типов объектам метаданных.
			Если ОбъектОбразуетСсылочныйТип(ОбъектМД) Тогда
				СсылочныеТипы[ТипЗнч(ЭлементОписания.Менеджер[ОбъектМД.Имя].ПустаяСсылка())] = ОбъектМД;
			КонецЕсли;
			
			Если Метаданные.РегистрыНакопления.Содержит(ОбъектМД) 
				Или	Метаданные.РегистрыБухгалтерии.Содержит(ОбъектМД) Тогда
				
				ИспользующиеИтоги.Добавить(ЭлементДЗ);
				
			КонецЕсли;
			
		КонецЕсли;		
		
		// Подчиненные ветви.
		Для Каждого ПодчиненныйКласс Из ЭлементОписания.Строки Цикл
			
			Если Не ПодчиненныйКласс.Выгружаемый Тогда
				Продолжить;
			КонецЕсли;
			
			ВеткаКласса = ЭлементДЗ.Строки.Добавить();
			ВеткаКласса.Метаданные = ПодчиненныйКласс.Класс;
			ВеткаКласса.Выгружать = Ложь;
			ВеткаКласса.ВыгружатьПриНеобходимости = Истина;
			ВеткаКласса.ПолноеИмяМетаданных = ПодчиненныйКласс.Класс;
			ВеткаКласса.ИндексКартинки = ПодчиненныйКласс.ИндексКартинки;
			
			ПодчиненныеОбъектыДанногоКласса = ОбъектМД[ПодчиненныйКласс.Класс];
			
			Для Каждого ПодчиненныйОбъектМД Из ПодчиненныеОбъектыДанногоКласса Цикл 
				ПодчиненныйЭлементДЗ = ВеткаКласса.Строки.Добавить();
				ПостроениеПоддереваОбъекта(ПодчиненныйОбъектМД, ПодчиненныйЭлементДЗ, ПодчиненныйКласс);
			КонецЦикла;
			
		КонецЦикла;
		
	КонецПроцедуры
	
	// Процедура удаляет из дерева метаданных строки, соответствующие метаданным, заведомо не попадающим в выгрузку.
	//
	// Параметры:
	//   ЭлементДЗ - строка дерева метаданных, подчиненные которой рассматриваются
	//        с точки зрения удаления из списка потенциально выгружаемых.
	//
	Процедура СверткаПоддереваОбъекта(ЭлементДЗ)
		
		УдаляемыеВеткиКлассов = Новый Массив;
		Для Каждого ВеткаКласса Из ЭлементДЗ.Строки Цикл
			
			УдаляемыеПодчиненныеМД = Новый Массив;
			
			Для Каждого ПодчиненныйОбъектМД Из ВеткаКласса.Строки Цикл
				СверткаПоддереваОбъекта(ПодчиненныйОбъектМД);
				Если (ПодчиненныйОбъектМД.Строки.Количество()) = 0 
					и (Не ПодчиненныйОбъектМД.ЭлементОписания.Выгружаемый) Тогда 
					
					УдаляемыеПодчиненныеМД.Добавить(ВеткаКласса.Строки.Индекс(ПодчиненныйОбъектМД));
					
				КонецЕсли;
				
			КонецЦикла;
			
			Для Сч = 1 По УдаляемыеПодчиненныеМД.Количество() Цикл
				ВеткаКласса.Строки.Удалить(УдаляемыеПодчиненныеМД[УдаляемыеПодчиненныеМД.Количество() - Сч]);
			КонецЦикла;
			
			Если ВеткаКласса.Строки.Количество() = 0 Тогда
				УдаляемыеВеткиКлассов.Добавить(ЭлементДЗ.Строки.Индекс(ВеткаКласса));
			КонецЕсли;
			
		КонецЦикла;
		
		Для Сч = 1 По УдаляемыеВеткиКлассов.Количество() Цикл
			ЭлементДЗ.Строки.Удалить(УдаляемыеВеткиКлассов[УдаляемыеВеткиКлассов.Количество() - Сч]);
		КонецЦикла;
		
	КонецПроцедуры
	
	// Процедура проставляет признак Выгрузка строкам дерева метаданных, подчиненных данной, вычисляет и 
	//      выставляет признак выгрузки "по ссылке" другим объектам, ссылки на которые может или должен
	//      содержать объект, соответствующий данной строке.
	//
	// Параметры:
	//   ЭлементДЗ - строка дерева метаданных.
	//
	Процедура УстановитьВыгружатьПодчиненным(ЭлементДЗ)
		Для Каждого ПодчиненнаяСтрока Из ЭлементДЗ.Строки Цикл
			ПодчиненнаяСтрока.Выгружать = ЭлементДЗ.Выгружать;
			УстановитьВыгружатьПодчиненным(ПодчиненнаяСтрока);
		КонецЦикла;
	КонецПроцедуры
	
	// Процедура проставляет признак Выгрузка строке дерева метаданных на основании этого признака подчиненных строк,
	// затем вызывает себя же для родителя, обеспечивая отработку до корня дерева.
	//
	// Параметры:
	//   ЭлементДЗ - строка дерева метаданных.
	//
	Процедура ОбновитьСостояниеВыгружать(ЭлементДЗ)
		Если ЭлементДЗ = Неопределено Тогда
			Возврат;
		КонецЕсли;
		Если (ЭлементДЗ.ЭлементОписания <> Неопределено) И ЭлементДЗ.ЭлементОписания.Выгружаемый Тогда
			Возврат; // Обновляем вверх или до корня, или до первого встретившегося выгружаемого.
		КонецЕсли;
		Состояние = Неопределено;
		Для Каждого ПодчиненныйЭлементДЗ Из ЭлементДЗ.Строки Цикл
			Если Состояние = Неопределено Тогда
				Состояние = ПодчиненныйЭлементДЗ.Выгружать;
			Иначе
				Если Не Состояние = ПодчиненныйЭлементДЗ.Выгружать Тогда
					Состояние = 2;
					Прервать;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Если Состояние <> Неопределено Тогда
			ЭлементДЗ.Выгружать = Состояние;
			ОбновитьСостояниеВыгружать(ЭлементДЗ.Родитель);
		КонецЕсли;
	КонецПроцедуры
	
	// Процедура проставляет признак Выгрузка строкам дерева метаданных, подчиненных данной, вычисляет и 
	//      выставляет признак выгрузки "по ссылке" другим объектам, ссылки на которые может или должен
	//      содержать объект, соответствующий данной строке.
	//
	// Параметры:
	//   ЭлементДЗ - строка дерева метаданных.
	//
	Процедура УстановитьВыгружатьПриНеобходимостиПодчиненным(ЭлементДЗ)
		
		Для Каждого ПодчиненнаяСтрока Из ЭлементДЗ.Строки Цикл
			ПодчиненнаяСтрока.ВыгружатьПриНеобходимости = ЭлементДЗ.ВыгружатьПриНеобходимости;
			УстановитьВыгружатьПриНеобходимостиПодчиненным(ПодчиненнаяСтрока);
		КонецЦикла;
		
	КонецПроцедуры
	
	// Процедура проставляет признак Выгрузка строке дерева метаданных на основании этого признака подчиненных строк,
	// затем вызывает себя же для родителя, обеспечивая отработку до корня дерева.
	//
	// Параметры:
	//   ЭлементДЗ - строка дерева метаданных.
	//
	Процедура ОбновитьСостояниеВыгружатьПриНеобходимости(ЭлементДЗ)
		
		Если ЭлементДЗ = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Если (ЭлементДЗ.ЭлементОписания <> Неопределено) И ЭлементДЗ.ЭлементОписания.Выгружаемый Тогда
			Возврат; // Обновляем вверх или до корня, или до первого встретившегося выгружаемого.
		КонецЕсли;
		
		Состояние = Неопределено;
		Для Каждого ПодчиненныйЭлементДЗ Из ЭлементДЗ.Строки Цикл
			
			Если Состояние = Неопределено Тогда
				Состояние = ПодчиненныйЭлементДЗ.ВыгружатьПриНеобходимости;
			Иначе
				Если Не Состояние = ПодчиненныйЭлементДЗ.ВыгружатьПриНеобходимости Тогда
					Состояние = 2;
					Прервать;
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
		Если Состояние <> Неопределено Тогда
			ЭлементДЗ.ВыгружатьПриНеобходимости = Состояние;
			ОбновитьСостояниеВыгружатьПриНеобходимости(ЭлементДЗ.Родитель);
		КонецЕсли;
		
	КонецПроцедуры
	
	// Функция определяет, являются ли объекты данного класса метаданных типизированными.
	//
	// Параметры:
	//   Описание - Описание класса.
	// Возврат - Истина, если объекты данного класса метаданных типизированы, Ложь в противном случае.
	//
	Функция КлассМДТипизированный(Описание)
		
		Для Каждого Свойство Из Описание.Свойства Цикл
			Если Свойство.Значение = "Тип" Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЦикла;
		Возврат Ложь;
		
	КонецФункции
	
	// Функция определяет, являются ли тип ссылочным.
	//
	// Параметры:
	//   Тип - исследуемый тип.
	// Возврат - Истина, если тип ссылочный, Ложь в противном случае.
	//
	Функция СсылочныйТип(Тип)
		
		МетаданныеТипа = СсылочныеТипы.Получить(Тип);
		Возврат МетаданныеТипа <> Неопределено;	
		
	КонецФункции
	
	// Процедура добавляет в массив новый элемент, если он является уникальным.
	//
	// Параметры:
	//   Массив - исследуемый тип.
	//   Элемент - добавляемый элемент.
	//
	Процедура ДобавитьВМассивЕслиУникальный(Массив, Элемент)
		
		Если Массив.Найти(Элемент) = Неопределено Тогда
			Массив.Добавить(Элемент);
		КонецЕсли;
		
	КонецПроцедуры
	
	// Функция возвращает массив типов, которые могут иметь поля записи объекта метаданных, соответствующего строке дерева.
	//
	// Параметры:
	//   ЭлементДЗ - строка дерева метаданных.
	// Возврат - массив потенциально используемых соответствующей записью типов.
	//
	Функция ПолучитьВсеТипы(ЭлементДЗ)
		
		ОбъектМД = ЭлементДЗ.ОбъектМД;
		Если ТипЗнч(ОбъектМД) <> Тип("ОбъектМетаданных") 
			И ТипЗнч(ОбъектМД) <> Тип("ОбъектМетаданныхКонфигурация") Тогда
			
			ВызватьИсключение(НСтр("ru = 'Внутренняя ошибка обработки выгрузки'"));
			
		КонецЕсли;
		
		Возврат ПолучитьТипыИспользуемыеОМД(ОбъектМД, ЭлементДЗ.ЭлементОписания);
		
	КонецФункции
	
	// Функция возвращает массив типов, которые могут иметь поля записи объекта метаданных.
	//
	// Параметры:
	//   ОбъектМД - описание метаданного.
	//   ЭлементОписания - описание класса объекта метаданного.
	// Возврат - массив потенциально используемых соответствующей записью типов.
	//
	Функция ПолучитьТипыИспользуемыеОМД(ОбъектМД, ЭлементОписания)
		
		ВсеТипы = Новый Массив;
		
		Для Каждого Свойство Из ЭлементОписания.Свойства Цикл
			
			ЗначениеСвойства = ОбъектМД[Свойство.Значение];
			Если ТипЗнч(ЗначениеСвойства) = Тип("КоллекцияЗначенийСвойстваОбъектаМетаданных") И ЗначениеСвойства.Количество() > 0 Тогда
				
				Для Каждого СтрокаКоллекции Из ЗначениеСвойства Цикл
					
					СсылочныйТипКлючИЗначение = СоответствиеОбъектовМетаданныхИСсылочныхТипов[СтрокаКоллекции];
					
					Если СсылочныйТипКлючИЗначение <> Неопределено Тогда
						
						ДобавитьВМассивЕслиУникальный(ВсеТипы, СсылочныйТипКлючИЗначение);	
						
					КонецЕсли;
					
				КонецЦикла;			
				
			ИначеЕсли ТипЗнч(ЗначениеСвойства) = Тип("ОбъектМетаданных") Тогда
				
				Для Каждого СсылочныйТипКлючИЗначение Из СсылочныеТипы Цикл
					
					Если ЗначениеСвойства = СсылочныйТипКлючИЗначение.Значение Тогда
						ДобавитьВМассивЕслиУникальный(ВсеТипы, СсылочныйТипКлючИЗначение.Ключ);
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если КлассМДТипизированный(ЭлементОписания) Тогда
			
			ОписаниеТипа = ОбъектМД.Тип;
			Для Каждого ОдинТип Из ОписаниеТипа.Типы() Цикл
				
				Если СсылочныйТип(ОдинТип) Тогда
					ДобавитьВМассивЕслиУникальный(ВсеТипы, ОдинТип);
				КонецЕсли;
				
			КонецЦикла;
			
		Иначе
			
			Если Метаданные.РегистрыСведений.Содержит(ОбъектМД) Или 
				Метаданные.РегистрыНакопления.Содержит(ОбъектМД) Или
				Метаданные.РегистрыБухгалтерии.Содержит(ОбъектМД) Или
				Метаданные.РегистрыРасчета.Содержит(ОбъектМД) Тогда
				
				// Какой-то из регистров, ищем в возможных регистраторах.
				Для Каждого ДокументМД Из Метаданные.Документы Цикл
					
					Если ДокументМД.Движения.Содержит(ОбъектМД) Тогда
						
						ДобавитьВМассивЕслиУникальный(ВсеТипы, ТипЗнч(Документы[ДокументМД.Имя].ПустаяСсылка()));
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Для Каждого ПодчиненныйКласс Из ЭлементОписания.Строки Цикл
			
			Для Каждого ПодчиненныйОбъектМД Из ОбъектМД[ПодчиненныйКласс.Класс] Цикл
				
				ТипыПодчиненного = ПолучитьТипыИспользуемыеОМД(ПодчиненныйОбъектМД, ПодчиненныйКласс);
				Для Каждого ОдинТип Из ТипыПодчиненного Цикл
					ДобавитьВМассивЕслиУникальный(ВсеТипы, ОдинТип);
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЦикла;
		
		Возврат ВсеТипы;
		
	КонецФункции
	
	// Функция возвращает строку дерева метаданных, соответствующую переданному объекту метаданных.
	// Поиск осуществляется среди строк, подчиненных переданной.
	//
	// Параметры:
	//   СтрокаДЗ - строка дерева метаданных, от которой осуществляется поиск.
	//   ОбъектМД - описание метаданного.
	// Возврат - строка дерева метаданных.
	//
	Функция ЭлементДЗПоОбъектуМДИСтроке(СтрокаДЗ, ОбъектМД)
		
		Возврат СтрокаДЗ.Строки.Найти(ОбъектМД, "ОбъектМД", Истина);	
		
	КонецФункции
	
	// Функция возвращает строку дерева метаданных, соответствующую переданному объекту метаданных.
	// Поиск осуществляется по всему дереву метаданных.
	//
	// Параметры:
	//   ОбъектМД - описание метаданного.
	// Возврат - строка дерева метаданных.
	//
	Функция ЭлементДЗПоОбъектуМД(ОбъектМД)
		Для Каждого СтрокаДЗ Из ДеревоМетаданных.Строки Цикл
			ЭлементДЗ = ЭлементДЗПоОбъектуМДИСтроке(СтрокаДЗ, ОбъектМД);
			Если ЭлементДЗ <> Неопределено Тогда 
				Возврат ЭлементДЗ;
			КонецЕсли;
		КонецЦикла;
		Возврат Неопределено;
	КонецФункции
	
	// Процедура определяет, на какие объект может ссылаться запись, соответствующая объекту метаданных, отображаемому
	// данной строкой дерева метаданных и проставляет им признак ВыгружатьПриНеобходимости.
	//
	// Параметры:
	//   ЭлементДЗ - строка дерева метаданных.
	//
	Процедура УстановкаСостоянияВыгружатьПриНеобходимости(ЭлементДЗ)
		
		ОбновитьСостояниеВыгружатьПриНеобходимости(ЭлементДЗ.Родитель);
		Если ЭлементДЗ.Выгружать <> 1 И ЭлементДЗ.ВыгружатьПриНеобходимости <> 1 Тогда
			Возврат;
		КонецЕсли;
		Если ЭлементДЗ.ОбъектМД = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ВсеТипы = ПолучитьВсеТипы(ЭлементДЗ);
		Для Каждого СсылочныйТип Из ВсеТипы Цикл
			
			ТипИОбъект = СсылочныеТипы.Получить(СсылочныйТип);
			Если ТипИОбъект = Неопределено Тогда
				
				ТекстИсключения = НСтр("ru = 'Внутренняя ошибка. Неполное заполнение структуры ссылочных типов %1'");
				ТекстИсключения = ПодставитьПараметрыВСтроку(ТекстИсключения, СсылочныйТип);
				ВызватьИсключение(ТекстИсключения);
				
			КонецЕсли;
			
			ОбъектМД = ТипИОбъект;
			СтрокаДЗ = ЭлементДЗПоОбъектуМД(ОбъектМД);
			Если СтрокаДЗ = Неопределено Тогда 
				
				ТекстИсключения = НСтр("ru = 'Внутренняя ошибка. Неполное заполнение дерева метаданных. Отсутствует объект, образующий тип %1'");
				ТекстИсключения = ПодставитьПараметрыВСтроку(ТекстИсключения, СсылочныйТип);
				ВызватьИсключение(ТекстИсключения);
				
			КонецЕсли;
			
			Если СтрокаДЗ.Выгружать = 1 
				Или СтрокаДЗ.ВыгружатьПриНеобходимости = 1 Тогда
				
				Продолжить;
				
			КонецЕсли;
			
			СтрокаДЗ.ВыгружатьПриНеобходимости = 1;
			УстановкаСостоянияВыгружатьПриНеобходимости(СтрокаДЗ);
			
		КонецЦикла;
		
	КонецПроцедуры
	
	// Функция определяет общее количество произведенных записей констант + объектного типа + наборов записей.
	//
	// Возврат - общее количество произведенных записей.
	Функция ВсегоОбработанныхЗаписей()
		
		Возврат мВыгруженныеОбъекты.Количество() + ОбработанныхКонстант + ОбработанныхНаборовЗаписей;
		
	КонецФункции
	
	// Процедура производит заполнение дерева описания классов объектов метаданных.
	//
	Процедура ЗаполнитьОписаниеМетаданных()
		
		СтэкДереваЗначенийСтроки = Новый Массив;
		МетаданныеОписание = Новый ДеревоЗначений;
		МетаданныеОписание.Колонки.Добавить("Выгружаемый", Новый ОписаниеТипов("Булево"));
		МетаданныеОписание.Колонки.Добавить("ДляЗапроса", Новый ОписаниеТипов("Строка"));
		МетаданныеОписание.Колонки.Добавить("Класс", Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(100, ДопустимаяДлина.Переменная)));
		МетаданныеОписание.Колонки.Добавить("Менеджер");
		МетаданныеОписание.Колонки.Добавить("Свойства", Новый ОписаниеТипов("СписокЗначений"));
		МетаданныеОписание.Колонки.Добавить("ИндексКартинки");
		СтэкДереваЗначенийСтроки.Вставить(0, МетаданныеОписание.Строки);
		//////////////////////////////////
		// Конфигурации
		ОписаниеКласса = СтэкДереваЗначенийСтроки[0].Добавить();
		ОписаниеКласса.Класс = "Конфигурации";
		ОписаниеКласса.Выгружаемый = ложь;
		ОписаниеКласса.ДляЗапроса  = "";
		ОписаниеКласса.ИндексКартинки = 0;
		СтэкДереваЗначенийСтроки.Вставить(0, ОписаниеКласса.Строки);
		//////////////////////////////////
		// Конфигурации.Константы
		ОписаниеКласса = СтэкДереваЗначенийСтроки[0].Добавить();
		ОписаниеКласса.Класс = "Константы";
		ОписаниеКласса.Выгружаемый = истина;
		ОписаниеКласса.Менеджер = Константы;
		ОписаниеКласса.ДляЗапроса  = "";
		ОписаниеКласса.ИндексКартинки = 1;
		ОписаниеКласса.Свойства.Добавить("Тип");
		//////////////////////////////////
		// Конфигурации.Справочники
		ОписаниеКласса = СтэкДереваЗначенийСтроки[0].Добавить();
		ОписаниеКласса.Класс = "Справочники";
		ОписаниеКласса.Выгружаемый = истина;
		ОписаниеКласса.Менеджер = Справочники;
		ОписаниеКласса.ДляЗапроса  = "Справочник.";
		ОписаниеКласса.Свойства.Добавить("Владельцы");
		ОписаниеКласса.Свойства.Добавить("ВводитсяНаОсновании");
		ОписаниеКласса.ИндексКартинки = 3;
		СтэкДереваЗначенийСтроки.Вставить(0, ОписаниеКласса.Строки);
		//////////////////////////////////
		// Конфигурации.Справочники.Реквизиты
		ОписаниеКласса = СтэкДереваЗначенийСтроки[0].Добавить();
		ОписаниеКласса.Класс = "Реквизиты";
		ОписаниеКласса.Выгружаемый = ложь;
		ОписаниеКласса.ДляЗапроса  = "";
		ОписаниеКласса.Свойства.Добавить("Тип");
		ОписаниеКласса.Свойства.Добавить("Использование");
		//////////////////////////////////
		// Конфигурации.Справочники.ТабличныеЧасти
		ОписаниеКласса = СтэкДереваЗначенийСтроки[0].Добавить();
		ОписаниеКласса.Класс = "ТабличныеЧасти";
		ОписаниеКласса.Выгружаемый = ложь;
		ОписаниеКласса.ДляЗапроса  = "";
		ОписаниеКласса.Свойства.Добавить("Использование");
		СтэкДереваЗначенийСтроки.Вставить(0, ОписаниеКласса.Строки);
		//////////////////////////////////
		// Конфигурации.Справочники.ТабличныеЧасти.Реквизиты
		ОписаниеКласса = СтэкДереваЗначенийСтроки[0].Добавить();
		ОписаниеКласса.Класс = "Реквизиты";
		ОписаниеКласса.Выгружаемый = ложь;
		ОписаниеКласса.ДляЗапроса  = "";
		ОписаниеКласса.Свойства.Добавить("Тип");
		СтэкДереваЗначенийСтроки.Удалить(0);
		СтэкДереваЗначенийСтроки.Удалить(0);
		//////////////////////////////////
		// Конфигурации.Документы
		ОписаниеКласса = СтэкДереваЗначенийСтроки[0].Добавить();
		ОписаниеКласса.Класс = "Документы";
		ОписаниеКласса.Выгружаемый = истина;
		ОписаниеКласса.Менеджер = Документы;
		ОписаниеКласса.ДляЗапроса  = "Документ.";
		ОписаниеКласса.Свойства.Добавить("ВводитсяНаОсновании");
		ОписаниеКласса.Свойства.Добавить("Движения");
		ОписаниеКласса.ИндексКартинки = 7;
		СтэкДереваЗначенийСтроки.Вставить(0, ОписаниеКласса.Строки);
		//////////////////////////////////
		// Конфигурации.Документы.Реквизиты
		ОписаниеКласса = СтэкДереваЗначенийСтроки[0].Добавить();
		ОписаниеКласса.Класс = "Реквизиты";
		ОписаниеКласса.Выгружаемый = ложь;
		ОписаниеКласса.ДляЗапроса  = "";
		ОписаниеКласса.Свойства.Добавить("Тип");
		//////////////////////////////////
		// Конфигурации.Документы.ТабличныеЧасти
		ОписаниеКласса = СтэкДереваЗначенийСтроки[0].Добавить();
		ОписаниеКласса.Класс = "ТабличныеЧасти";
		ОписаниеКласса.Выгружаемый = ложь;
		ОписаниеКласса.ДляЗапроса  = "";
		СтэкДереваЗначенийСтроки.Вставить(0, ОписаниеКласса.Строки);
		//////////////////////////////////
		// Конфигурации.Документы.ТабличныеЧасти.Реквизиты
		ОписаниеКласса = СтэкДереваЗначенийСтроки[0].Добавить();
		ОписаниеКласса.Класс = "Реквизиты";
		ОписаниеКласса.Выгружаемый = ложь;
		ОписаниеКласса.ДляЗапроса  = "";
		ОписаниеКласса.Свойства.Добавить("Тип");
		СтэкДереваЗначенийСтроки.Удалить(0);
		СтэкДереваЗначенийСтроки.Удалить(0);
		//////////////////////////////////
		// Конфигурации.Последовательности
		ОписаниеКласса = СтэкДереваЗначенийСтроки[0].Добавить();
		ОписаниеКласса.Класс = "Последовательности";
		ОписаниеКласса.Выгружаемый = истина;
		ОписаниеКласса.Менеджер = Последовательности;
		ОписаниеКласса.ДляЗапроса  = "Последовательность.";
		ОписаниеКласса.Свойства.Добавить("Документы");
		ОписаниеКласса.Свойства.Добавить("Движения");
		ОписаниеКласса.ИндексКартинки = 5;
		СтэкДереваЗначенийСтроки.Вставить(0, ОписаниеКласса.Строки);
		//////////////////////////////////
		// Конфигурации.Последовательности.Измерения
		ОписаниеКласса = СтэкДереваЗначенийСтроки[0].Добавить();
		ОписаниеКласса.Класс = "Измерения";
		ОписаниеКласса.Выгружаемый = ложь;
		ОписаниеКласса.ДляЗапроса  = "";
		ОписаниеКласса.Свойства.Добавить("Тип");
		ОписаниеКласса.Свойства.Добавить("СоответствиеДокументам");
		ОписаниеКласса.Свойства.Добавить("СоответствиеДвижениям");
		СтэкДереваЗначенийСтроки.Удалить(0);
		//////////////////////////////////
		// Конфигурации.ПланыВидовХарактеристик
		ОписаниеКласса = СтэкДереваЗначенийСтроки[0].Добавить();
		ОписаниеКласса.Класс = "ПланыВидовХарактеристик";
		ОписаниеКласса.Выгружаемый = истина;
		ОписаниеКласса.Менеджер = ПланыВидовХарактеристик;
		ОписаниеКласса.ДляЗапроса  = "ПланВидовХарактеристик.";
		ОписаниеКласса.Свойства.Добавить("ДополнительныеЗначенияХарактеристик");
		ОписаниеКласса.Свойства.Добавить("Тип");
		ОписаниеКласса.Свойства.Добавить("ВводитсяНаОсновании");
		ОписаниеКласса.ИндексКартинки = 9;
		СтэкДереваЗначенийСтроки.Вставить(0, ОписаниеКласса.Строки);
		//////////////////////////////////
		// Конфигурации.ПланыВидовХарактеристик.Реквизиты
		ОписаниеКласса = СтэкДереваЗначенийСтроки[0].Добавить();
		ОписаниеКласса.Класс = "Реквизиты";
		ОписаниеКласса.Выгружаемый = ложь;
		ОписаниеКласса.ДляЗапроса  = "";
		ОписаниеКласса.Свойства.Добавить("Тип");
		ОписаниеКласса.Свойства.Добавить("Использование");
		//////////////////////////////////
		// Конфигурации.ПланыВидовХарактеристик.ТабличныеЧасти
		ОписаниеКласса = СтэкДереваЗначенийСтроки[0].Добавить();
		ОписаниеКласса.Класс = "ТабличныеЧасти";
		ОписаниеКласса.Выгружаемый = ложь;
		ОписаниеКласса.ДляЗапроса  = "";
		ОписаниеКласса.Свойства.Добавить("Использование");
		СтэкДереваЗначенийСтроки.Вставить(0, ОписаниеКласса.Строки);
		//////////////////////////////////
		// Конфигурации.ПланыВидовХарактеристик.ТабличныеЧасти.Реквизиты
		ОписаниеКласса = СтэкДереваЗначенийСтроки[0].Добавить();
		ОписаниеКласса.Класс = "Реквизиты";
		ОписаниеКласса.Выгружаемый = ложь;
		ОписаниеКласса.ДляЗапроса  = "";
		ОписаниеКласса.Свойства.Добавить("Тип");
		СтэкДереваЗначенийСтроки.Удалить(0);
		СтэкДереваЗначенийСтроки.Удалить(0);
		//////////////////////////////////
		// Конфигурации.ПланыСчетов
		ОписаниеКласса = СтэкДереваЗначенийСтроки[0].Добавить();
		ОписаниеКласса.Класс = "ПланыСчетов";
		ОписаниеКласса.Выгружаемый = истина;
		ОписаниеКласса.Менеджер = ПланыСчетов;
		ОписаниеКласса.ДляЗапроса  = "ПланСчетов.";
		ОписаниеКласса.Свойства.Добавить("ВводитсяНаОсновании");
		ОписаниеКласса.Свойства.Добавить("ВидыСубконто");
		ОписаниеКласса.ИндексКартинки = 11;
		СтэкДереваЗначенийСтроки.Вставить(0, ОписаниеКласса.Строки);
		//////////////////////////////////
		// Конфигурации.ПланыСчетов.Реквизиты
		ОписаниеКласса = СтэкДереваЗначенийСтроки[0].Добавить();
		ОписаниеКласса.Класс = "Реквизиты";
		ОписаниеКласса.Выгружаемый = ложь;
		ОписаниеКласса.ДляЗапроса  = "";
		ОписаниеКласса.Свойства.Добавить("Тип");
		//////////////////////////////////
		// Конфигурации.ПланыСчетов.ТабличныеЧасти
		ОписаниеКласса = СтэкДереваЗначенийСтроки[0].Добавить();
		ОписаниеКласса.Класс = "ТабличныеЧасти";
		ОписаниеКласса.Выгружаемый = ложь;
		ОписаниеКласса.ДляЗапроса  = "";
		СтэкДереваЗначенийСтроки.Вставить(0, ОписаниеКласса.Строки);
		//////////////////////////////////
		// Конфигурации.ПланыСчетов.ТабличныеЧасти.Реквизиты
		ОписаниеКласса = СтэкДереваЗначенийСтроки[0].Добавить();
		ОписаниеКласса.Класс = "Реквизиты";
		ОписаниеКласса.Выгружаемый = ложь;
		ОписаниеКласса.ДляЗапроса  = "";
		ОписаниеКласса.Свойства.Добавить("Тип");
		СтэкДереваЗначенийСтроки.Удалить(0);
		СтэкДереваЗначенийСтроки.Удалить(0);
		//////////////////////////////////
		// Конфигурации.ПланыВидовРасчета
		ОписаниеКласса = СтэкДереваЗначенийСтроки[0].Добавить();
		ОписаниеКласса.Класс = "ПланыВидовРасчета";
		ОписаниеКласса.Выгружаемый = истина;
		ОписаниеКласса.Менеджер = ПланыВидовРасчета;
		ОписаниеКласса.ДляЗапроса  = "ПланВидовРасчета.";
		ОписаниеКласса.Свойства.Добавить("ВводитсяНаОсновании");
		ОписаниеКласса.Свойства.Добавить("ЗависимостьОтВидовРасчета");
		ОписаниеКласса.Свойства.Добавить("БазовыеВидыРасчета");
		ОписаниеКласса.Свойства.Добавить("ИспользованиеПериодаДействия");
		ОписаниеКласса.ИндексКартинки = 13;
		СтэкДереваЗначенийСтроки.Вставить(0, ОписаниеКласса.Строки);
		//////////////////////////////////
		// Конфигурации.ПланыВидовРасчета.Реквизиты
		ОписаниеКласса = СтэкДереваЗначенийСтроки[0].Добавить();
		ОписаниеКласса.Класс = "Реквизиты";
		ОписаниеКласса.Выгружаемый = ложь;
		ОписаниеКласса.ДляЗапроса  = "";
		ОписаниеКласса.Свойства.Добавить("Тип");
		//////////////////////////////////
		// Конфигурации.ПланыВидовРасчета.ТабличныеЧасти
		ОписаниеКласса = СтэкДереваЗначенийСтроки[0].Добавить();
		ОписаниеКласса.Класс = "ТабличныеЧасти";
		ОписаниеКласса.Выгружаемый = ложь;
		ОписаниеКласса.ДляЗапроса  = "";
		СтэкДереваЗначенийСтроки.Вставить(0, ОписаниеКласса.Строки);
		//////////////////////////////////
		// Конфигурации.ПланыВидовРасчета.ТабличныеЧасти.Реквизиты
		ОписаниеКласса = СтэкДереваЗначенийСтроки[0].Добавить();
		ОписаниеКласса.Класс = "Реквизиты";
		ОписаниеКласса.Выгружаемый = ложь;
		ОписаниеКласса.ДляЗапроса  = "";
		ОписаниеКласса.Свойства.Добавить("Тип");
		СтэкДереваЗначенийСтроки.Удалить(0);
		СтэкДереваЗначенийСтроки.Удалить(0);
		//////////////////////////////////
		// Конфигурации.РегистрыСведений
		ОписаниеКласса = СтэкДереваЗначенийСтроки[0].Добавить();
		ОписаниеКласса.Класс = "РегистрыСведений";
		ОписаниеКласса.Выгружаемый = истина;
		ОписаниеКласса.Менеджер = РегистрыСведений;
		ОписаниеКласса.ДляЗапроса  = "РегистрСведений.";
		ОписаниеКласса.ИндексКартинки = 15;
		СтэкДереваЗначенийСтроки.Вставить(0, ОписаниеКласса.Строки);
		//////////////////////////////////
		// Конфигурации.РегистрыСведений.Ресурсы
		ОписаниеКласса = СтэкДереваЗначенийСтроки[0].Добавить();
		ОписаниеКласса.Класс = "Ресурсы";
		ОписаниеКласса.Выгружаемый = ложь;
		ОписаниеКласса.ДляЗапроса  = "";
		ОписаниеКласса.Свойства.Добавить("Тип");
		//////////////////////////////////
		// Конфигурации.РегистрыСведений.Реквизиты
		ОписаниеКласса = СтэкДереваЗначенийСтроки[0].Добавить();
		ОписаниеКласса.Класс = "Реквизиты";
		ОписаниеКласса.Выгружаемый = ложь;
		ОписаниеКласса.ДляЗапроса  = "";
		ОписаниеКласса.Свойства.Добавить("Тип");
		//////////////////////////////////
		// Конфигурации.РегистрыСведений.Измерения
		ОписаниеКласса = СтэкДереваЗначенийСтроки[0].Добавить();
		ОписаниеКласса.Класс = "Измерения";
		ОписаниеКласса.Выгружаемый = ложь;
		ОписаниеКласса.ДляЗапроса  = "";
		ОписаниеКласса.Свойства.Добавить("Тип");
		СтэкДереваЗначенийСтроки.Удалить(0);
		//////////////////////////////////
		// Конфигурации.РегистрыНакопления
		ОписаниеКласса = СтэкДереваЗначенийСтроки[0].Добавить();
		ОписаниеКласса.Класс = "РегистрыНакопления";
		ОписаниеКласса.Выгружаемый = истина;
		ОписаниеКласса.Менеджер = РегистрыНакопления;
		ОписаниеКласса.ДляЗапроса  = "РегистрНакопления.";
		ОписаниеКласса.ИндексКартинки = 17;
		СтэкДереваЗначенийСтроки.Вставить(0, ОписаниеКласса.Строки);
		//////////////////////////////////
		// Конфигурации.РегистрыНакопления.Ресурсы
		ОписаниеКласса = СтэкДереваЗначенийСтроки[0].Добавить();
		ОписаниеКласса.Класс = "Ресурсы";
		ОписаниеКласса.Выгружаемый = ложь;
		ОписаниеКласса.ДляЗапроса  = "";
		ОписаниеКласса.Свойства.Добавить("Тип");
		//////////////////////////////////
		// Конфигурации.РегистрыНакопления.Реквизиты
		ОписаниеКласса = СтэкДереваЗначенийСтроки[0].Добавить();
		ОписаниеКласса.Класс = "Реквизиты";
		ОписаниеКласса.Выгружаемый = ложь;
		ОписаниеКласса.ДляЗапроса  = "";
		ОписаниеКласса.Свойства.Добавить("Тип");
		//////////////////////////////////
		// Конфигурации.РегистрыНакопления.Измерения
		ОписаниеКласса = СтэкДереваЗначенийСтроки[0].Добавить();
		ОписаниеКласса.Класс = "Измерения";
		ОписаниеКласса.Выгружаемый = ложь;
		ОписаниеКласса.ДляЗапроса  = "";
		ОписаниеКласса.Свойства.Добавить("Тип");
		СтэкДереваЗначенийСтроки.Удалить(0);
		//////////////////////////////////
		// Конфигурации.РегистрыБухгалтерии
		ОписаниеКласса = СтэкДереваЗначенийСтроки[0].Добавить();
		ОписаниеКласса.Класс = "РегистрыБухгалтерии";
		ОписаниеКласса.Выгружаемый = истина;
		ОписаниеКласса.Менеджер = РегистрыБухгалтерии;
		ОписаниеКласса.ДляЗапроса  = "РегистрБухгалтерии.";
		ОписаниеКласса.Свойства.Добавить("ПланСчетов");
		ОписаниеКласса.Свойства.Добавить("Корреспонденция");
		ОписаниеКласса.ИндексКартинки = 19;
		СтэкДереваЗначенийСтроки.Вставить(0, ОписаниеКласса.Строки);
		//////////////////////////////////
		// Конфигурации.РегистрыБухгалтерии.Измерения
		ОписаниеКласса = СтэкДереваЗначенийСтроки[0].Добавить();
		ОписаниеКласса.Класс = "Измерения";
		ОписаниеКласса.Выгружаемый = ложь;
		ОписаниеКласса.ДляЗапроса  = "";
		ОписаниеКласса.Свойства.Добавить("Тип");
		//////////////////////////////////
		// Конфигурации.РегистрыБухгалтерии.Ресурсы
		ОписаниеКласса = СтэкДереваЗначенийСтроки[0].Добавить();
		ОписаниеКласса.Класс = "Ресурсы";
		ОписаниеКласса.Выгружаемый = ложь;
		ОписаниеКласса.ДляЗапроса  = "";
		ОписаниеКласса.Свойства.Добавить("Тип");
		//////////////////////////////////
		// Конфигурации.РегистрыБухгалтерии.Реквизиты
		ОписаниеКласса = СтэкДереваЗначенийСтроки[0].Добавить();
		ОписаниеКласса.Класс = "Реквизиты";
		ОписаниеКласса.Выгружаемый = ложь;
		ОписаниеКласса.ДляЗапроса  = "";
		ОписаниеКласса.Свойства.Добавить("Тип");
		СтэкДереваЗначенийСтроки.Удалить(0);
		//////////////////////////////////
		// Конфигурации.РегистрыРасчета
		ОписаниеКласса = СтэкДереваЗначенийСтроки[0].Добавить();
		ОписаниеКласса.Класс = "РегистрыРасчета";
		ОписаниеКласса.Выгружаемый = истина;
		ОписаниеКласса.Менеджер = РегистрыРасчета;
		ОписаниеКласса.ДляЗапроса  = "РегистрРасчета.";
		ОписаниеКласса.Свойства.Добавить("Периодичность");
		ОписаниеКласса.Свойства.Добавить("ПериодДействия");
		ОписаниеКласса.Свойства.Добавить("БазовыйПериод");
		ОписаниеКласса.Свойства.Добавить("График");
		ОписаниеКласса.Свойства.Добавить("ЗначениеГрафика");
		ОписаниеКласса.Свойства.Добавить("ДатаГрафика");
		ОписаниеКласса.Свойства.Добавить("ПланВидовРасчета");
		ОписаниеКласса.ИндексКартинки = 21;
		СтэкДереваЗначенийСтроки.Вставить(0, ОписаниеКласса.Строки);
		//////////////////////////////////
		// Конфигурации.РегистрыРасчета.Ресурсы
		ОписаниеКласса = СтэкДереваЗначенийСтроки[0].Добавить();
		ОписаниеКласса.Класс = "Ресурсы";
		ОписаниеКласса.Выгружаемый = ложь;
		ОписаниеКласса.ДляЗапроса  = "";
		ОписаниеКласса.Свойства.Добавить("Тип");
		//////////////////////////////////
		// Конфигурации.РегистрыРасчета.Реквизиты
		ОписаниеКласса = СтэкДереваЗначенийСтроки[0].Добавить();
		ОписаниеКласса.Класс = "Реквизиты";
		ОписаниеКласса.Выгружаемый = ложь;
		ОписаниеКласса.ДляЗапроса  = "";
		ОписаниеКласса.Свойства.Добавить("Тип");
		ОписаниеКласса.Свойства.Добавить("СвязьСГрафиком");
		//////////////////////////////////
		// Конфигурации.РегистрыРасчета.Измерения
		ОписаниеКласса = СтэкДереваЗначенийСтроки[0].Добавить();
		ОписаниеКласса.Класс = "Измерения";
		ОписаниеКласса.Выгружаемый = ложь;
		ОписаниеКласса.ДляЗапроса  = "";
		ОписаниеКласса.Свойства.Добавить("Тип");
		ОписаниеКласса.Свойства.Добавить("БазовоеИзмерение");
		ОписаниеКласса.Свойства.Добавить("СвязьСГрафиком");
		//////////////////////////////////
		// Конфигурации.РегистрыРасчета.Перерасчеты
		//ОписаниеКласса = СтэкДереваЗначенийСтроки[0].Добавить();
		//ОписаниеКласса.Класс = "Перерасчеты";
		//ОписаниеКласса.Выгружаемый = истина;
		//ОписаниеКласса.Менеджер  = "РегистрыРасчета.%i.Перерасчеты";
		//ОписаниеКласса.ДляЗапроса  = "РегистрРасчета.%i.";
		//СтэкДереваЗначенийСтроки.Вставить(0, ОписаниеКласса.Строки);
		//////////////////////////////////
		// Конфигурации.РегистрыРасчета.Перерасчеты.Измерения
		//ОписаниеКласса = СтэкДереваЗначенийСтроки[0].Добавить();
		//ОписаниеКласса.Класс = "Измерения";
		//ОписаниеКласса.Выгружаемый = ложь;
		//ОписаниеКласса.Свойства.Добавить("ДанныеВедущихРегистров");
		//ОписаниеКласса.Свойства.Добавить("ИзмерениеРегистра");
		//СтэкДереваЗначенийСтроки.Удалить(0);
		СтэкДереваЗначенийСтроки.Удалить(0);
		//////////////////////////////////
		// Конфигурации.БизнесПроцессы
		ОписаниеКласса = СтэкДереваЗначенийСтроки[0].Добавить();
		ОписаниеКласса.Класс = "БизнесПроцессы";
		ОписаниеКласса.Выгружаемый = истина;
		ОписаниеКласса.Менеджер = БизнесПроцессы;
		ОписаниеКласса.ДляЗапроса  = "БизнесПроцесс.";
		ОписаниеКласса.Свойства.Добавить("ВводитсяНаОсновании");
		ОписаниеКласса.Свойства.Добавить("Задача");
		ОписаниеКласса.ИндексКартинки = 23;
		СтэкДереваЗначенийСтроки.Вставить(0, ОписаниеКласса.Строки);
		//////////////////////////////////
		// Конфигурации.БизнесПроцессы.Реквизиты
		ОписаниеКласса = СтэкДереваЗначенийСтроки[0].Добавить();
		ОписаниеКласса.Класс = "Реквизиты";
		ОписаниеКласса.Выгружаемый = ложь;
		ОписаниеКласса.ДляЗапроса  = "";
		ОписаниеКласса.Свойства.Добавить("Тип");
		//////////////////////////////////
		// Конфигурации.БизнесПроцессы.ТабличныеЧасти
		ОписаниеКласса = СтэкДереваЗначенийСтроки[0].Добавить();
		ОписаниеКласса.Класс = "ТабличныеЧасти";
		ОписаниеКласса.Выгружаемый = ложь;
		ОписаниеКласса.ДляЗапроса  = "";
		СтэкДереваЗначенийСтроки.Вставить(0, ОписаниеКласса.Строки);
		//////////////////////////////////
		// Конфигурации.БизнесПроцессы.ТабличныеЧасти.Реквизиты
		ОписаниеКласса = СтэкДереваЗначенийСтроки[0].Добавить();
		ОписаниеКласса.Класс = "Реквизиты";
		ОписаниеКласса.Выгружаемый = ложь;
		ОписаниеКласса.ДляЗапроса  = "";
		ОписаниеКласса.Свойства.Добавить("Тип");
		СтэкДереваЗначенийСтроки.Удалить(0);
		СтэкДереваЗначенийСтроки.Удалить(0);
		//////////////////////////////////
		// Конфигурации.Задачи
		ОписаниеКласса = СтэкДереваЗначенийСтроки[0].Добавить();
		ОписаниеКласса.Класс = "Задачи";
		ОписаниеКласса.Выгружаемый = истина;
		ОписаниеКласса.Менеджер = Задачи;
		ОписаниеКласса.ДляЗапроса  = "Задача.";
		ОписаниеКласса.Свойства.Добавить("Адресация");
		ОписаниеКласса.Свойства.Добавить("ОсновнойРеквизитАдресации");
		ОписаниеКласса.Свойства.Добавить("ТекущийИсполнитель");
		ОписаниеКласса.Свойства.Добавить("ВводитсяНаОсновании");
		ОписаниеКласса.ИндексКартинки = 25;
		СтэкДереваЗначенийСтроки.Вставить(0, ОписаниеКласса.Строки);
		//////////////////////////////////
		// Конфигурации.Задачи.РеквизитыАдресации
		ОписаниеКласса = СтэкДереваЗначенийСтроки[0].Добавить();
		ОписаниеКласса.Класс = "РеквизитыАдресации";
		ОписаниеКласса.Выгружаемый = ложь;
		ОписаниеКласса.ДляЗапроса  = "";
		ОписаниеКласса.Свойства.Добавить("Тип");
		ОписаниеКласса.Свойства.Добавить("ИзмерениеАдресации");
		//////////////////////////////////
		// Конфигурации.Задачи.Реквизиты
		ОписаниеКласса = СтэкДереваЗначенийСтроки[0].Добавить();
		ОписаниеКласса.Класс = "Реквизиты";
		ОписаниеКласса.Выгружаемый = ложь;
		ОписаниеКласса.ДляЗапроса  = "";
		ОписаниеКласса.Свойства.Добавить("Тип");
		//////////////////////////////////
		// Конфигурации.Задачи.ТабличныеЧасти
		ОписаниеКласса = СтэкДереваЗначенийСтроки[0].Добавить();
		ОписаниеКласса.Класс = "ТабличныеЧасти";
		ОписаниеКласса.Выгружаемый = ложь;
		ОписаниеКласса.ДляЗапроса  = "";
		СтэкДереваЗначенийСтроки.Вставить(0, ОписаниеКласса.Строки);
		//////////////////////////////////
		// Конфигурации.Задачи.ТабличныеЧасти.Реквизиты
		ОписаниеКласса = СтэкДереваЗначенийСтроки[0].Добавить();
		ОписаниеКласса.Класс = "Реквизиты";
		ОписаниеКласса.Выгружаемый = ложь;
		ОписаниеКласса.ДляЗапроса  = "";
		ОписаниеКласса.Свойства.Добавить("Тип");
		СтэкДереваЗначенийСтроки.Удалить(0);
		СтэкДереваЗначенийСтроки.Удалить(0);
		
		//////////////////////////////////
		// Конфигурации.ПланыОбмена
		ОписаниеКласса = СтэкДереваЗначенийСтроки[0].Добавить();
		ОписаниеКласса.Класс = "ПланыОбмена";
		ОписаниеКласса.Выгружаемый = истина;
		ОписаниеКласса.Менеджер = ПланыОбмена;
		ОписаниеКласса.ДляЗапроса  = "ПланОбмена.";
		ОписаниеКласса.Свойства.Добавить("ВводитсяНаОсновании");
		ОписаниеКласса.ИндексКартинки = 27;
		СтэкДереваЗначенийСтроки.Вставить(0, ОписаниеКласса.Строки);
		//////////////////////////////////
		// Конфигурации.ПланыОбмена.Реквизиты
		ОписаниеКласса = СтэкДереваЗначенийСтроки[0].Добавить();
		ОписаниеКласса.Класс = "Реквизиты";
		ОписаниеКласса.Выгружаемый = ложь;
		ОписаниеКласса.ДляЗапроса  = "";
		ОписаниеКласса.Свойства.Добавить("Тип");
		//////////////////////////////////
		// Конфигурации.ПланыОбмена.ТабличныеЧасти
		ОписаниеКласса = СтэкДереваЗначенийСтроки[0].Добавить();
		ОписаниеКласса.Класс = "ТабличныеЧасти";
		ОписаниеКласса.Выгружаемый = ложь;
		ОписаниеКласса.ДляЗапроса  = "";
		СтэкДереваЗначенийСтроки.Вставить(0, ОписаниеКласса.Строки);
		//////////////////////////////////
		// Конфигурации.ПланыОбмена.ТабличныеЧасти.Реквизиты
		ОписаниеКласса = СтэкДереваЗначенийСтроки[0].Добавить();
		ОписаниеКласса.Класс = "Реквизиты";
		ОписаниеКласса.Выгружаемый = ложь;
		ОписаниеКласса.ДляЗапроса  = "";
		ОписаниеКласса.Свойства.Добавить("Тип");
		СтэкДереваЗначенийСтроки.Удалить(0);
		СтэкДереваЗначенийСтроки.Удалить(0);	
		
		СтэкДереваЗначенийСтроки.Удалить(0);
		
	КонецПроцедуры
	
	// Процедура определяет, какие типы объектов следует выгружать для сохранения ссылочной целостности.
	//
	// Параметры:
	//   Выгрузка - массив строк - совокупность выгружаемых объектов.
	Процедура ПересчитатьВыгружаемыеПоСсылке(Выгрузка)
		
		// Сброс всех флажков ВыгружатьПриНеобходимости.
		СтрокаКонфигурации = ДеревоМетаданных.Строки[0];
		СтрокаКонфигурации.ВыгружатьПриНеобходимости = 0;
		ОбработкаИзмененияСостоянияВыгружатьПриНеобходимости(СтрокаКонфигурации);
		
		// Обработка переданного набора объектов.
		Для Каждого Выгружаемый Из Выгрузка Цикл
			
			УстановкаСостоянияВыгружатьПриНеобходимости(Выгружаемый.СтрокаДерева);
			
		КонецЦикла;
		
	КонецПроцедуры
	
	Процедура СообщитьПользователю(Текст)
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = Текст;
		Сообщение.Сообщить();
		
	КонецПроцедуры
	
	Процедура ИнициализироватьТаблицуПредопределенных()
		
		ТаблицаПредопределенных = Новый ТаблицаЗначений;
		ТаблицаПредопределенных.Колонки.Добавить("ИмяТаблицы");
		ТаблицаПредопределенных.Колонки.Добавить("Ссылка");
		ТаблицаПредопределенных.Колонки.Добавить("ИмяПредопределенныхДанных");
		
	КонецПроцедуры
	
	Процедура ВыгрузитьТаблицуПредопределенных(ЗаписьXML)
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("PredefinedData");
		
		Если ТаблицаПредопределенных.Количество() > 0 Тогда
			
			ТаблицаПредопределенных.Сортировать("ИмяТаблицы");
			
			ИмяПредыдущейТаблицы = "";
			
			Для Каждого Элемент Из ТаблицаПредопределенных Цикл
				
				Если ИмяПредыдущейТаблицы <> Элемент.ИмяТаблицы Тогда
					Если Не ПустаяСтрока(ИмяПредыдущейТаблицы) Тогда
						ЗаписьXML.ЗаписатьКонецЭлемента();
					КонецЕсли;
					ЗаписьXML.ЗаписатьНачалоЭлемента(Элемент.ИмяТаблицы);
				КонецЕсли;
				
				ЗаписьXML.ЗаписатьНачалоЭлемента("item");
				ЗаписьXML.ЗаписатьАтрибут("Ссылка", Элемент.Ссылка);
				ЗаписьXML.ЗаписатьАтрибут("ИмяПредопределенныхДанных", Элемент.ИмяПредопределенныхДанных);
				ЗаписьXML.ЗаписатьКонецЭлемента();
				
				ИмяПредыдущейТаблицы = Элемент.ИмяТаблицы;
				
			КонецЦикла;
			
			ЗаписьXML.ЗаписатьКонецЭлемента();
			
		КонецЕсли;
		
		ЗаписьXML.ЗаписатьКонецЭлемента();
		
	КонецПроцедуры
	
	Процедура ЗагрузитьТаблицуПредопределенных(ЧтениеXML)
		
		ЧтениеXML.Пропустить(); // При первом чтении пропускам основной блок данных.
		ЧтениеXML.Прочитать();
		
		ИнициализироватьТаблицуПредопределенных();
		ВременнаяСтрока = ТаблицаПредопределенных.Добавить();
		
		СоответствиеЗаменыСсылок = Новый Соответствие;
		
		Пока ЧтениеXML.Прочитать() Цикл
			
			Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
				
				Если ЧтениеXML.ЛокальноеИмя <> "item" Тогда
					
					ВременнаяСтрока.ИмяТаблицы = ЧтениеXML.ЛокальноеИмя;
					
					ТекстЗапроса = 
					"ВЫБРАТЬ
					|	Таблица.Ссылка КАК Ссылка
					|ИЗ
					|	" + ВременнаяСтрока.ИмяТаблицы + " КАК Таблица
					|ГДЕ
					|	Таблица.ИмяПредопределенныхДанных = &ИмяПредопределенныхДанных";
					Запрос = Новый Запрос(ТекстЗапроса);
					
				Иначе
					
					Пока ЧтениеXML.ПрочитатьАтрибут() Цикл
						
						ВременнаяСтрока[ЧтениеXML.ЛокальноеИмя] = ЧтениеXML.Значение;
						
					КонецЦикла;
					
					Запрос.УстановитьПараметр("ИмяПредопределенныхДанных", ВременнаяСтрока.ИмяПредопределенныхДанных);
					
					РезультатЗапроса = Запрос.Выполнить();
					Если Не РезультатЗапроса.Пустой() Тогда
						
						Выборка = РезультатЗапроса.Выбрать();
						
						Если Выборка.Количество() = 1 Тогда
							
							Выборка.Следующий();
							
							СсылкаВБазе = XMLСтрока(Выборка.Ссылка);
							СсылкаВФайле = ВременнаяСтрока.Ссылка;
							
							Если СсылкаВБазе <> СсылкаВФайле Тогда
								
								XMLТип = XMLТипСсылки(Выборка.Ссылка);
								
								СоответствиеТипа = СоответствиеЗаменыСсылок.Получить(XMLТип);
								
								Если СоответствиеТипа = Неопределено Тогда
									
									СоответствиеТипа = Новый Соответствие;
									СоответствиеТипа.Вставить(СсылкаВФайле, СсылкаВБазе);
									СоответствиеЗаменыСсылок.Вставить(XMLТип, СоответствиеТипа);
									
								Иначе
									
									СоответствиеТипа.Вставить(СсылкаВФайле, СсылкаВБазе);
									
								КонецЕсли;
								
							КонецЕсли;
							
						Иначе
							
							ТекстИсключения = НСтр("ru = 'Обнаружено дублирование предопределенных элементов %1 в таблице %2!'");
							ТекстИсключения = СтрЗаменить(ТекстИсключения, "%1", ВременнаяСтрока.ИмяПредопределенныхДанных);
							ТекстИсключения = СтрЗаменить(ТекстИсключения, "%2", ВременнаяСтрока.ИмяТаблицы);
							
							ВызватьИсключение ТекстИсключения;
							
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		ЧтениеXML.Закрыть();
		
	КонецПроцедуры
	
	Процедура ЗаменитьСсылкиНаПредопределенные(ИмяФайла)
		
		ПотокЧтения = Новый ЧтениеТекста(ИмяФайла);
		
		ВременныйФайл = ПолучитьИмяВременногоФайла("xml");
		
		ПотокЗаписи = Новый ЗаписьТекста(ВременныйФайл);
		
		// Константы для разбора текста.
		НачалоТипа = "xsi:type=""v8:";
		ДлинаНачалаТипа = СтрДлина(НачалоТипа);
		КонецТипа = """>";
		ДлинаКонцаТипа = СтрДлина(КонецТипа);
		
		ИсходнаяСтрока = ПотокЧтения.ПрочитатьСтроку();
		Пока ИсходнаяСтрока <> Неопределено Цикл
			
			ОстатокСтроки = Неопределено;
			
			ТекущаяПозиция = 1;
			ПозицияТипа = Найти(ИсходнаяСтрока, НачалоТипа);
			Пока ПозицияТипа > 0 Цикл
				
				ПотокЗаписи.Записать(Сред(ИсходнаяСтрока, ТекущаяПозиция, ПозицияТипа - 1 + ДлинаНачалаТипа));
				
				ОстатокСтроки = Сред(ИсходнаяСтрока, ТекущаяПозиция + ПозицияТипа + ДлинаНачалаТипа - 1);
				ТекущаяПозиция = ТекущаяПозиция + ПозицияТипа + ДлинаНачалаТипа - 1;
				
				ПозицияКонцаТипа = Найти(ОстатокСтроки, КонецТипа);
				Если ПозицияКонцаТипа = 0 Тогда
					Прервать;
				КонецЕсли;
				
				ИмяТипа = Лев(ОстатокСтроки, ПозицияКонцаТипа - 1);
				СоответствиеЗамены = СоответствиеЗаменыСсылок.Получить(ИмяТипа);
				Если СоответствиеЗамены = Неопределено Тогда
					ПозицияТипа = Найти(ОстатокСтроки, НачалоТипа);
					Продолжить;
				КонецЕсли;
				
				ПотокЗаписи.Записать(ИмяТипа);
				ПотокЗаписи.Записать(КонецТипа);
				
				ИсходнаяСсылкаXML = Сред(ОстатокСтроки, ПозицияКонцаТипа + ДлинаКонцаТипа, 36);
				
				НайденнаяСсылкаXML = СоответствиеЗамены.Получить(ИсходнаяСсылкаXML);
				
				Если НайденнаяСсылкаXML = Неопределено Тогда
					ПотокЗаписи.Записать(ИсходнаяСсылкаXML);
				Иначе
					ПотокЗаписи.Записать(НайденнаяСсылкаXML);
				КонецЕсли;
				
				ТекущаяПозиция = ТекущаяПозиция + ПозицияКонцаТипа - 1 + ДлинаКонцаТипа + 36;
				ОстатокСтроки = Сред(ОстатокСтроки, ПозицияКонцаТипа + ДлинаКонцаТипа + 36);
				ПозицияТипа = Найти(ОстатокСтроки, НачалоТипа);
				
			КонецЦикла;
			
			Если ОстатокСтроки <> Неопределено Тогда
				ПотокЗаписи.ЗаписатьСтроку(ОстатокСтроки);
			Иначе
				ПотокЗаписи.ЗаписатьСтроку(ИсходнаяСтрока);
			КонецЕсли;
			
			ИсходнаяСтрока = ПотокЧтения.ПрочитатьСтроку();
			
		КонецЦикла;
		
		ПотокЧтения.Закрыть();
		ПотокЗаписи.Закрыть();
		
		ИмяФайла = ВременныйФайл;
		
	КонецПроцедуры
	
	Функция ЭтоМетаданныеСПредопределеннымиЭлементами(ОбъектМетаданных)
		
		Возврат Метаданные.Справочники.Содержит(ОбъектМетаданных)
		Или Метаданные.ПланыСчетов.Содержит(ОбъектМетаданных)
		Или Метаданные.ПланыВидовХарактеристик.Содержит(ОбъектМетаданных)
		Или Метаданные.ПланыВидовРасчета.Содержит(ОбъектМетаданных);
		
	КонецФункции
	
	// Возвращает СериализаторXDTO с аннотацией типов.
	//
	// Возвращаемое значение:
	//	СериализаторXDTO - сериализатор.
	//
	Процедура ИнициализироватьСериализаторXDTOСАннотациейТипов()
		
		ТипыСАннотациейСсылок = ПредопределенныеТипыПриВыгрузке();
		
		Если ТипыСАннотациейСсылок.Количество() > 0 Тогда
			
			Фабрика = ПолучитьФабрикуСУказаниемТипов(ТипыСАннотациейСсылок);
			Сериализатор = Новый СериализаторXDTO(Фабрика);
			
		Иначе
			
			Сериализатор = СериализаторXDTO;
			
		КонецЕсли;
		
	КонецПроцедуры
	
	Функция ПредопределенныеТипыПриВыгрузке()
		
		Типы = Новый Массив;
		
		Для Каждого ОбъектМетаданных Из Метаданные.Справочники Цикл
			Типы.Добавить(ОбъектМетаданных);
		КонецЦикла;
		
		Для Каждого ОбъектМетаданных Из Метаданные.ПланыСчетов Цикл
			Типы.Добавить(ОбъектМетаданных);
		КонецЦикла;
		
		Для Каждого ОбъектМетаданных Из Метаданные.ПланыВидовХарактеристик Цикл
			Типы.Добавить(ОбъектМетаданных);
		КонецЦикла;
		
		Для Каждого ОбъектМетаданных Из Метаданные.ПланыВидовРасчета Цикл
			Типы.Добавить(ОбъектМетаданных);
		КонецЦикла;
		
		Возврат Типы;
		
	КонецФункции
	
	// Возвращает фабрику с указанием типов.
	//
	// Параметры:
	//	Типы - ФиксированныйМассив (Метаданные) - массив типов.
	//
	// Возвращаемое значение:
	//	ФабрикаXDTO - фабрика.
	//
	Функция ПолучитьФабрикуСУказаниемТипов(Знач Типы)
		
		НаборСхем = ФабрикаXDTO.ЭкспортСхемыXML("http://v8.1c.ru/8.1/data/enterprise/current-config");
		Схема = НаборСхем[0];
		Схема.ОбновитьЭлементDOM();
		
		УказанныеТипы = Новый Соответствие;
		Для каждого Тип Из Типы Цикл
			УказанныеТипы.Вставить(XMLТипСсылки(Тип), Истина);
		КонецЦикла;
		
		ПространствоИмен = Новый Соответствие;
		ПространствоИмен.Вставить("xs", "http://www.w3.org/2001/XMLSchema");
		РазыменовательПространствИменDOM = Новый РазыменовательПространствИменDOM(ПространствоИмен);
		ТекстXPath = "/xs:schema/xs:complexType/xs:sequence/xs:element[starts-with(@type,'tns:')]";
		
		Запрос = Схема.ДокументDOM.СоздатьВыражениеXPath(ТекстXPath, РазыменовательПространствИменDOM);
		Результат = Запрос.Вычислить(Схема.ДокументDOM);
		
		Пока Истина Цикл
			
			УзелПоля = Результат.ПолучитьСледующий();
			Если УзелПоля = Неопределено Тогда
				Прервать;
			КонецЕсли;
			АтрибутТип = УзелПоля.Атрибуты.ПолучитьИменованныйЭлемент("type");
			ТипБезNSПрефикса = Сред(АтрибутТип.ТекстовоеСодержимое, СтрДлина("tns:") + 1);
			
			Если УказанныеТипы.Получить(ТипБезNSПрефикса) = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			УзелПоля.УстановитьАтрибут("nillable", "true");
			УзелПоля.УдалитьАтрибут("type");
		КонецЦикла;
		
		ЗаписьXML = Новый ЗаписьXML;
		ИмяФайлаСхемы = ПолучитьИмяВременногоФайла("xsd");
		ЗаписьXML.ОткрытьФайл(ИмяФайлаСхемы);
		ЗаписьDOM = Новый ЗаписьDOM;
		ЗаписьDOM.Записать(Схема.ДокументDOM, ЗаписьXML);
		ЗаписьXML.Закрыть();
		
		Фабрика = СоздатьФабрикуXDTO(ИмяФайлаСхемы);
		
		Попытка
			ОбщегоНазначенияКлиентСервер.УдалитьФайлыКлиентСервер(ИмяФайлаСхемы);
		Исключение
		КонецПопытки;
		
		Возврат Фабрика;
		
	КонецФункции
	
	// Возвращает имя типа, который будет использован в xml файле для указанного объекта метаданных.
	// Используется при поиске и замене ссылок при загрузке, при модификации схемы current-config при записи.
	// 
	// Параметры:
	//  Значение - Объект метаданных или Ссылка.
	//
	// Возвращаемое значение:
	//  Строка - Строка вида AccountingRegisterRecordSet.Хозрасчетный, описывающая объект метаданных.
	//
	Функция XMLТипСсылки(Знач Значение)
		
		Если ТипЗнч(Значение) = Тип("ОбъектМетаданных") Тогда
			ОбъектМетаданных = Значение;
			МенеджерОбъекта = МенеджерОбъектаПоПолномуИмени(ОбъектМетаданных.ПолноеИмя());
			Ссылка = МенеджерОбъекта.ПолучитьСсылку();
		Иначе
			ОбъектМетаданных = Значение.Метаданные();
			Ссылка = Значение;
		КонецЕсли;
		
		Если ОбъектОбразуетСсылочныйТип(ОбъектМетаданных) Тогда
			
			Возврат СериализаторXDTO.XMLТипЗнч(Ссылка).ИмяТипа;
			
		Иначе
			
			ТекстИсключения = НСтр("ru = 'Ошибка при определении XMLТипа ссылки для объекта %1: объект не является ссылочным!'");
			ТекстИсключения = СтрЗаменить(ТекстИсключения, "%1", ОбъектМетаданных.ПолноеИмя());
			
			ВызватьИсключение ТекстИсключения;
			
		КонецЕсли;
		
	КонецФункции
	
	// Возвращает менеджер объекта по полному имени объекта метаданных.
	// Ограничение: не обрабатываются точки маршрутов бизнес-процессов.
	//
	// Параметры:
	//  ПолноеИмя - Строка - полное имя объекта метаданных. Пример: "Справочник.Организации".
	//
	// Возвращаемое значение:
	//  СправочникМенеджер, ДокументМенеджер.
	// 
	Функция МенеджерОбъектаПоПолномуИмени(ПолноеИмя)
		
		ЧастиИмени = РазложитьСтрокуВМассивПодстрок(ПолноеИмя);
		
		Если ЧастиИмени.Количество() >= 2 Тогда
			КлассОМ = ЧастиИмени[0];
			ИмяОМ = ЧастиИмени[1];
		КонецЕсли;
		
		Если ВРег(КлассОМ) = "СПРАВОЧНИК" Тогда
			Менеджер = Справочники;
		ИначеЕсли ВРег(КлассОМ) = "ПЛАНВИДОВХАРАКТЕРИСТИК" Тогда
			Менеджер = ПланыВидовХарактеристик;
		ИначеЕсли ВРег(КлассОМ) = "ПЛАНСЧЕТОВ" Тогда
			Менеджер = ПланыСчетов;
		ИначеЕсли ВРег(КлассОМ) = "ПЛАНВИДОВРАСЧЕТА" Тогда
			Менеджер = ПланыВидовРасчета;
		КонецЕсли;
		
		Возврат Менеджер[ИмяОМ];
		
	КонецФункции
	
	Функция РазложитьСтрокуВМассивПодстрок(Знач Стр, Разделитель = ".")
		
		МассивСтрок = Новый Массив();
		ДлинаРазделителя = СтрДлина(Разделитель);
		Пока Истина Цикл
			Поз = Найти(Стр, Разделитель);
			Если Поз = 0 Тогда
				Если (СокрЛП(Стр) <> "") Тогда
					МассивСтрок.Добавить(Стр);
				КонецЕсли;
				Возврат МассивСтрок;
			КонецЕсли;
			МассивСтрок.Добавить(Лев(Стр,Поз - 1));
			Стр = Сред(Стр, Поз + ДлинаРазделителя);
		КонецЦикла;
		
	КонецФункции
	
	// Подставляет параметры в строку. Максимально возможное число параметров - 9.
	// Параметры в строке задаются как %<номер параметра>. Нумерация параметров начинается с единицы.
	//
	// Параметры:
	//  СтрокаПодстановки  - Строка - шаблон строки с параметрами (вхождениями вида "%ИмяПараметра");
	//  Параметр<n>        - Строка - подставляемый параметр.
	//
	// Возвращаемое значение:
	//  Строка   - текстовая строка с подставленными параметрами.
	//
	// Пример:
	//  ПодставитьПараметрыВСтроку(НСтр("ru='%1 пошел в %2'"), "Вася", "Зоопарк") = "Вася пошел в Зоопарк".
	//
	Функция ПодставитьПараметрыВСтроку(Знач СтрокаПодстановки,
		Знач Параметр1, Знач Параметр2 = Неопределено, Знач Параметр3 = Неопределено,
		Знач Параметр4 = Неопределено, Знач Параметр5 = Неопределено, Знач Параметр6 = Неопределено,
		Знач Параметр7 = Неопределено, Знач Параметр8 = Неопределено, Знач Параметр9 = Неопределено) Экспорт
		
		СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%1", Параметр1);
		СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%2", Параметр2);
		СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%3", Параметр3);
		СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%4", Параметр4);
		СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%5", Параметр5);
		СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%6", Параметр6);
		СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%7", Параметр7);
		СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%8", Параметр8);
		СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%9", Параметр9);
		
		Возврат СтрокаПодстановки;
		
	КонецФункции
	
	#region БФТ
	
	Функция ПроверитьПоддержкуШаблонов()
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		| БФТ_ФайлыШаблоновПреобразования.КодШаблона КАК КодШаблона
		|ИЗ
		| РегистрСведений.БФТ_ФайлыШаблоновПреобразования КАК БФТ_ФайлыШаблоновПреобразования
		|ГДЕ
		| НЕ БФТ_ФайлыШаблоновПреобразования.ШаблонНаПоддержке";
		
		КодыШаблонов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("КодШаблона");
		Если КодыШаблонов.Количество() > 0 Тогда
			ВызватьИсключение СтрШаблон("Шаблоны ""%1"" сняты с поддержки, восстановите поддержку.
			|Для восстановления поддержки необходимо обновить тексты шаблонов из системы контроля версии", СтрСоединить(КодыШаблонов, ","));    
		КонецЕсли;
	КонецФункции
	
	Процедура УдалитьВсеЗаписиТипа(Объект, ОбработанныеТипы)
		// Если ранее данные уже удалялись, выходим из процедуры.
		ОбъектМетаданных = Объект.Метаданные();
		Если ОбработанныеТипы.Найти(ОбъектМетаданных.ПолноеИмя()) <> Неопределено ИЛИ Не ЭтотОбъект.УдалятьЗаписиПередЗагрузкой Тогда
			Возврат;
		КонецЕсли;
		
		МенеджерОбъекта = ОбщегоНазначенияСервер.МенеджерОбъектаПоПолномуИмени(ОбъектМетаданных.ПолноеИмя());
		Попытка
			ЗапросОтбораДляВыгрузки = МенеджерОбъекта.ЗапросОтбораДляВыгрузки();
		Исключение
			ЗапросОтбораДляВыгрузки = "";
		КонецПопытки;
		
		// Если объект выгружается частично мы не должны остальные помечать на удаление.
		Если ЗначениеЗаполнено(ЗапросОтбораДляВыгрузки) Тогда
			Возврат;	
		КонецЕсли;
		
		ОбъектыПодсистемы = Новый Массив();
		ПодсистемаКорень = Метаданные.Подсистемы.АРМ_Сборок.ПолноеИмя;
		ПолноеИмяПодсистемы = Метаданные.Подсистемы.АРМ_Сборок.ПолноеИмя;
		Подсистема = Метаданные.НайтиПоПолномуИмени(ПолноеИмяПодсистемы);
		
		СоставПодсистемы = ОбщегоНазначенияСервер.ПолучитьСписокМетаданныхПодсистемы(ПодсистемаКорень.Имя, Подсистема.Имя);
		
		// Может получиться такое, что объект будет загружаться не входящий в подсистему ИмпортируемыеДанныеЦПК.
		// Это может быть если объект входящий в подсистему ИмпортируемыеДанныеЦПК ссылается на другой.
		// Такие объекты мы игнорируем.
		Если СоставПодсистемы.Найти(ОбъектМетаданных.ПолноеИмя()) = Неопределено Тогда 
			Возврат;  
		КонецЕсли;
		
		Если Не ТранзакцияАктивна() Тогда
			ВызватьИсключение "Удаление должно происходить в транзакции";   
		КонецЕсли;
		
		Менеджер = ОбщегоНазначенияСервер.МенеджерОбъектаПоПолномуИмени(ОбъектМетаданных.ПолноеИмя());
		Если ОбщегоНазначенияСервер.ЭтоРегистр(ОбъектМетаданных) Тогда
			#region УдалениеЗаписейРегистра
			
			Набор = Менеджер.СоздатьНаборЗаписей();  
			Набор.Прочитать();
			Набор.Очистить();
			Набор.Записать();
			
			Перейти ~Выход; // goto это как пикантные духи для женщины - когда много - отвратительно, а вот когда в тему - просто супер.
			#endregion
		КонецЕсли;
		
		// Если объект предопределенный, мы его не удаляем.
		Если Объект.Предопределенный ИЛИ Объект.ПометкаУдаления Тогда
			Возврат;
		КонецЕсли;
		
		Выборка = Менеджер.Выбрать();
		Пока Выборка.Следующий() Цикл
			#region УдалениеСсылочныхТипов
			// Исключаем записываемый объект, зачем нам его удалять.
			Если Не Объект.ЭтоНовый() И Выборка.Ссылка = Объект.Ссылка Тогда 
				Продолжить;  
			КонецЕсли;
			
			ОбъектДляУдаления = Выборка.ПолучитьОбъект();
			ОбъектДляУдаления.ОбменДанными.Загрузка = Истина; // Что бы всякие подписки не срабатывали.
			ОбъектДляУдаления.ПометкаУдаления = Истина;
			ОбъектДляУдаления.Записать();
			#endregion
		КонецЦикла;
		
		~Выход:
		ОбработанныеТипы.Добавить(ОбъектМетаданных.ПолноеИмя());
	КонецПроцедуры
	
	Процедура ВыполнитьЗагрузкуИзСборки(СборкаСсылка) Экспорт 
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
		|  БФТ_ХранилищеМакетов.ДанныеМакета,
		|  БФТ_ХранилищеМакетов.ВерсияАЦК_БУ КАК Версия
		|ИЗ
		|  РегистрСведений.БФТ_ХранилищеМакетов КАК БФТ_ХранилищеМакетов
		|ГДЕ
		|  БФТ_ХранилищеМакетов.Сборка = &СборкаСсылка";
		
		Запрос.УстановитьПараметр("СборкаСсылка", СборкаСсылка);
		
		ТекущийНомерПодсистемы = БФТ_ОбщиеМетодыАРМаСборокНаСервере.ПолучитьПорядковыйНомерВерсииПодсистемыАЦК();
		ВремФайл = ПолучитьИмяВременногоФайла("xml");
		Попытка
			
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				// Если версия текущей конфигурации отличается от той которая была на момент формирования макета,
				// значит ругаемся т.к. поменялась структура и такой макет все равно работать не будет.
				Если Выборка.Версия <> ТекущийНомерПодсистемы Тогда
					ВызватьИсключение "Загрузка макета невозможна, была изменена структура конфигурации";  
				КонецЕсли;
				
				Тело = РегистрыСведений.БФТ_ФайлыШаблоновПреобразования.ПрочитатьТелоФайла(Выборка.ДанныеМакета);
				Запись = Новый ЗаписьТекста(ВремФайл, КодировкаТекста.UTF8);
				Запись.Записать(Тело);
				Запись.Закрыть();
				ВыполнитьЗагрузку(ВремФайл);
			Иначе
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = "В сборка не найден макет, восстановите макеты в ручном режиме";
				Сообщение.Сообщить();
			КонецЕсли;
			
			ОбщегоНазначенияКлиентСервер.УдалитьФайлыКлиентСервер(ВремФайл);  
		Исключение
			ОбщегоНазначенияКлиентСервер.УдалитьФайлыКлиентСервер(ВремФайл);  
			ВызватьИсключение;
		КонецПопытки;
		
	КонецПроцедуры
	
	Процедура ПочиститьРеквизиты(Объект)
		МетаОбъект = Объект.Метаданные();
		Если МетаОбъект = Неопределено Тогда
			Возврат;  
		КонецЕсли;
		
		МенеджерОбъекта = ОбщегоНазначенияСервер.МенеджерОбъектаПоПолномуИмени(МетаОбъект.ПолноеИмя());
		// В попытке т.к. нет правильного способа проверить есть ли метод в модуле менеджера или нет.
		Попытка
			НеИмпортируемыеРеквизиты = МенеджерОбъекта.НеИмпортируемыеРеквизиты();
		Исключение
			НеИмпортируемыеРеквизиты = Новый Массив();
		КонецПопытки;  
		
		Для Каждого Реквизит Из НеИмпортируемыеРеквизиты Цикл
			РазбитоеИмя = СтрРазделить(Реквизит, ".");
			Если РазбитоеИмя.Количество() = 2 Тогда
				ТЧ = МетаОбъект.ТабличныеЧасти.Найти(РазбитоеИмя[0]);
				Если ТЧ <> Неопределено И ТЧ.Реквизиты.Найти(РазбитоеИмя[1]) <> Неопределено Тогда
					Для Каждого Стр Из Объект[РазбитоеИмя[0]] Цикл
						Стр[РазбитоеИмя[1]] = Неопределено;
					КонецЦикла;
				КонецЕсли;
			ИначеЕсли РазбитоеИмя.Количество() = 1 
				И МетаОбъект.Реквизиты.Найти(РазбитоеИмя[0]) <> Неопределено Тогда
				Объект[РазбитоеИмя[0]] = Неопределено;
			КонецЕсли;    
		КонецЦикла;
	КонецПроцедуры
	
	#endregion
	
	ПриЗагрузкеИспользоватьРежимОбменаДанными = Истина;
	ПродолжитьЗагрузкуВСлучаеВозникновенияОшибки = Ложь;
	ИспользоватьОтборПоДатеДляВсехОбъектов = Истина;
	мНаличиеВыгрузкиПодчиненныхОбъектов = Ложь;
	мКоличествоСохраненныхПоследнихВыгрузок = 50;
	
	мТипРезультатЗапроса = Тип("РезультатЗапроса");
	мТипДанныхУдаления = Тип("УдалениеОбъекта");
	
	мСоответствиеКолонокДвижений = Новый Соответствие;
	ОбработанныхКонстант = 0;
	ОбработанныхНаборовЗаписей = 0;
	
	#КонецОбласти	
	
#КонецЕсли