/////////////// Защита модуля ///////////////
// @protect                                //
/////////////////////////////////////////////

&НаКлиенте
Перем ПараметрыОбработчикаОжидания, ИдентификаторЗадания;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	ИнициализацияТаблицыЗаданий();
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ПоказатьПредупреждение(,НСтр("ru= 'Обработка не работает.'"));
	ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
КонецПроцедуры

&НаКлиенте
Процедура ПутьКСохраняемойКонфигурацииНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ПутьКонфигурации = ЗапроситьПутьСохраняемойКонфигурации();
	Если ЗначениеЗаполнено(ПутьКонфигурации) Тогда
		ПутьКСохраняемойКонфигурации = ПутьКонфигурации;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОтчетПриАктивизацииОбласти(Элемент)
	Версия = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(Элемент.ТекущаяОбласть.Текст);
	Если Элемент.ТекущаяОбласть.Лево <= 1 Или АктуальнаяВерсия Тогда
		Возврат;  
	КонецЕсли;
	
	ОбластьСЛева = Отчет.Область(СтрШаблон("R%1C%2", Формат(Элемент.ТекущаяОбласть.Верх, "ЧГ="), Формат(Элемент.ТекущаяОбласть.Лево-1, "ЧГ=")));
	Если Версия <> Неопределено И Версия > 0 И СтрНачинаетсяС(ОбластьСЛева.Текст, "Версия") Тогда
		Объект.НомерРевизии = Версия; 
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура АктуальнаяВерсияПриИзменении(Элемент)
	Если АктуальнаяВерсия Тогда
		Объект.НомерРевизии = -1;
		Элементы.НомерРевизии.Доступность = Ложь;
	Иначе
		Объект.НомерРевизии = 0;
		Элементы.НомерРевизии.Доступность = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	Строки = Задания.НайтиСтроки(Новый Структура("Картинка", 1));
	Если Строки.Количество() > 0 Тогда
		Отказ = Истина;
		Оп = Новый ОписаниеОповещения("ОбработкаРезультатаВопроса", ЭтаФорма, Новый Структура("Отказ", Отказ));
		ПоказатьВопрос(Оп, "Перенос конфигурации еще не завершен, прервать?", РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Нет, "Как поступить?");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СтрокаПодключенияКВременнойБДОткрытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	Если ЗначениеЗаполнено(Объект.СтрокаПодключенияКВременнойБД) Тогда
		ЗапуститьПриложение(Объект.СтрокаПодключенияКВременнойБД);  
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПолучитьКонфигурацию(Команда)
	СписокЭлементов = Новый Массив();
	Если Не ПроверитьЗаполнениеВГруппе(Элементы.грОбщая.Имя, СписокЭлементов) Тогда
		Сообщение = Новый СообщениеПользователю();
		Сообщение.Текст = СтрШаблон("Поля ""%1"" обязательны к заполнению", СтрСоединить(СписокЭлементов, ","));
		Сообщение.Сообщить();
		Возврат;  
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИдентификаторЗаданияОтчета) Тогда
		Сообщение = Новый СообщениеПользователю();
		Сообщение.Текст = "Дождитесь окончания формирования отчета";
		Сообщение.Сообщить();		
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		Сообщение = Новый СообщениеПользователю();
		Сообщение.Текст = "Процесс уже запущен";
		Сообщение.Сообщить();		
		Возврат;
	КонецЕсли;
	
	ИнициализацияТаблицыЗаданий();
	ОткрытьЯщик();
КонецПроцедуры


#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ИнициализацияТаблицыЗаданий()
	Задания.Очистить();
	
	НовСтр = Задания.Добавить();
	НовСтр.АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, Новый УникальныйИдентификатор());
	НовСтр.Комментарий = "Создание временной файловой БД";
	НовСтр.Метод = "СоздатьВременнуюБД";
	НовСтр.ОбратныйМетод = "ЗаполнитьСтрокуПодключенияКВременнойБД";
	НовСтр.Картинка = 0;
	
	НовСтр = Задания.Добавить();
	НовСтр.АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, Новый УникальныйИдентификатор());
	НовСтр.Комментарий = "Получение конфигурации из хранилища ""источник""";
	НовСтр.Метод = "ПолучитьКонфигурациюИзХранилищаВФоне";
	НовСтр.ОбратныйМетод = "ЗаполнитьПутьКСохраняемойКонфигурации";
	НовСтр.Картинка = 0;
	
	НовСтр = Задания.Добавить();
	НовСтр.АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, Новый УникальныйИдентификатор());
	НовСтр.Комментарий = "Очистка кеша конфигурации ""приемник""";
	НовСтр.Метод = "ОчиститьКешХранилищаВФоне";
	НовСтр.Картинка = 0;
	
	НовСтр = Задания.Добавить();
	НовСтр.АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, Новый УникальныйИдентификатор());
	НовСтр.Комментарий = "Подключаемся к хранилищу ""приемник""";
	НовСтр.Метод = "ПодключитьсяКХранилищуВФоне";
	НовСтр.Картинка = 0;
	
	НовСтр = Задания.Добавить();
	НовСтр.АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, Новый УникальныйИдентификатор());
	НовСтр.Комментарий = "Захватываем объекты хранилища ""приемник""";
	НовСтр.Метод = "ЗахватитьОбъектыВФоне";
	НовСтр.Картинка = 0;
	
	НовСтр = Задания.Добавить();
	НовСтр.АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, Новый УникальныйИдентификатор());
	НовСтр.Комментарий = "Обновляем конфигурацию";
	НовСтр.Метод = "ЗагрузитьКонфигурациюВФоне";
	НовСтр.Картинка = 0;
	
	НовСтр = Задания.Добавить();
	НовСтр.АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, Новый УникальныйИдентификатор());
	НовСтр.Комментарий = "Помещаем конфигурацию в хранилище ""приемник""";
	НовСтр.Метод = "ПоместитьВХранилищеВФоне";
	НовСтр.Картинка = 0;
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьЯщик()
	Перем СтрокаТаблицы;
	
	// Берем первую строку в которой не заполнен идентификатор ФЗ
	Для Каждого Стр Из Задания Цикл
		Если Не ЗначениеЗаполнено(Стр.ИдентификаторЗадания) Тогда
			СтрокаТаблицы = Стр;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если СтрокаТаблицы = Неопределено Тогда
		// Если строк больше нет, считаем что все выполнили. Удаляем временные файлы
		УдалитьВременныеФайлы();
		ИдентификаторЗадания = Неопределено;
		ОбновитьДоступностьЭлементов();
		Возврат; 
	КонецЕсли;
	
	СтрокаТаблицы.Картинка = 1;
	
	СтрокаТаблицы.ИдентификаторЗадания = Вычислить(СтрШаблон("%1(СтрокаТаблицы.АдресХранилища)", СтрокаТаблицы.Метод));
	ИдентификаторЗадания = СтрокаТаблицы.ИдентификаторЗадания;
	ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", ПараметрыОбработчикаОжидания.ТекущийИнтервал, Истина);
	ОбновитьДоступностьЭлементов();
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДоступностьЭлементов()
	Элементы.Группа1.ТолькоПросмотр = ЗначениеЗаполнено(ИдентификаторЗадания);  
КонецПроцедуры

//&НаКлиенте
//Процедура ОбновитьКонфигурациюИзХранилища()
//	Состояние("Получаем конфигурацию из хранилища ""Источник""");
//	
//	СтрокаЗапускаПлатформы = КаталогПрограммы() + "1cv8.exe";
//	ФайлЛога = ПолучитьИмяВременногоФайла();
//	
//	СтрокаЗапуска = """%1"" DESIGNER /F ""%2"" /ConfigurationRepositoryF ""%3""" +
//	                "/ConfigurationRepositoryN ""%4""" +
//	                "/ConfigurationRepositoryP ""%5""" +
//	                "/ConfigurationRepositoryUpdateCfg -1 -force /OUT ""%6""";
//	  
//	СтрокаЗапуска = СтрШаблон(СтрокаЗапуска, СтрокаЗапускаПлатформы, Объект.СтрокаПодключенияКВременнойБД,
//	                          Объект.ПутьКХранилищуИсточник, 
//	                          Объект.ПользовательХранилищаИсточник,
//	                          Объект.ПарольХранилищаИсточник,
//	                          ФайлЛога);
//	
//	КодВозврата = Неопределено;
//	ЗапуститьПриложение(СтрокаЗапуска,, Истина, КодВозврата);
//	
//	Если КодВозврата = 0 Тогда 
//		УдалитьФайлы(ФайлЛога);                                           
//	Иначе
//	  ВызватьИсключение СтрШаблон("Произошла ошибка:
//	  |%1", ПолучитьЛогВыгрузкиФайловКонфигурации(ФайлЛога));
//	КонецЕсли;
//КонецПроцедуры

#region Ящик

&НаСервере
Функция СоздатьВременнуюБД(АдресХранилища) 
	Парам = Новый Массив();  
	Парам.Добавить(АдресХранилища); 
	ФЗ = ФоновыеЗадания.Выполнить("БФТ_ДлительныеОперацииСервер.СоздатьВременнуюБД", Парам, "", "СоздатьВременнуюБД");
	
	Возврат ФЗ.УникальныйИдентификатор;
КонецФункции

&НаСервере
Функция ПолучитьКонфигурациюИзХранилищаВФоне(АдресХранилища) 
	Парам = Новый Массив();
	Парам.Добавить(АдресХранилища); 
	Парам.Добавить(Объект.СтрокаПодключенияКВременнойБД);
	Парам.Добавить(Объект.ПутьКХранилищуИсточник); 
	Парам.Добавить(Объект.ПользовательХранилищаИсточник); 
	Парам.Добавить(Объект.ПарольХранилищаИсточник); 
	Парам.Добавить(Объект.НомерРевизии); 
	
	ФЗ = ФоновыеЗадания.Выполнить("БФТ_ДлительныеОперацииСервер.ПолучитьКонфигурациюИзХранилища", Парам, "", "ПолучитьКонфигурациюИзХранилищаВФоне");
	Возврат ФЗ.УникальныйИдентификатор;
КонецФункции

&НаСервере
Функция ОчиститьКешХранилищаВФоне(АдресХранилища)
	Парам = Новый Массив();
	Парам.Добавить(Объект.СтрокаПодключенияКВременнойБД);
	Парам.Добавить(Объект.ПутьКХранилищуПриемник); 
	Парам.Добавить(Объект.ПользовательХранилищаПриемник); 
	Парам.Добавить(Объект.ПарольХранилищаПриемник); 
	
	ФЗ = ФоновыеЗадания.Выполнить("БФТ_ДлительныеОперацииСервер.ОчиститьКешХранилища", Парам, "", "ОчиститьКешХранилищаВФоне");
	Возврат ФЗ.УникальныйИдентификатор;
КонецФункции

&НаСервере
Функция ПодключитьсяКХранилищуВФоне(АдресХранилища)
	Парам = Новый Массив();
	Парам.Добавить(Объект.СтрокаПодключенияКВременнойБД);
	Парам.Добавить(Объект.ПутьКХранилищуПриемник); 
	Парам.Добавить(Объект.ПользовательХранилищаПриемник); 
	Парам.Добавить(Объект.ПарольХранилищаПриемник); 
	
	ФЗ = ФоновыеЗадания.Выполнить("БФТ_ДлительныеОперацииСервер.ПодключитьсяКХранилищу", Парам, "", "ПодключитьсяКХранилищуВФоне");
	Возврат ФЗ.УникальныйИдентификатор;
КонецФункции

&НаСервере
Функция ЗахватитьОбъектыВФоне(АдресХранилища)
	Парам = Новый Массив();
	Парам.Добавить(Объект.СтрокаПодключенияКВременнойБД);
	Парам.Добавить(Объект.ПутьКХранилищуПриемник); 
	Парам.Добавить(Объект.ПользовательХранилищаПриемник); 
	Парам.Добавить(Объект.ПарольХранилищаПриемник); 
	
	ФЗ = ФоновыеЗадания.Выполнить("БФТ_ДлительныеОперацииСервер.ЗахватитьОбъекты", Парам, "", "ВыгрузитьКонфигурациюИсточник");
	Возврат ФЗ.УникальныйИдентификатор;
КонецФункции

&НаСервере
Функция ЗагрузитьКонфигурациюВФоне(АдресХранилища)
	Парам = Новый Массив();
	Парам.Добавить(Объект.СтрокаПодключенияКВременнойБД);
	Парам.Добавить(ПутьКСохраняемойКонфигурации); 
	Парам.Добавить(СохранитьНастройкиОбъединенияВФайл()); 
	
	ФЗ = ФоновыеЗадания.Выполнить("БФТ_ДлительныеОперацииСервер.ЗагрузитьКонфигурацию", Парам, "", "ЗагрузитьКонфигурациюВФоне");
	Возврат ФЗ.УникальныйИдентификатор;
КонецФункции

&НаСервере
Функция ПоместитьВХранилищеВФоне(АдресХранилища)
	Парам = Новый Массив();
	Парам.Добавить(Объект.СтрокаПодключенияКВременнойБД);
	Парам.Добавить(Объект.ПутьКХранилищуПриемник); 
	Парам.Добавить(Объект.ПользовательХранилищаПриемник); 
	Парам.Добавить(Объект.ПарольХранилищаПриемник); 
	Парам.Добавить(Объект.ПутьКХранилищуИсточник); 
	Парам.Добавить(Объект.НомерРевизии); 
	
	ФЗ = ФоновыеЗадания.Выполнить("БФТ_ДлительныеОперацииСервер.ПоместитьВХранилище", Парам, "", "ПоместитьВХранилищеВФоне");
	Возврат ФЗ.УникальныйИдентификатор;
КонецФункции

#endregion

#region callback

Процедура ЗаполнитьСтрокуПодключенияКВременнойБД(Результат)
	Объект.СтрокаПодключенияКВременнойБД = Результат;  
КонецПроцедуры

Процедура ЗаполнитьПутьКСохраняемойКонфигурации(Результат)
	ПутьКСохраняемойКонфигурации = Результат;  
КонецПроцедуры

#endregion

#region ДлительныеОперации

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеЗадания()
	Стр = Задания.НайтиСтроки(Новый Структура("ИдентификаторЗадания", ИдентификаторЗадания));
	Если Стр.Количество() <> 1 И Не ЗначениеЗаполнено(ИдентификаторЗаданияОтчета) Тогда
		ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", ПараметрыОбработчикаОжидания.ТекущийИнтервал, Истина);
		Возврат;  
	КонецЕсли;
	
	
	Если ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		Попытка
			Если ЗаданиеВыполнено(ИдентификаторЗадания) Тогда			
				Стр[0].Картинка = 2;  
				
				// Получаем данные ФЗ
				Результат = ПолучитьИзВременногоХранилища(Стр[0].АдресХранилища);
				Если ЗначениеЗаполнено(Стр[0].ОбратныйМетод) Тогда
					Выполнить(СтрШаблон("%1(Результат)", Стр[0].ОбратныйМетод));  
				КонецЕсли;
				
				ОткрытьЯщик(); // Делаем следующий шаг
			Иначе
				ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
				ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", ПараметрыОбработчикаОжидания.ТекущийИнтервал, Истина);
			КонецЕсли;
		Исключение
			Стр[0].Картинка = 3;  
			УдалитьВременныеФайлы();
			ИдентификаторЗадания = Неопределено;
			ВызватьИсключение;
		КонецПопытки;
	КонецЕсли;
	
	Попытка
		Если ЗначениеЗаполнено(ИдентификаторЗаданияОтчета) И ЗаданиеВыполнено(ИдентификаторЗаданияОтчета) Тогда
			// Получаем данные ФЗ
			Результат = ПолучитьИзВременногоХранилища(АдресХранилищаОтчета);
			Элементы.ПостроитьОтчет.Картинка = БиблиотекаКартинок.БФТ_СинхронизацияДанных;
			ИдентификаторЗаданияОтчета = Неопределено;
			ЗагрузитьФайлОтчетаНаСервере(Результат);
			
			УдалитьВременныеФайлы();
		Иначе                                                                         
			ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
			ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", ПараметрыОбработчикаОжидания.ТекущийИнтервал, Истина);
		КонецЕсли;
	Исключение
		Элементы.ПостроитьОтчет.Картинка = БиблиотекаКартинок.БФТ_СинхронизацияДанных;
		УдалитьВременныеФайлы();
		ВызватьИсключение;
	КонецПопытки;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаданиеВыполнено(ИдентификаторЗадания)
	Возврат ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторЗадания);
КонецФункции

#endregion

&НаСервере
Процедура УдалитьВременныеФайлы()
	Попытка   
		УдалитьФайлы(Объект.СтрокаПодключенияКВременнойБД);
		УдалитьФайлы(ПутьКСохраняемойКонфигурации);
		
		Объект.СтрокаПодключенияКВременнойБД = "";
		ПутьКСохраняемойКонфигурации = "";
	Исключение
	КонецПопытки;
КонецПроцедуры

//&НаКлиенте
//Функция ПолучитьФайлыКонфигурации()
//	Состояние("Сохраняем конфигурацию ""Источник"" в файлы");
//	
//	СтрокаЗапускаПлатформы = КаталогПрограммы() + "1cv8.exe";
//	ФайлЛога = ПолучитьИмяВременногоФайла();
//	КаталогСохраненияФайлов = КаталогВременныхФайлов() + Строка(Новый УникальныйИдентификатор());
//	СоздатьКаталог(КаталогСохраненияФайлов);
//	
//	СтрокаЗапуска = """%1"" DESIGNER /F ""%2"" /DumpConfigToFiles ""%3"" -Format Plain /OUT ""%4""";
//	  
//	СтрокаЗапуска = СтрШаблон(СтрокаЗапуска, СтрокаЗапускаПлатформы, 
//	Объект.СтрокаПодключенияКВременнойБД,
//	КаталогСохраненияФайлов, ФайлЛога);
//	
//	КодВозврата = Неопределено;
//	ЗапуститьПриложение(СтрокаЗапуска,, Истина, КодВозврата);
//	
//	Если КодВозврата = 0 Тогда 
//		УдалитьФайлы(ФайлЛога);                                           
//	Иначе
//	  ВызватьИсключение СтрШаблон("Произошла ошибка:
//	  |%1", ПолучитьЛогВыгрузкиФайловКонфигурации(ФайлЛога));
//	КонецЕсли;
//	
//	Возврат КаталогСохраненияФайлов;
//КонецФункции

&НаСервере
Функция СохранитьНастройкиОбъединенияВФайл()
	Тело = РеквизитФормыВЗначение("Объект").ПолучитьМакет("Настройки").ПолучитьТекст();
	
	ФайлНастроек = ПолучитьИмяВременногоФайла("xml");
	ЗаписьТекста = Новый ЗаписьТекста(ФайлНастроек, КодировкаТекста.UTF8);
	ЗаписьТекста.Записать(Тело);
	ЗаписьТекста.Закрыть();
	
	Возврат ФайлНастроек;
КонецФункции

&НаСервере
Функция ПолучитьФайлОтчетаПоХранилищуВФоне()
	Парам = Новый Массив();
	Парам.Добавить(АдресХранилищаОтчета);
	Парам.Добавить(Объект.СтрокаПодключенияКВременнойБД); 
	Парам.Добавить(Объект.ПутьКХранилищуИсточник); 
	Парам.Добавить(Объект.ПользовательХранилищаИсточник); 
	Парам.Добавить(Объект.ПарольХранилищаИсточник); 
	Парам.Добавить(2000); // нет смысла в отчет получать данные ревизии раньше чем 2000
	
	ФЗ = ФоновыеЗадания.Выполнить("БФТ_ДлительныеОперацииСервер.ПолучитьФайлОтчетаПоХранилищу", Парам, "", "ПолучитьФайлОтчетаПоХранилищуВФоне");
	Возврат ФЗ.УникальныйИдентификатор;
КонецФункции

//&НаКлиенте
//Функция ПроверитьЗаполнениеПолейФормы()
//	Если Объект.ТолькоВыгрузить И Не ЗначениеЗаполнено(ПутьКСохраняемойКонфигурации) Тогда
//		Возврат Ложь;  
//	КонецЕсли;
//	
//	Возврат ПроверитьЗаполнение();  
//КонецФункции

&НаКлиенте
Функция ЗапроситьПутьСохраняемойКонфигурации()
	Диалог                    = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	Диалог.Заголовок          = "Сохраните *.cf";
	Диалог.Расширение = "cf";
	
	Если Диалог.Выбрать() Тогда
		Возврат Диалог.ПолноеИмяФайла;
	КонецЕсли;  
КонецФункции

&НаСервере
Функция ПроверитьЗаполнениеВГруппе(ИмяГруппыРодителя, СписокЭлементов)
	Группа = Элементы.Найти(ИмяГруппыРодителя);
	Если Группа = Неопределено Тогда
		Возврат Истина;  
	КонецЕсли;
	
	Для Каждого Элем Из Группа.ПодчиненныеЭлементы Цикл
		Если ТипЗнч(Элем) = Тип("ПолеФормы") И
			Элем.Вид = ВидПоляФормы.ПолеВвода И
			Элем.АвтоОтметкаНезаполненного = Истина И
			Не ЗначениеЗаполнено(Вычислить(Элем.ПутьКДанным))
			И Элем.Видимость Тогда
			
			Имя = ?(ЗначениеЗаполнено(Элем.Заголовок), Элем.Заголовок, Элем.Имя);
			СписокЭлементов.Добавить(Имя); 
		ИначеЕсли ТипЗнч(Элем) = Тип("ГруппаФормы") Тогда
			ПроверитьЗаполнениеВГруппе(Элем.Имя, СписокЭлементов);
		КонецЕсли;
	КонецЦикла;
	
	Возврат СписокЭлементов.Количество() = 0;
КонецФункции

&НаКлиенте
Процедура ПостроитьОтчет(Команда)
	
	Если ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		Сообщение = Новый СообщениеПользователю();
		Сообщение.Текст = "Дождитесь окончания завершения процесса";
		Сообщение.Сообщить();		
		Возврат;
	КонецЕсли;
	
	Адрес = ПоместитьВоВременноеХранилище(Неопределено, Новый УникальныйИдентификатор());
	АдресХранилищаОтчета = ПоместитьВоВременноеХранилище(Неопределено, Новый УникальныйИдентификатор());
	БФТ_ДлительныеОперацииСервер.СоздатьВременнуюБД(Адрес);
	ПолучитьПутьВременнойБД(Адрес);
	
	ИдентификаторЗаданияОтчета = ПолучитьФайлОтчетаПоХранилищуВФоне();
	Элементы.ПостроитьОтчет.Картинка = БиблиотекаКартинок.БФТ_СинхронизацияДанныхДлительнаяОперация49;
	
	ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
	ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", ПараметрыОбработчикаОжидания.ТекущийИнтервал, Истина);
	
	
	
	//Попытка
	//  ПоместитьФайл(Адрес, Файл,, Ложь, ЭтаФорма.УникальныйИдентификатор);
	//  ЗагрузитьФайлОтчетаНаСервере(Адрес);
	//  
	//  УдалитьФайлы(Файл);
	//Исключение
	//  УдалитьФайлы(Файл);
	//  ВызватьИсключение;
	//КонецПопытки;
КонецПроцедуры

&НаСервере
Процедура ПолучитьПутьВременнойБД(Адрес)
	Результат = ПолучитьИзВременногоХранилища(Адрес); 
	Объект.СтрокаПодключенияКВременнойБД = Результат;
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьФайлОтчетаНаСервере(ФайлОтчета)
	//ФайлОтчета = ПолучитьИмяВременногоФайла("mxl");
	Попытка
		//Данные = ПолучитьИзВременногоХранилища(Адрес);
		//Данные.Записать(ФайлОтчета);
		Отчет.Прочитать(ФайлОтчета);
		Отчет.ПоказатьУровеньГруппировокСтрок(0);
		
		УдалитьФайлы(ФайлОтчета);
	Исключение
		УдалитьФайлы(ФайлОтчета);
		ВызватьИсключение;
	КонецПопытки;
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаРезультатаВопроса(РезультатВопроса, ДополнительныеПараметры) Экспорт
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ПрерватьВыполнениеФоновыхЗаданий(); 
		Закрыть();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПрерватьВыполнениеФоновыхЗаданий()
	Строки = Задания.НайтиСтроки(Новый Структура("Картинка", 1));
	Для Каждого Стр Из Строки Цикл
		Стр.Картинка = 0;
		ФЗ = ФоновыеЗадания.НайтиПоУникальномуИдентификатору(Стр.ИдентификаторЗадания);  
		Если ФЗ <> Неопределено Тогда
			ФЗ.Отменить();  
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

#КонецОбласти